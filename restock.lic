#   Documentation: https://elanthipedia.play.net/Lich_script_repository#restock

custom_require.call(%w[common common-items common-money common-travel])

class Restock
  def initialize
    arg_definitions = [
      [
        { name: 'debug', regex: /debug/, optional: true, description: 'Use this arg to run the script in debug mode.' }
      ]
    ]

    args = parse_args(arg_definitions, true)

    @debug = args.debug || false
    @settings = get_settings
    @restock = @settings.restock
    @hometown = @settings.fang_cove_override_town || @settings.hometown
    @runestone_storage = @settings.runestone_storage
    amount, denom = @settings.sell_loot_money_on_hand.split(' ')
    @keep_copper = DRCM.convert_to_copper(amount, denom)
    @settings.storage_containers.each { |container| DRCI.open_container?("my #{container}") }

    start_restock
  end

  def start_restock
    # Parse data from user's yaml and base-consumables
    items = parse_restockable_items
    # If user has specified a custom location to restock a specific item, grab that here
    custom_loc_items = items.select { |k| k['hometown'] }
    # Remove those custom location items from the primary restock items list
    items -= custom_loc_items
    # Call the restock_items method on restock items that don't have custom location set
    restock_items(items, @settings.hometown)

    # Restock items that have a custom location set
    custom_loc_items.map { |k| k['hometown'] }.uniq
                    .each do |_hometown|
      custom_loc_items.group_by { |v| v['hometown'] }
                      .each { |hometown, each_item| restock_items(each_item, hometown) }
    end
  end

  def restock_items(item_list, town)
    items_to_restock = []
    coin_needed = 0

    item_list.each do |item|
      remaining = if item['stackable']
                    count_stackable_item(item)
                  else
                    count_nonstackable_item(item)
                  end
      next unless remaining < item['quantity']

      num_needed = item['quantity'] - remaining
      buy_num = (num_needed / item['size'].to_f).ceil
      coin_needed += buy_num * item['price']
      item['buy_num'] = buy_num
      items_to_restock.push(item)
    end

    return if items_to_restock.empty?

    DRCI.stow_hands

    if coin_needed > 0
      # The following line is for the bribe to the night attendant to let you in to shops in Shard.
      # Since the total bribe amounts are paltry in comparison to a modern character's average
      # wealth, we'll avoid complexity and just grab the highest bribe amount times the number
      # of restock items, even if its daytime. We deposit excess coins at the end, anyway.
      coin_needed += 2502 * item_list.length.to_i
      echo "Coin needed is #{coin_needed}" if @debug
      DRCM.ensure_copper_on_hand(coin_needed, @settings, town)
    end

    items_to_restock.each do |item|
      item['buy_num'].times do
        DRCT.buy_item(item['room'], item['name'])
        if reget(3, 'Seeing that you are too encumbered')
          bput("get #{item['name']} from counter", "You get a")
        end

        if item['container']
          DRCI.put_away_item?(item['name'], item['container'])
        elsif item['name'] =~ /runestone/i
          DRCI.put_away_item?(item['name'], @runestone_storage)
        else
          DRCI.stow_hands
        end
      end
    end
    DRCM.deposit_coins(@keep_copper, @settings, "#{town}")
  end

  def parse_restockable_items
    # Get the yaml restock hash
    item_list = @restock
    # Get the hometown consumables from base-consumables
    hometown_data = get_data('consumables')[@hometown]
    items = []

    # Iterate through the yaml restock hash
    item_list.each do |key, value|
      echo "Restock Item: #{key} - #{value}" if @debug

      # If any restock key exists as a key in hometown consumables
      # AND a custom town specification doesn't exist in this restock item,
      # then we'll restock this item using the data in base-consumables for our hometown.
      if hometown_data.key?(key) && !value.key?('hometown')
        # Get hash from base-consumables for the specific restock item (e.g. 'arrow')
        ht_data = hometown_data[key]

        # Iterate through the base-consumables hash. Use consumable data from base-consumables
        # _unless_ specific data is specified in user's yaml.
        ht_data.each_key { |k| value[k] = ht_data[k] unless value.key?(k) }
        items.push(value)
      # Otherwise, the user has specified a custom restock. This custom set needs to specify
      # ALL data for restocking, since we're not doing a base-consumables lookup.
      elsif valid_item_data?(value)
        items.push(value)
      else
        echo "No hometown of explicit data for '#{key}'"
      end
    end
    # Return the full set of populated restock data, either full custom user-provided or from
    # base-consumables or a combination thereof.
    echo "Items are: #{items}" if @debug
    items
  end

  def count_stackable_item(item)
    echo "Counting stackable item: #{item}" if @debug

    count = 0
    $ORDINALS.each do |ordinal|
      count_msg = DRC.bput("count my #{ordinal} #{item['name']}",
                           'I could not find what you were referring to.',
                           'tell you much of anything.',
                           'and see there \w+ .+ left.',
                           'The \S+ has about \d+ uses of .* remaining\.  It is labeled',
                           'The \S+ has about one use of .* remaining\.  It is labeled',
                           'The .* is empty\.$')
      case count_msg
      when 'I could not find what you were referring to.'
        break
      when 'tell you much of anything.'
        echo "#{item['name']} is marked as stackable but is not!"
        count += count_nonstackable_item(item)
        break
      when /The \S+ has about \d+ uses of .* remaining.  It is labeled/
        count += count_msg.match(/has about (\d+) uses of/).captures.first.to_i
      when /The \S+ has about one use of .* remaining.  It is labeled/
        count += 1
      when /is empty\.$/
        echo "#{ordinal} #{item} is finished: trashing"
        dispose(item)
        redo
      else
        count_txt = count_msg.match(/and see there \w+ (.+) left./).captures.first.tr('-', ' ')
        count += DRC.text2num(count_txt)
      end
      waitrt?
    end
    count
  end

  def count_nonstackable_item(item)
    echo "Counting nonstackable item: #{item}" if @debug

    container = item['container']
    unless container
      /inside your (.*).|I could not find/ =~ DRC.bput("tap my #{item['name']}", 'inside your (.*).', 'I could not find')
      tap_result = Regexp.last_match(1)
      return 0 if tap_result.nil?

      container = tap_result
    end
    DRCI.count_items_in_container(item['name'], container)
  end

  def valid_item_data?(item_data)
    echo "Validating custom item data: #{item_data}" if @debug

    %w[name size room price stackable quantity].all? { |x| item_data.key?(x) }
  end
end

Restock.new

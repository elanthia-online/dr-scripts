=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#smith
=end

custom_require.call(%w[common common-crafting common-items common-money common-travel drinfomon])

class Smith
  def initialize
    arg_definitions = [
      [
        { name: 'material', regex: /\w+/, description: 'Metal type of the ingot' },
        { name: 'item_name', display: 'recipe name', regex: /^[A-z\s\-\']+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'stamp', regex: /^stamp/i, optional: true, description: 'To stamp completed items' },
        { name: 'here', regex: /^here/i, optional: true, description: 'Force it to forge in the room you are currently in, useful for private forge rentals or forge wands' },
        { name: 'temper', regex: /^temper/i, optional: true, description: 'Tempers crafted item, boost durability' },
        { name: 'hone', regex: /^hone/i, optional: true, description: 'Hones crafted item(weapon only), reducing weight and impact' },
        { name: 'balance', regex: /^balance/i, optional: true, description: 'Balance crafted item (weapon only), increasing balance at the cost of suitability' },
        { name: 'lighten', regex: /^lighten/i, optional: true, description: 'Lightens crafted armor or shield, reducing weight only' },
        { name: 'reinforce', regex: /^reinforce/i, optional: true, description: 'Improves some absorption/protection stats at the cost of increased weight and hinderance' },
        { name: 'buy', regex: /^buy/i, optional: true, description: 'Used to purchase the ingot' }
      ]
    ]

    args = parse_args(arg_definitions)

    @settings = get_settings
    @hometown = @settings.force_crafting_town || @settings.hometown
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.forging_belt
    discipline = get_data('crafting')['blacksmithing'][@hometown]
    workorders_materials = @settings.workorders_materials
    @materials_info = get_data('crafting')['stock'][workorders_materials['metal_type']]
    @container = get_settings.crafting_container
    recipes = get_data('recipes').crafting_recipes.select { |recipe| recipe['type'] =~ /blacksmithing|weaponsmithing|armorsmithing/i }
    recipe = DRCC.recipe_lookup(recipes, args.item_name)
    return unless recipe

    DRCM.ensure_copper_on_hand(3000, @settings, @hometown) unless args.here

    parts = recipe['part'] || []
    parts << "leather strip" if args.reinforce # adds part to the list for reinforce
    smith(args.material, discipline, recipe, parts, args.buy, args.stamp, args.temper, args.hone, args.balance, args.lighten, args.reinforce, args.here)
  end

  def smith(material, discipline, recipe, parts, buy, stamp, temper, hone, balance, lighten, reinforce, stay)
    if discipline['stock-volume'] < recipe['volume'] && buy
      echo '***You cannot buy an ingot large enough to craft this item.***'
      echo '***Automatically combining ingots via smelting is not yet supported.***'
      echo '***You will need to do so by hand and then call ;smith again.***'
      exit
    end

    buy_parts(parts) unless stay
    buy_ingot(discipline) if buy
    DRCC.find_anvil(@hometown) unless stay
    DRC.wait_for_script_to_complete('buff', ['smith'])
    DRC.wait_for_script_to_complete('forge', [recipe['type'], recipe['chapter'], recipe['name'], material, recipe['noun'], stay ? 'skip' : nil])
    stamp_item(recipe['noun']) if stamp
    [temper, hone, balance, lighten, reinforce].compact.each do |enhancement|
      DRC.wait_for_script_to_complete('forge', [enhancement, recipe['noun'], stay ? 'skip' : nil])
    end
    dispose_scrap(discipline, recipe) if buy
    dispose_parts(discipline, parts) unless stay
  end

  def buy_parts(parts)
    DRCI.stow_hands

    parts.each do |part|
      data = get_data('crafting')['recipe_parts'][part][@hometown]
      if data['part-number']
        DRCT.order_item(data['part-room'], data['part-number'])
      else
        DRCT.buy_item(data['part-room'], part)
      end
      DRCC.stow_crafting_item(part, @bag, @belt)
    end
  end

  def buy_ingot(discipline)
    DRCT.order_item(discipline['stock-room'], @materials_info['stock-number'])
    DRCC.stow_crafting_item('ingot', @bag, @belt)
    DRCI.stow_hands
  end

  def stamp_item(noun)
    DRCC.get_crafting_item('stamp', @bag, @bag_items, @belt)
    DRC.bput("mark my #{noun} with my stamp", 'carefully hammer the stamp', 'You cannot figure out how to do that', 'too badly damaged')
    DRCC.stow_crafting_item('stamp', @bag, @belt)
  end

  def dispose_scrap(discipline, recipe)
    return unless @materials_info['stock-volume'] > recipe['volume']

    DRCT.dispose("#{@materials_info['stock-name']} ingot", discipline['trash-room'])
  end

  def dispose_parts(discipline, parts)
    parts.each do |part|
      DRCT.dispose(part, discipline['trash-room'])
    end
  end
end

Smith.new

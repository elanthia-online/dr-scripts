=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#sigilrecorder
=end

custom_require.call(%w[common common-arcana common-items common-travel events spellmonitor equipmanager])

class SigilRecorder
  require 'yaml'

  def initialize
    arg_definitions = [
      [
        { name: 'debug', regex: /debug/i, optional: true, description: 'Show debug messaging' }
      ]
    ]

    args = parse_args(arg_definitions)

    @debug = args.debug

    # initialize arrays for supported towns, sigils, and seasons
    @city_list = ['Crossing', 'Riverhaven', 'Shard']
    @sigil_list = ['abolition', 'congruence', 'induction', 'permutation', 'rarefaction', 'antipode', 'ascension', 'clarification', 'decay', 'evolution', 'integration', 'metamorphosis', 'nurture', 'paradox', 'unity']
    @season_list = ['summer', 'fall', 'winter', 'spring']
    @start_room = Room.current.id

    # pull data and settings and store the current region and season
    @data = get_data('sigils')
    @settings = get_settings
    @region = get_region # parse Room.current.image for which region/city we're in
    @season = get_season # make sure we're recording sigils to the correct season
    @hunting_zones = get_data('hunting').hunting_zones.values.flatten.uniq!

    # generate an array of all the room numbers associated with the current room's Room.current.image value
    region_list = region_room_list
    # subtract known hunting spots and any other rooms in the YAML's nogo list to avoid combat and rooms with known mapping issues
    walk_list = generate_nogo_list(region_list)

    # debug info
    DRC.message("Region detected: #{@region}") if @debug
    DRC.message("Season detected: #{@season.capitalize}") if @debug

    # perform any outdoorsmanship buffs as this is the skill that governs sigil hunting
    DRC.message("Checking for 'outdoors' waggle set...") if @debug
    DRCA.do_buffs(@settings, 'outdoors') # perc sigil uses Outdoorsmanship

    # flag known patterns that suggest the room is unsuitable for sigil hunting or harvesting
    Flags.add('sigil-danger-room', /.*begins to advance on you.*|You weave back and forth in a dance-like motion|You must be closer to use tactical abilities on your opponent/)

    # main travel loop, travels to rooms and then kicks off the sigil hunting process
    walk_list.each do |roomid|
      # check if the room title is in the 'banpatterns' array before travelling there. Skip and add to nogo if a match is found
      banflag = false
      @data.SigilInfo['banpatterns'].each do |pattern|
        if Map[roomid].title.to_s.include?(pattern)
          DRC.message("Adding #{roomid} to nogo. Match found in 'banpatterns'.") if @debug
          prune_walk_list(roomid, @data)
          banflag = true
        end
      end
      next if banflag

      # store whether the attempt to travel to the target room was successful
      if check_room_data(roomid) >= 2 # Checking for known sigils for this room. If 2 are known, skip room.
        DRC.message("Sigils in target room (#{roomid}) already known. Skipping...") if @debug
        pause 0.1
        next
      else
        travel_result = DRCT.walk_to(roomid, false)
      end

      # check buffs in the event they're running low
      DRCA.do_buffs(@settings, 'outdoors')
      # debug info
      DRC.message("Travel Success? #{travel_result} | Room Target: #{roomid}") if @debug

      # if the current room is lacking a roomid or associated image file then we're likely in a bad room, banlist the room and attempt to navigate out
      if Room.current.id == nil || Room.current.image == nil
        DRC.message("Adding #{roomid} to nogo due to lack of detected room number.") if @debug
        prune_walk_list(roomid, @data)
        unstuck_me(roomid)
        next
      end

      # if the target room was reached successfully and has a roomid/image file (checked above) then start the 'perc sigil' process
      if travel_result == true
        sigils = find_sigils
        record_sigil(sigils, @data) # write found sigils to file
      else
        # if the room was not reached successfully we assume it is unreachable and banlist it
        DRC.message('Unable to reach target room. Adding to no-go list and moving to next room.') if @debug
        prune_walk_list(roomid, @data) # write to nogo list in file
      end # if
    end # do

    # do one more round of pruning to remove any rooms on the nogo list from sigil data then walk back to where the script was started and exit
    prune_final_list
    DRCT.walk_to(@start_room)
  end # initialize

  # returns the current season by parsing results of 'time' verb
  def get_season
    timestring = DRC.bput('time', /^It is currently.*/, /^The clerk says/)
    if /^The clerk says/ =~ timestring # Annoyingly, this verb does something when near some NPCs. SIGH.
      DRC.message("The TIME verb does not work in this room.") if @debug
      prune_walk_list(Room.current.id, @data) # banlist annoying rooms where the 'time' verb works differently
      return false
    end
    /^It is currently (\w+) and it is.*$/ =~ timestring
    return $1.downcase
  end # get_season

  # detects the current region by comparing Room.current.image with region and city name patterns
  def get_region
    case Room.current.image.downcase
    when /ilithi|Shard/i
      region = 'Shard'
    when /zoluren|Crossing/i
      region = 'Crossing'
    when /therengia|Riverhaven/i
      region = 'Riverhaven'
    else
      DRC.message("Unsupported area. Sigilrecorder only supports areas where the associated map image file references Crossing, Shard, Riverhaven or their associated provinces. Current map image:#{Room.current.image}") if @debug
      exit
    end # case
    return region
  end # get_region

  # builds a single array of all mapped sigil rooms for the current season then returns how many times roomid appears in that array
  def check_room_data(roomid)
    room_array = []
    @sigil_list.each do |sigil|
      @data.SigilInfo.dig(@region, sigil, @season).each do |number|
        if number != nil
          room_array.push(number)
        end
      end
    end

    # remove nil values and then count the number of instances of roomid int the array
    room_array.compact
    room_matches = room_array.count(roomid)

    DRC.message("Target room (#{roomid}) matches in data = #{room_matches}") if @debug

    # return the number of instances of roomid
    return room_matches
  end # check_room_data

  # attempts to navigate out of a room lacking a roomid (something that confuses go2 on which we rely) most often caused by day/night issues in a room
  def unstuck_me(stuck_room)
    # Use the room we think we're in to plot a path back to our starting point, if at any point along the path Room.current.id becomes recognized again, return and resume the script
    prune_walk_list(stuck_room, @data) # add the detected bad room to nogo
    escape_list = Map[stuck_room].path_to(@start_room)
    current_room = stuck_room
    escape_list.each do |roomid|
      DRC.message("We might be in room #{current_room}.")
      direction = Map[current_room].wayto[roomid.to_s]
      DRC.message("Trying move command: #{direction}.")
      move direction
      waitrt?
      pause 1
      current_room = roomid
      break if Room.current.id != nil
    end
    return if Room.current.id != nil

    # If we are unable to find a mapped exit give up and exit the script
    DRC.message('Cannot find a way out. Exiting script.')
    exit
  end # unstuck_me

  # uses 'perc sigil' repeatedly until both sigils are discovered
  def find_sigils
    room_sigils = []
    while room_sigils.length < 2
      # weave is a 0 RT way of detecting enemies in the room. It will auto face enemies but will not harass players or NPCs. After weaving check if the danger-room flag has tripped
      DRC.bput('weave', /You weave back and forth in a dance-like motion/, /You must be closer to use tactical abilities on your opponent/, /There is nothing else to face/)
      if Flags['sigil-danger-room']
        prune_walk_list(Room.current.id, @data) unless Room.current.id == nil
        return nil
      end

      # main 'perc sigil' DRC.bput and case statement. When sigils are detected they're added to an array
      case line = DRC.bput('perceive sigil', @sigil_list, 'Roundtime', /^You recall.*|^Having recently been searched/, /You are too distracted|Something about|This is not an appropriate place for that/)
      when /^You recall.*|^Having recently been searched/
        DRC.message('Room searched too recently') if @debug
        return nil
      when /You are too distracted|Something about|This is not an appropriate place for that/
        prune_walk_list(Room.current.id, @data)
        return nil
      when *@sigil_list
        room_sigils.push(line)
        DRC.message("Found: #{room_sigils}") if @debug
      end
    end # while

    # return the array of all sigils discovered in the room (should be 2 unless something went wrong)
    return room_sigils
  end

  # generate the list of all rooms that contain the current room's Room.current.image data
  def region_room_list
    # generate the array
    roomlist = Map.list.select { |room| room.image == Room.current.image }.map(&:id)

    # return the full list of rooms
    return roomlist
  end # region_room_list

  # writes a roomid to the nogo list which is subtracted from the walk_list when the script is run in the future
  def prune_walk_list(banroom, file_data)
    # initialize a new array if nogo is empty
    file_data.SigilInfo['nogo'] ||= []

    # push the roomid to the array and remove any duplicates
    file_data.SigilInfo['nogo'].push(banroom) unless file_data.SigilInfo['nogo'].include?(banroom)

    # alert the player which room has been added to the nogo list
    DRC.message("Unsuitable room for sigil harvesting. Adding Room #{banroom} to no-go list.") if @debug
    File.open(File.join(SCRIPT_DIR, "data/base-sigils.yaml"), "w") { |file| file.write(file_data.to_yaml) } # write roomid to file
    Flags.reset('sigil-danger-room')
    pause 0.2
  end # prune_walk_list

  # reads base hunting data and combines all rooms with rooms from nogo into a single array
  def generate_nogo_list(room_list)
    DRC.message("Pruning walk list to avoid combat. Current list size: #{room_list.length}") if @debug
    ban_list = [@hunting_zones, @data.SigilInfo['nogo']].flatten.compact.uniq

    # subtract array of potentially dangerous rooms from the room list that was passed in
    room_list -= ban_list
    DRC.message("Walk list has been pruned. New list size: #{room_list.length}") if @debug
    pause 1
    return room_list # pruned, safer roomlist is returned
  end # generate_nogo_list

  # remove any rooms in the nogo list from recorded sigil locations before the script exits
  def prune_final_list
    ban_list = [@hunting_zones, @data.SigilInfo['nogo']].flatten.compact.uniq

    @city_list.each do |city|
      @sigil_list.each do |sigil|
        @season_list.each do |season|
          @data.SigilInfo[city][sigil][season] -= ban_list if @data.SigilInfo[city][sigil][season] != nil
        end
      end
    end
  end # prune_final_list

  # writes the rooms sigil data to base-sigils.yaml
  def record_sigil(found_sigils, file_data)
    # check to make sure the sigil array passed in is not empty

    DRC.message("Writing following data to base-sigils: #{found_sigils}") if @debug

    # loop through the sigils and place them in the correct spot in @data
    found_sigils.each do |sigil|
      # if the array doesn't exist yet, initialize a new one
      if file_data.SigilInfo[@region][sigil][@season] == nil
        file_data.SigilInfo[@region][sigil][@season] = []
      end
      # push the current roomid into the hash/array under the correct region, sigil, and season keys
      file_data.SigilInfo[@region][sigil][@season].push(Room.current.id) unless file_data.SigilInfo[@region][sigil][@season].include?(Room.current.id)
    end

    # before writing, ensure the season has not changed resulting in potentially invalid data
    if get_season == @season
      File.open(File.join(SCRIPT_DIR, "data/base-sigils.yaml"), "w") { |file| file.write(file_data.to_yaml) }
    else
      # this happens if the season has changed or an unexpected reply was received when using 'time'
      DRC.message("Season change or issue with TIME verb detected. Sigils for room:#{Room.current.id} not saved. Room added to no-go list.")
    end
  end # record_sigil
end # SigilRecorder

# delete our flags
before_dying do
  Flags.delete('sigil-danger-room')
end

SigilRecorder.new

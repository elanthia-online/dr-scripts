=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#focus-rune
=end

custom_require.call(%w[common-travel common common-items common-arcana spellmonitor])

class Runestone
  include DRC
  include DRCT
  include DRCI
  include DRCA

  def initialize
    arg_definitions = [
      [
        { name: 'spell',
          regex: /^[A-z\s\-']+$/i,
          variable: true,
          description: "Specify spell to cast from runestone. Spells are: 'Arc Light'
                Althleticism Bless Calm 'Clear Vision' Compost 'Eagle's Cry'
                'Fire Shards' 'Glythtide's Gift' Geyser 'Protection from Evil'
                Refresh Shadows Zephyr. Use double quotes." },

        { name: 'debug',
          regex: /debug/i,
          optional: true }
      ]
    ]

    args = parse_args(arg_definitions)
    spell = args.spell
    @debug = args.debug
    settings = get_settings
    buff_spell_mana_threshold = settings.buff_spell_mana_threshold
    @runestone_storage = settings.runestone_storage
    @harness = settings.runestone_harness
    runestone_purchase = settings.runestone_purchase

    echo spell if @debug
    echo @harness if debug
    @rune = get_rune_name_for_spell_name(spell)
    echo @rune if @debug
    spell = format_spell_name(args.spell)

    until DRSpells.active_spells.include?(spell)
      pause 1 while mana < buff_spell_mana_threshold
      if DRCI.exists?("#{@rune} runestone in #{@runestone_storage}")
        runestone_cast
      elsif runestone_purchase
        buy_runestone
      else
        out_of_runestone
      end
    end
  end

  def format_spell_name(spell)
    ### Because Protection from Evil has a lowercase letter for the middle word
    ### this work around is required.
    if spell == "protection from evil"
      return "Protection from Evil"
    else
      return spell.split(/ |\_|\-/).map(&:capitalize).join(" ")
    end
  end

  def get_rune_name_for_spell_name(rune)
    runestone_map = {
      "arc Light" => "calavarite",
      "athleticism" => "selenite",
      "bless" => "elbaite",
      "calm" => "xibaryl",
      "clear vision" => "avaes",
      "compost" => "asketine",
      "eagle's cry" => "electrum",
      "fire shards" => "rhodonite",
      "geyser" => "celestite",
      "glythtide's gift" => "axinite",
      "protection from evil" => "topaz",
      "refresh" => "quartz",
      "shadows" => "azurite",
      "zephyr" => "imnera"
    }
    runestone_map[rune] ? runestone_map[rune] : rune
  end

  def runestone_cast
    get_runestone
    case bput("invoke my #{@rune} runestone", 'Closing your eyes',\
                                               'Well, that was fun',\
                                               'backfire',\
                                               'The spell pattern resists',\
                                               'Invoke what?')
    when 'Well, that was fun'
      waitrt?
      DRCI.dispose_trash("#{@rune} runestone")
      runestone_cast
    when 'backfire','The spell pattern resists'
      return
    when 'Invoke what?'
      out_of_runestone
    end
    waitcastrt?
    bput("harn #{@harness}", 'You tap into the mana')
    waitrt?
    bput('cast', 'You')
    waitrt?
    DRCI.put_away_item?("#{@rune} runestone", @runestone_storage)
  end

  def get_runestone
    DRCI.get_item("#{@rune} runestone", @runestone_storage)
    if reget(3, "You get a useless #{@rune} runestone")
      DRCI.dispose_trash("#{@rune} runestone")
    end
  end

  def buy_runestone
    current_room = Room.current.id
    DRC.wait_for_script_to_complete('restock')
    DRCT.walk_to(current_room)
  end

  def out_of_runestone
    DRC.message("*** Out of #{@rune} runestones! ***")
    beep
    exit
  end

  before_dying do

  end
end
Runestone.new
=begin
  Documentation: https://elanthipedia.play.net/mediawiki/index.php/Lich_script_development#remedy
=end

# ;remedy remedies 2 "blister cream" "red flower" nemoih bar mortar cream
# ;remedy remedies 2 "blister cream" nemoih "not used" bar mortar cream  - for when only herb is required

custom_require.call(%w[common common-arcana common-crafting common-items common-travel common-money events])

class Remedy
  include DRC
  include DRCC
  include DRCI
  include DRCA
  include DRCT
  include DRCM

  def initialize
    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.alchemy_belt
    @training_spells = @settings.crafting_training_spells
    @stock = get_data('crafting')['remedies'][@settings.hometown]

    arg_definitions = [
      [
        { name: 'book_type', display: 'book type', options: %w[remedies], description: 'What alchemy type is this item.' },
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s\-]+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'herb1', regex: /\w+/i, variable: true, description: 'Prepared herb, wrap in double quotes if this is multiple words..' },
        { name: 'herb2', regex: /\w+/i, variable: true, description: 'Prepared herb, wrap in double quotes if this is multiple words. Put none for none.' },
        { name: 'catalyst', regex: /\w+/i, variable: true, description: 'Type of catalyst.' },
        { name: 'container', regex: /\w+/i, variable: true, description: 'Type of container for creating.' },
        { name: 'noun', regex: /\w+/i, variable: true, options: %w[cream salve wash balm ungent potion tonic ointment elixir poultices draught], description: 'End product' }
      ]
    ]

    args = parse_args(arg_definitions)

    @book_type = args.book_type
    @chapter = args.chapter
    @recipe_name = args.recipe_name
    @herb1 = args.herb1
    @herb2 = args.herb2
    @catalyst = args.catalyst
    @container = args.container
    @pestle = 'pestle'
    @verb = 'crush'
    @noun = args.noun
    @count = 0
    @herb_container = @settings.herb_container # normal container or special herb container both work

    # determine water and alcohol container and check if water or alcohol is in container
    @water = 'water'     # added for special containers that generate water/alcohol
    @waterVerb = 'put'   # changed to pour when using a container
    if @settings.water_container
      get_item(@settings.water_container)
      if bput("count water in my #{@settings.water_container}", 'parts left of the', 'part left of the', 'I could not find what you were referring to.') != 'I could not find what you were referring to.'
        @water = @settings.water_container
        @waterVerb = 'pour'
      else # else (not elsif) needed to rub special container for water before checking again, uses defaults if container doesn't have water
        fput("rub my #{@settings.water_container}")
        fput("get water from #{@bag}") # added this part just in case water is in another bag, get water doesn't work, and container cannot create water
        fput("put water in my #{@settings.water_container}")
        if bput("count water in my #{@settings.water_container}", 'parts left of the', 'part left of the', 'I could not find what you were referring to.') != 'I could not find what you were referring to.'
          @water = @settings.water_container
          @waterVerb = 'pour'
        end
      end
      stow_item(@water)
    end
    @alcohol = 'alcohol' # same as water
    @alcoholVerb = 'put' # same as water
    if @settings.alcohol_container
      get_item(@settings.alcohol_container)
      if bput("count alcohol in my #{@settings.alcohol_container}", 'parts left of the', 'part left of the', 'I could not find what you were referring to.') != 'I could not find what you were referring to.'
        @alcohol = @settings.alcohol_container
        @alcoholVerb = 'pour'
      else # else (not elsif) needed to rub special container for alcohol before checking again, uses defaults if container doesn't have alcohol
        fput("rub my #{@settings.alcohol_container}")
        fput("get alcohol from #{@bag}") # added this part just in case alcohol is in another bag, get alcohol doesn't work, and container cannot create alcohol
        fput("put alcohol in my #{@settings.alcohol_container}")
        if bput("count alcohol in my #{@settings.alcohol_container}", 'parts left of the', 'part left of the', 'I could not find what you were referring to.') != 'I could not find what you were referring to.'
          @alcohol = @settings.alcohol_container
          @alcoholVerb = 'pour'
        end
      end
      stow_item(@alcohol)
    end

    # buy ingredients if missing
    if @water == 'water' && bput("tap my #{@water}", 'You tap', 'I could not find what you were referring to.') == 'I could not find what you were referring to.'
      buy_item('water')
    end
    if @alcohol == 'alcohol' && bput("tap my #{@alcohol}", 'You tap', 'I could not find what you were referring to.') == 'I could not find what you were referring to.'
      buy_item('alcohol')
    end
    if ['coal nugget', 'nugget'].include?(@catalyst) && bput("tap my #{@catalyst}", 'You tap', 'I could not find what you were referring to.') == 'I could not find what you were referring to.'
      buy_item('coal')
    end
    wait_for_script_to_complete('buff', ['remedy'])

    create_item
  end

  def get_item(name)
    # added to check for herbs in special herb container, then check if herbs in crafting container, otherwise get normally
    # this is to prevent issues getting herbs if someone has less than 25 in @herb_container
    # there are still issues when herbs are in a different container (not @bag or @herb_container), script will still run fine

    if (name == @herb1 || name == @herb2) && @settings.herb_container && bput("tap #{name} in #{@herb_container}", 'You tap', 'I could not find what you were referring to.') != 'I could not find what you were referring to.'
      get_crafting_item(name, @herb_container, true, @belt) # bag_items is TRUE to look for herbs in herb_container
    elsif (name == @herb1 || name == @herb2) && bput("tap #{name} in #{@bag}", 'You tap', 'I could not find what you were referring to.') != 'I could not find what you were referring to.'
      get_crafting_item(name, @bag, true, @belt) # bag_items is TRUE to look for herbs in bag
    else
      get_crafting_item(name, @bag, @bag_items, @belt) # bag_items is FALSE to GET HERB without specifying a bag
      'none' # return specified to handle herbs differently for this option (to prevent a bug)
    end
  end

  def stow_item(name)
    if (name == @herb1 || name == @herb2) && @settings.herb_container
      stow_crafting_item(name, @herb_container, @belt) # try to put herbs in herb container first
    else
      stow_crafting_item(name, @bag, @belt)
    end
  end

  def turn_to(section)
    unless section
      echo('Failed to find recipe in book, buy a better book?')
      stow_item('book')
      magic_cleanup
      exit
    end
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def create_item
    @count = 0
    crafting_magic_routine(@settings)
    stow_item(left_hand)
    stow_item(right_hand)
    bput('get remed book', 'What were', 'You get')
    echo('*** You will need to upgrade to a journeyman or master book before 176 ranks! ***') if DRSkill.getrank('Alchemy') == 175
    turn_to("page #{find_recipe(@chapter, @recipe_name)}")
    bput('study my book', 'Roundtime')
    stow_item('book')

    if ['red flowers', 'blue flowers'].include?(@herb1)
      @herb1 = 'dried flowers' unless exists?('red flowers') || exists?('blue flowers')
    end
    get_item(@container)
    bput("lower #{@container} ground", 'You lower') # lower to count and combine herbs

    # count herb, less than 25 get more herbs, otherwise stow and continue
    # added to handle herb containers, and modified to combine up to 25
    while @count < 25
      case get_item(@herb1) # returns 'none' to handle getting herbs differently, see comment under when 'none'
      when 'none'
        # this part is to avoid the message "You are already holding that."
        # in cases where it won't get more herbs, it takes a longer route to get herbs from other bags (not @bag nor @herb_container)
        @count = Integer(bput("count my #{@herb1}", '\d+'))
        while @count < 25
          bput("put my #{@herb1} in my #{@container}", 'You put', 'already has something in it.')
          bput("get my #{@container}", 'You pick up', 'You get')
          stow_item(@container)
          bput("get my #{@herb1}", 'You get', 'What were you referring to?', 'You are already holding that.') # using bput instead of get_item to keep script running when it cannot get the herb
          fput("get my #{@container}")
          bput("lower #{@container} ground", 'You lower')
          bput("get #{@herb1} from #{@container}", 'You get', 'What were you referring to?')
          if bput("combine my #{@herb1}", 'You combine', 'too large to add', 'You must be holding both') == 'You must be holding both'
            @count = 25
          else
            @count += Integer(bput("count my #{@herb1}", '\d+'))
          end
        end
      else
        @count += Integer(bput("count my #{@herb1}", '\d+'))
        if bput("combine my #{@herb1}", 'You combine', 'too large to add', 'You must be holding both') == 'too large to add'
          stow_item(@herb1)
        end
      end
    end

    case bput("put #{@herb1} in my #{@container}", 'You put', 'already has something', 'can only hold', 'You realize the', 'You vigorously rub')
    when 'You put', 'can only hold', 'You vigorously rub'
      stow_item(@herb1) # Added for when the herb is larger than 25 pieces
    when 'already has something', 'You realize the'
      bput("tilt my #{@container}", 'You grab')
      bput("tilt my #{@container}", 'You grab', 'Roundtime')
      bput("put #{@herb1} in my #{@container}", 'You put')
      stow_item(@herb1) # Added for when the herb is larger than 25 pieces
    end

    get_item(@container) # pickup off ground

    if @container == 'mortar'
      get_item(@pestle)
      work("#{@verb} my #{@herb1} with my #{@pestle}")
    else
      @pestle = 'mixing stick'
      @verb = 'mix'
      get_item(@pestle)
      work("#{@verb} my #{@container} with my #{@pestle}")
    end
  end

  def work(command)
    waitrt?
    crafting_magic_routine(@settings)
    case bput(command,
              'Applying the final touches',
              'you just can\'t mix',
              'Try as you might',
              'You need another splash of water',
              'You need another splash of alcohol',
              'You toss the',
              'You need another catalyst material',
              'You need another prepared herb',
              'You cannot find a way to add that as an ingredient',
              'Once finished you notice clumps of material',
              'Clumps of material stick to the sides',
              'Upon completion you see some particulate clouding up the mixture.',
              'begins to transition colors',
              'smell the mixture',
              'you should smell the mixture',
              'You sniff the',
              'That tool does not seem suitable for that task.',
              'You vigorously rub',
              'Patiently you wait a few moments and then proceed',
              'The mortar can only hold 25 pieces of material.',
              'You spin your',
              'You slowly filter',
              'You filter',
              'What were you referring to?',
              'You need to be holding the pestle first.',
              'You need to be holding the mixing stick first.',
              'You need to be holding the stick goof!',
              'with a sieve',
              'Interesting thought really... but no.',
              'appears free of defects that would impede further preparation.',
              'composition looks accurate and ready for continued preparation.',
              'You do not see anything that would prevent preparing',
              'You try to analyze',
              'Roundtime:')
    when 'Applying the final touches', 'Interesting thought really... but no.', 'you just can\'t mix', 'Try as you might'
      finish
    when 'You cannot find a way to add that as an ingredient'
      waitrt?
      stow_item(left_hand)
      bput("lower #{@container} ground", 'You lower')
      get_item(@water)
      if bput("get water from #{@water}", 'You get', 'What were you referring to?') == 'What were you referring to?'
        stow_item(@water)
        get_item('water')
      end
      if bput("put water in #{@container}", 'You put', 'You toss the', 'not required to continue crafting') == 'not required to continue crafting'
        fput("put water in #{@water}")
        stow_item(left_hand)
        stow_item(right_hand)
        get_item(@alcohol)
        if bput("get alcohol from #{@alcohol}", 'You get', 'What were you referring to?') == 'What were you referring to?'
          stow_item(@alcohol)
          get_item('alcohol')
        end
        bput("put alcohol in #{@container}", 'You put', 'You toss the', 'not required to continue crafting')
        fput("put alcohol in #{@alcohol}")
      else
        fput("put water in #{@water}")
      end
      stow_item(left_hand)
      stow_item(right_hand)
      bput("get #{@container}", 'You pick up', 'You get')
      command = "analyze my #{@noun}"
    when 'You need another splash of water'
      waitrt?
      stow_item(left_hand)
      get_item(@water)
      command = "#{@waterVerb} #{@water} in my #{@container}"
    when 'You need another splash of alcohol'
      waitrt?
      stow_item(left_hand)
      get_item(@alcohol)
      command = "#{@alcoholVerb} #{@alcohol} in my #{@container}"
    when 'You need another catalyst material'
      waitrt?
      stow_item(left_hand)
      get_item(@catalyst)
      command = "put my #{@catalyst} in my #{@container}"
    when 'You need another prepared herb'
      waitrt?
      stow_item(left_hand)
      get_item(@herb2)
      command = "put my #{@herb2} in my #{@container}"
    when 'Upon completion you see some particulate clouding up the mixture.', 'with a sieve'
      waitrt?
      stow_item(left_hand)
      get_item('sieve')
      command = "push my #{@noun} with my sieve"
    when 'Clumps of material stick to the sides', 'Once finished you notice clumps of material'
      waitrt?
      command = "turn my #{@container}"
    when 'begins to transition colors', 'you should smell the mixture', 'smell the mixture'
      waitrt?
      command = "smell my #{@noun}"
    when 'You vigorously rub', 'That tool does not seem suitable for that task.', 'What were you referring to?', 'You toss the', 'The mortar can only hold 25 pieces of material.'
      waitrt?
      stow_item(left_hand)
      get_item(@pestle)
      command = "analyze my #{@noun}"
    when 'You slowly filter', 'You filter', 'You spin your', 'You sniff the', 'You try to analyze', 'appears free of defects that would impede further preparation.', 'You do not see anything that would prevent preparing', 'composition looks accurate and ready for continued preparation.', 'You need to be holding the pestle first.', 'You need to be holding the mixing stick first.', 'You need to be holding the stick goof!'
      waitrt?
      stow_item(left_hand)
      get_item(@pestle)
      command = if @container == 'mortar'
                  "#{@verb} my #{@noun} with my #{@pestle}"
                else
                  "#{@verb} my #{@container} with my #{@pestle}"
                end
    when 'Patiently you wait a few moments and then proceed', 'Roundtime:'
      waitrt?
      command = if @container == 'mortar'
                  "#{@verb} my #{@noun} with my #{@pestle}"
                else
                  "#{@verb} my #{@container} with my #{@pestle}"
                end
    end
    waitrt?
    crafting_magic_routine(@settings)
    work(command)
  end

  def buy_item(name)
    get_money_from_bank('5 silver', @settings)

    case name
    when 'coal'
      order_item(@stock['catalyst-room'], @stock['catalyst_number'])
      stow_item('coal nugget')
    when 'water'
      order_item(@stock['stock-room'], @stock['stock-number'])
      stow_item('water')
    when 'alcohol'
      order_item(@stock['stock-room'], @stock['stock-number-a'])
      stow_item('alcohol')
    end

    walk_to(@settings.alchemy_room)
  end

  def magic_cleanup
    return if @training_spells.empty?

    bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
    bput('release mana', 'You release all', "You aren't harnessing any mana")
    bput('release symb', "But you haven't", 'You release', 'Repeat this command')
  end

  def finish
    waitrt?
    stow_item(left_hand)
    fput("get my #{@noun} from my #{@container}")
    stow_item(right_hand)
    magic_cleanup
    exit
  end
end

Remedy.new

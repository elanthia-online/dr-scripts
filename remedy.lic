=begin
  Documentation: https://elanthipedia.play.net/mediawiki/index.php/Lich_script_development#remedy
=end

# ;remedy remedies 2 "blister cream" "red flower" nemoih bar mortar cream
# ;remedy remedies 2 "blister cream" nemoih "not used" bar mortar cream  - for when only herb is required

custom_require.call(%w(common common-crafting))

class Remedy
  include DRC
  include DRCC

  def initialize
    settings = get_settings
    @bag = settings.crafting_container('backpack')

    arg_definitions = [
      [
        { name: 'book_type', display: 'book type', options: %w(remedies), description: 'What alchemy type is this item.' },
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s]+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'herb1', regex: /\w+/i, variable: true, description: 'Prepared herb, wrap in double quotes if this is multiple words..' },
        { name: 'herb2', regex: /\w+/i, variable: true, description: 'Prepared herb, wrap in double quotes if this is multiple words. Put none for none.' },
        { name: 'catalyst', regex: /\w+/i, variable: true, description: 'Type of catalyst.' },
        { name: 'container', regex: /\w+/i, variable: true, description: 'Type of container for creating.' },
        { name: 'noun', regex: /\w+/i, variable: true, options: %w(cream salve wash balm ungent potion tonic ointment elixir poultices draught), description: 'End product' }
      ]
    ]

    args = parse_args(arg_definitions)

    @book_type = args.book_type
    @chapter = args.chapter
    @recipe_name = args.recipe_name
    @herb1 = args.herb1
    @herb2 = args.herb2
    @catalyst = args.catalyst
    @container = args.container
    @noun = args.noun

    create_item
  end

  def get_item(name)
    get_crafting_item(name, @belt)
  end

  def stow_item(name)
    stow_crafting_item(name, @bag, @belt)
  end

  def turn_to(section)
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def create_item
    #    get_item('remedies book')
    bput('get remed book', 'What were', 'You get')
    #    bput('get remedy book', 'What were', 'You get')
    turn_to("page #{find_recipe(@chapter, @recipe_name)}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    get_item(@container.to_s)
    get_item(@herb1.to_s)
    fput("put #{@herb1} in my #{@container}")
    stow_item(@herb1.to_s) # Added for when the herb is larger than 25 pieces
    if @container == 'mortar'
      get_item('pestle')
      # bput("get my pestle", "You get")
      crush("crush my #{@herb1} with my pestle")
    else
      bput('get my mixing stick', 'You get')
      mix("mix my #{@container} with my stick")
    end
  end

  def crush(command)
    waitrt?
    case bput(command,
              'You need another splash of water',
              'You toss the water',
              'Upon completion you see some particulate clouding up the mixture.',
              'You need another prepared herb',
              'begins to transition colors',
              'You need another catalyst material',
              'Once finished you notice clumps of material',
              'With short strokes you crush',
              'Applying the final touches',
              'That tool does not seem suitable for that task.',
              'You vigorously rub',
              'Patiently you wait a few moments and then proceed',
              'Interesting thought really... but no.',
              'You need to be holding the pestle first.',
              'The mortar can only hold 25 pieces of material.',
              'You spin your',
              'You slowly filter')
    when 'You need another splash of water'
      waitrt?
      stow_item(checkleft)
      get_item('water')
      command = "put water in #{@container}"
    when 'You toss the water'
      stow_item(checkleft)
      get_item('pestle')
      crush("crush my #{@noun} with my pestle")
    when 'You slowly filter', 'You spin your'
      stow_item(checkleft)
      get_item('pestle')
      crush("crush my #{@noun} with my pestle")
    when 'Upon completion you see some particulate clouding up the mixture.'
      waitrt?
      stow_item(checkleft)
      get_item('sieve')
      command = "push my #{@noun} with my sieve"
    when 'Once finished you notice clumps of material'
      waitrt?
      command = "turn my #{@container} with my pestle"
    when 'Patiently you wait a few moments and then proceed'
      waitrt?
      crush("crush my #{@noun} with my pestle")
    when 'Interesting thought really... but no.'
      finish
    when 'With short strokes you crush'
      case bput("analyze my #{@noun}",
                'appears free of defects that would impede further preparation.',
                'composition looks accurate and ready for continued preparation',
                'smell the mixture', 'You need to be holding the pestle first.',
                'You do not see anything that would prevent preparing',
                'with a sieve',
                'Clumps of material stick to the sides',
                'Applying the final touches',
                'Interesting thought really... but no.',
                'easy piece to make''
                'You try to analyze')
      when 'You do not see anything that would prevent preparing','You try to analyze'
        stow_item(checkleft)
        get_item('pestle')
        command = "crush my #{@noun} with my pestle"
      when 'appears free of defects that would impede further preparation.'
        stow_item(checkleft)
        get_item('pestle')
        command = "crush my #{@noun} with my pestle"
      when 'composition looks accurate and ready for continued preparation'
        stow_item(checkleft)
        get_item('pestle')
        command = "crush my #{@noun} with my pestle"
      when 'smell the mixture'
        command = "smell my #{@noun}"
      when 'You need to be holding the pestle first'
        stow_item(checkleft)
        get_item('pestle')
        command = "crush my #{@noun} with my pestle"
      when 'Clumps of material stick to the sides'
        waitrt?
        command = "turn my #{@container} with my pestle"
      when 'Applying the final touches', 'Interesting thought really... but no.', 'easy piece to make'
        finish
      when 'with a sieve'
        stow_item(checkleft)
        get_item('sieve')
        command = "push my #{@noun} with my sieve"
      end
    when 'You need another prepared herb'
      waitrt?
      stow_item(checkleft)
      get_item(@herb2.to_s)
      command = "put my #{@herb2} in my #{@container}"
    when 'You need another catalyst material'
      waitrt?
      stow_item(checkleft)
      get_item(@catalyst.to_s)
      command = "put my #{@catalyst} in my #{@container}"
    when 'begins to transition colors'
      waitrt?
      command = "smell my #{@noun}"
    when 'Applying the final touches'
      finish
    when 'You vigorously rub'
      waitrt?
      stow_item(checkleft)
      get_item('pestle')
      crush("crush my #{@noun} with my pestle")
    when 'You need to be holding the pestle first.'
      waitrt?
      stow_item(checkleft)
      get_item('pestle')
      crush("crush my #{@noun} with my pestle")
    when 'That tool does not seem suitable for that task.'
      case bput("analyze my #{@noun}",
                'appears free of defects that would impede further preparation.',
                'composition looks accurate and ready for continued preparation.',
                'You do not see anything that would prevent preparing',
                'smell the mixture',
                'You need to be holding the pestle first.',
                'with a sieve',
                'You try to analyze')
      when 'appears free of defects that would impede further preparation.', 'You do not see anything that would prevent preparing', 'composition looks accurate and ready for continued preparation.', 'You try to analyze'
        stow_item(checkleft)
        get_item('pestle')
        command = "crush my #{@noun} with my pestle"
      when 'smell the mixture'
        command = "smell my #{@noun}"
      when 'You need to be holding the pestle first'
        stow_item(checkleft)
        get_item('pestle')
        command = "crush my #{@noun} with my pestle"
      when 'with a sieve'
        stow_item(checkleft)
        get_item('sieve')
        command = "push my #{@noun} with my sieve"
      end
    end
    waitrt?
    crush(command)
  end

  def mix(command)
    waitrt?
    case bput(command,
              'You need another splash of water',
              'You toss the water',
              'Upon completion you see some particulate clouding up the mixture.',
              'You need another prepared herb',
              'begins to transition colors',
              'You need another catalyst material',
              'Once finished you notice clumps of material',
              'With wide strokes you mix',
              'Applying the final touches',
              'That tool does not seem suitable for that task.',
              'You vigorously rub',
              'Patiently you wait a few moments and then proceed',
              'Interesting thought really... but no.',
              'You need to be holding the mixing stick first.',
              'The mortar can only hold 25 pieces of material.',
              'You slowly filter')
    when 'You need another splash of water'
      waitrt?
      stow_item(checkleft)
      get_item('water')
      command = "put water in #{@container}"
    when 'You toss the water'
      stow_item(checkleft)
      get_item('mixing stick')
      mix("mix my #{@container} with my stick")
    when 'You slowly filter'
      stow_item(checkleft)
      get_item('stick')
      command("mix my #{@container} with my stick")
    when 'Upon completion you see some particulate clouding up the mixture.'
      waitrt?
      stow_item(checkleft)
      get_item('sieve')
      mix("push my #{@noun} with my sieve")
    when 'Once finished you notice clumps of material'
      waitrt?
      mix("turn my #{@container} with my stick")
    when 'Patiently you wait a few moments and then proceed'
      waitrt?
      mix("mix my #{@container} with my stick")
    when 'Interesting thought really... but no.'
      finish
    when 'With wide strokes you mix'
      case bput("analyze my #{@noun}",
                'appears free of defects that would impede further preparation.',
                'composition looks accurate and ready for continued preparation',
                'smell the mixture',
                'You need to be holding the mixing stick first.',
                'You do not see anything that would prevent preparing',
                'with a sieve',
                'Clumps of material stick to the sides',
                'Applying the final touches',
                'Interesting thought really... but no.',
                'easy piece to make',
                'simple piece to make',
                'You try to analyze')
      when 'You do not see anything that would prevent preparing', 'appears free of defects that would impede further preparation.', 'composition looks accurate and ready for continued preparation', 'You try to analyze'
        stow_item(checkleft)
        get_item('stick')
        mix("mix my #{@container} with my stick")
      when 'smell the mixture'
        command = "smell my #{@noun}"
      when 'You need to be holding the mixing stick first'
        stow_item(checkleft)
        get_item('stick')
        mix("mix my #{@container} with my stick")
      when 'Clumps of material stick to the sides'
        waitrt?
        command = "turn my #{@container} with my stick"
      when 'Applying the final touches', 'Interesting thought really... but no.', 'easy piece to make', 'simple piece to make'
        finish
      when 'with a sieve'
        stow_item(checkleft)
        get_item('sieve')
        command = "push my #{@noun} with my sieve"
      end
    when 'You need another prepared herb'
      waitrt?
      stow_item(checkleft)
      get_item(@herb2.to_s)
      command = "put my #{@herb2} in my #{@container}"
    when 'You need another catalyst material'
      waitrt?
      stow_item(checkleft)
      get_item(@catalyst.to_s)
      command = "put my #{@catalyst} in my #{@container}"
    when 'begins to transition colors'
      waitrt?
      command = "smell my #{@noun}"
    when 'Applying the final touches'
      finish
    when 'You vigorously rub'
      waitrt?
      stow_item(checkleft)
      get_item('stick')
      mix("mix my #{@container} with my stick")
    when 'You need to be holding the mixing stick first.'
      waitrt?
      stow_item(checkleft)
      get_item('stick')
      mix("mix my #{@container} with my stick")
    when 'That tool does not seem suitable for that task.'
      case bput("analyze my #{@noun}",
                'appears free of defects that would impede further preparation.',
                'composition looks accurate and ready for continued preparation.',
                'smell the mixture',
                'You need to be holding the mixing stick first.',
                'with a sieve',
                'You try to analyze')
      when 'appears free of defects that would impede further preparation.', 'You try to analyze'
        stow_item(checkleft)
        get_item('stick')
        command = "mix my #{@container} with my stick"
      when 'composition looks accurate and ready for continued preparation.'
        stow_item(checkleft)
        get_item('stick')
        command = "mix my #{@container} with my stick"
      when 'smell the mixture'
        command = "smell my #{@noun}"
      when 'You need to be holding the mixing stick first'
        stow_item(checkleft)
        get_item('stick')
        command = "mix my #{@container} with my stick"
      when 'with a sieve'
        stow_item(checkleft)
        get_item('sieve')
        command = "push my #{@noun} with my sieve"
      end
    end
    waitrt?
    mix(command)
  end

  def finish
    waitrt?
    stow_item(checkleft)
    fput("get my #{@noun} from my #{@container}")
    stow_item(checkright)
    #    stow_item(checkleft)
    exit
  end
end

Remedy.new

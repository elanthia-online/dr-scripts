=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#crossing-training
=end

custom_require.call(%w(drinfomon equipmanager events spellmonitor common common-arcana common-crafting common-items common-money common-travel common-summoning))

class CrossingTraining
  include DRC
  include DRCA
  include DRCC
  include DRCI
  include DRCM
  include DRCS
  include DRCT

  attr_reader :running, :idling

  def stop
    @stop = true
  end

  def initialize
    @stop = false
    @running = true
    @idling = false
    arg_definitions = [[]]

    args = parse_args(arg_definitions, true)

    @settings = get_settings(args.flex)
    @athletics_options = get_data('athletics').athletics_options
    @song_list = get_data('perform').perform_options

    @use_research = @settings.use_research(false)
    @settings.outdoor_room ||= 793
    @settings.storage_containers([]).each { |container| fput("open my #{container}") }
    @disciplines_to_skill = {
      'Blacksmithing' => 'Forging',
      'Weaponsmithing' => 'Forging',
      'Armorsmithing' => 'Forging',
      'Tailoring' => 'Outfitting',
      'Shaping' => 'Engineering',
      'Carving' => 'Engineering',
      'Remedies' => 'Alchemy'
    }
    @skills_requiring_movement = @settings.crossing_training_requires_movement(%w(Appraisal Athletics Attunement Empathy Engineering Forging Outfitting Scouting Sorcery Stealth Thievery Theurgy Trading))
    @bad_classes = %w(Thievery Sorcery)
    @bad_classes += ['Arcana'] if DRStats.barbarian?
    @bad_classes += ['Arcana', 'Inner Magic', 'Targeted Magic', 'Life Magic', 'Holy Magic', 'Lunar Magic', 'Elemental Magic', 'Arcane Magic', 'Attunement', 'Utility', 'Augmentation', 'Debilitation', 'Warding'] if DRStats.trader?
    @bad_classes += ['Arcana', 'Targeted Magic', 'Life Magic', 'Holy Magic', 'Lunar Magic', 'Elemental Magic', 'Arcane Magic', 'Attunement', 'Warding'] if DRStats.thief?

    EquipmentManager.instance.refresh(@settings)

    UserVars.crossing_timers ||= {}

    release_cyclics

    Flags.add('ct-spellcast', '^You feel fully prepared to cast your spell\.')
    Flags.add('ct-song', 'you finish playing')
    Flags.add('ct-spell-fail', 'Currently lacking the skill to complete the pattern', 'backfires')
    Flags.add('research-partial', 'there is still more to learn before you arrive at a breakthrough', 'distracted by combat', 'distracted by your spellcasting', 'You lose your focus on your research project', 'you forget what you were')
    Flags.add('research-complete', '^Breakthrough!')
  end

  def main
    walk_to(@settings.safe_room)
    if @settings.waggle_sets['town-training']
      pause 10
      wait_for_script_to_complete('buff', ['town-training'])
    end
    loop do
      event_loop
      if @idling
        pause 30
        @idling = false
      end
      next unless @stop && !@researching
      @running = false
      stop_play
      break
    end
  end

  def empty_trash
    trash_nouns = get_data('items').trash_nouns
    dispose_trash(right_hand) while trash_nouns.any? { |noun| /\b#{noun}/i =~ right_hand }
    dispose_trash(left_hand) while trash_nouns.any? { |noun| /\b#{noun}/i =~ left_hand }
  end

  def event_loop
    empty_trash
    EquipmentManager.instance.empty_hands

    # The next skill to train is the one with the lowest field experience
    skill = @settings.crossing_training([])
                     .select { |s| ready_to_use?(s) }
                     .select { |s| not_research_blocked?(s) }
                     .reject { |s| @settings.crossing_training_stationary_skills_only && @skills_requiring_movement.include?(s) }
                     .min_by { |s| DRSkill.getxp(s) }

    check_tithe

    unless @skills_requiring_movement.include?(skill)
      walk_to(@settings.safe_room)

      # TODO: Your teacher is not here, so you are no longer learning anything.
      check_listening
    end

    check_research

    check_osrel unless @researching

    if skill.nil? || skill.empty? || DRSkill.getxp(skill) >= 28
      if @researching
        echo '***Skills capped and researching***' if UserVars.crossing_trainer_debug
        pause 30
      else
        @idling = true
        echo '***Skills capped, sleeping***' if UserVars.crossing_trainer_debug
        fput 'exit' if @settings.exit_on_skills_capped
        play_song?
      end

      # Output a harmless command to prevent being logged out
      fput 'tdp'
      return
    end

    stop_play unless @researching

    echo "***Attempting to train #{skill}***" if UserVars.crossing_trainer_debug

    update_timer(skill)

    case skill
    when 'Appraisal'
      train_appraisal
    when 'Athletics'
      train_athletics
    when 'Arcana', 'Life Magic', 'Holy Magic', 'Lunar Magic', 'Elemental Magic', 'Arcane Magic'
      do_research skill
    when 'Astrology'
      train_astrology
    when 'Attunement'
      train_attunement
    when 'Augmentation', 'Warding', 'Utility', 'Debilitation'
      train_magic skill
    when 'Empathy'
      train_empathy
    when 'Engineering'
      train_engineering
    when 'First Aid'
      train_first_aid
    when 'Forging'
      train_forging
    when 'Locksmithing'
      train_locksmithing
    when 'Mechanical Lore'
      train_mechanical_lore
    when 'Outdoorsmanship'
      if @settings.mine_for_outdoorsmanship
        train_mining
      else
        train_outdoorsmanship
      end
    when 'Outfitting'
      train_outfitting
    when 'Perception'
      train_outdoorsmanship
    when 'Performance'
      train_performance
    when 'Scholarship'
      train_scholarship
    when 'Scouting'
      train_scouting
    when 'Sorcery'
      train_sorcery
    when 'Stealth'
      train_stealth
    when 'Summoning'
      train_summoning
    when 'Theurgy'
      train_theurgy
    when 'Thievery'
      train_thievery
    when 'Trading'
      train_trading
    when 'Alchemy'
      train_alchemy
    else
      echo "#{skill} not implemented yet"
      pause 15
    end
  end

  def check_tithe
    return unless @settings.tithe
    return if UserVars.tithe_timer && (Time.now - UserVars.tithe_timer) < 4 * 60 * 60

    ensure_copper_on_hand(1000)
    tithe(815, 'box')
    tithe(741, 'almsbox')

    UserVars.tithe_timer = Time.now
  end

  def tithe(room, noun)
    walk_to(room)
    bput("put 5 silver kronar in #{noun}", 'You drop', 'But you do not')
  end

  def train_sorcery
    if DRSkill.getrank('Sorcery') < 50 && @settings.crossing_training_sorcery.nil?
      focus_runestone
    else
      return if @researching

      spell = @settings.crossing_training_sorcery(nil)
      if spell.nil? || spell.empty?
        echo '***UNABLE TO TRAIN SORCERY, REMOVING IT FROM THE TRAINING LIST***'
        @settings.crossing_training([]).delete('Sorcery')
        return
      end

      walk_to @settings.crossing_training_sorcery_room(1137)
      3.times do
        break if DRSkill.getxp('Sorcery') >= 30
        fput "prep #{spell}"
        pause 3
        waitcastrt?
        fput 'cast'
      end
    end
  end

  def focus_runestone
    case bput('get my runestone', 'You get', 'I could not find', 'What were you referring to')
    when 'I could not find', 'What were you referring to'
      echo '***UNABLE TO TRAIN SORCERY, REMOVING IT FROM THE TRAINING LIST***'
      @settings.crossing_training([]).delete('Sorcery')
      return
    end

    until DRSkill.getxp('Sorcery') >= 30
      bput('focus my runestone', 'You focus your magical senses')
      waitrt?
    end
    bput('stow runestone', 'You put your')
  end

  def check_listening
    return unless @settings.listen(false)
    return if listen?(@last_teacher, @bad_classes)
    return if DRRoom.pcs.empty?
    return unless @listen_timer.nil? || Time.now - @listen_timer > 300

    case bput('assess teach', 'is teaching a class', 'No one seems to be teaching', 'You are teaching a class')
    when 'No one seems to be teaching', 'You are teaching a class'
      @listen_timer = Time.now
      @last_teacher = nil
      waitrt?
      return
    else
      @listen_timer = nil
    end
    results = reget(20, 'is teaching a class')
    waitrt?

    classes = results.each_with_object({}) do |line, hash|
      line.match(/(.*) is teaching a class on (.*) which is still open to new students/) do |match|
        teacher = match[1]
        skill = match[2]
        # Some classes match the first format, some have additional text in the 'skill' string that needs to be filtered
        skill.match(/.* \(compared to what you already know\) (.*)/) { |m| skill = m[1] }
        hash[teacher] = skill
      end
    end

    @last_teacher = classes
                    .reject { |t, s| t.nil? || s.nil? }
                    .reject { |_t, s| @bad_classes.include? s }
                    .sort_by { |_t, s| [DRSkill.getxp(s), DRSkill.getrank(s)] }
                    .find { |t, _s| listen?(t, @bad_classes) }
                    .first

    @listen_timer = Time.now unless @last_teacher
  end

  def train_summoning
    summon_weapon
    break_summoned_weapon(right_hand)
    # Use any remaining elemental charge to train Summoning
    fput('pathway focus damage') if DRStats.circle >= 4
  end

  def train_locksmithing
    walk_to(@settings.lockpick_room_id) if @settings.lockpick_room_id
    start_time = Time.now
    wait_for_script_to_complete('pick')
    if Time.now - start_time > 15
      wait_for_script_to_complete('sell-loot')
      walk_to(@settings.safe_room)
    else
      echo '***UNABLE TO TRAIN LOCKSMITHING, REMOVING IT FROM THE TRAINING LIST***'
      @settings.crossing_training([]).delete('Locksmithing')
    end
  end

  def train_theurgy
    wait_for_script_to_complete('theurgy')
  end

  def train_mining
    wait_for_script_to_complete('mining-buddy')
  end

  def train_magic(skill)
    if @settings.train_with_spells(true)
      return if mana < 40
      @use_research && @settings.research_skills([]).include?(skill) ? do_research(skill) : cast_spell(@settings.training_spells({})[skill], skill)
    else
      cast_nonspell(skill)
    end
  end

  def not_research_blocked?(skill)
    return true unless @use_research
    return (['Summoning', 'Attunement', 'Athletics', 'Outdoorsmanship', 'Perception', 'Appraisal', 'Empathy', 'Mechanical Lore', 'Theurgy'] - @settings.research_skills([])).include?(skill) if @researching

    if ['Life Magic', 'Holy Magic', 'Lunar Magic', 'Elemental Magic', 'Arcane Magic', 'Arcana'].include?(skill)
      return @settings.research_skills([]).include?(skill) && DRSkill.getxp(skill) < 18
    elsif %w(Warding Utility Augmentation Attunement).include?(skill)
      return @settings.research_skills([]).include?(skill) && DRSkill.getxp(skill) < 9
    end
    true
  end

  def ready_to_use?(skill)
    return true unless UserVars.crossing_timers[skill]
    (Time.now - UserVars.crossing_timers[skill]) > get_skill_timer(skill)
  end

  def get_skill_timer(skill)
    info = @settings.exp_timers[skill]
    return 14 if info.nil?
    info.is_a?(Hash) ? info['cooldown'] : info.to_i
  end

  def update_timer(skill)
    UserVars.crossing_timers[skill] = Time.now
  end

  def cast_nonspell(skill)
    ability = @settings.training_nonspells({})[skill]
    echo("using ability: #{ability}") if UserVars.crossing_trainer_debug
    if ability.include?('Khri')
      activate_khri?(@settings.kneel_khri, ability)
    else
      fput ability
    end
  end

  def calculate_mana(min, more, discern_data, cyclic)
    total = min + more
    total = (total * @settings.prep_scaling_factor).floor
    discern_data['mana'] = [(total / 4.0).ceil, min].max
    remaining = total - discern_data['mana']
    if remaining > @settings.cambrinth_cap
      discern_data['mana'] = discern_data['mana'] + (remaining - @settings.cambrinth_cap)
      remaining = total - discern_data['mana']
    end
    if cyclic
      discern_data['cambrinth'] = nil
      discern_data['mana'] = discern_data['mana'] + remaining
    elsif remaining > 0
      discern_data['cambrinth'] = []
      step_size = (remaining / 3.0).ceil
      while remaining > 0
        discern_data['cambrinth'] << [remaining, step_size].min
        remaining -= step_size
      end
    else
      discern_data['cambrinth'] = nil
    end
  end

  def check_discern(data)
    UserVars.discerns = {} unless UserVars.discerns
    discern_data = UserVars.discerns[data['abbrev']] || {}
    if data['symbiosis']
      if discern_data.empty? || discern_data['min'].nil?
        /requires at minimum (\d+) mana streams/ =~ bput("discern #{data['abbrev']}", 'requires at minimum \d+ mana streams')
        discern_data['mana'] = Regexp.last_match(1).to_i
        discern_data['cambrinth'] = nil
        discern_data['min'] = Regexp.last_match(1).to_i
        discern_data['more'] = 0
      end
      calculate_mana(discern_data['min'], discern_data['more'], discern_data, false)
    elsif discern_data.empty? || discern_data['time_stamp'].nil? || Time.now - discern_data['time_stamp'] > 24 * 60 * 60 || !discern_data['more'].nil?
      discern_data['time_stamp'] = Time.now
      case discern = bput("discern #{data['abbrev']}", 'The spell requires at minimum \d+ mana streams and you think you can reinforce it with \d+ more', 'You don\'t think you are able to cast this spell', 'You have no idea how to cast that spell')
      when /you don't think you are able/i, 'You have no idea how to cast that spell'
        discern_data['mana'] = 1
        discern_data['cambrinth'] = nil
      else
        discern =~ /minimum (\d+) mana streams and you think you can reinforce it with (\d+) more/i
        calculate_mana(Regexp.last_match(1).to_i, Regexp.last_match(2).to_i, discern_data, data['cyclic'])
      end
    end
    pause 1
    waitrt?
    UserVars.discerns[data['abbrev']] = discern_data
    data['mana'] = discern_data['mana']
    data['cambrinth'] = discern_data['cambrinth']
  end

  def check_osrel
    return unless @settings.osrel_amount && DRSpells.active_spells['Osrel Meraud']
    return if @last_check_osrel && @last_check_osrel + 120 > Time.now
    @last_check_osrel = Time.now
    infuse_om(!@settings.osrel_no_harness, @settings.osrel_amount)
  end

  def research
    if @settings.cyclic_research_skills
      research_skill_cyclic = @settings.cyclic_research_skills([])
                                       .min_by { |s| DRSkill.getxp(s) }
      cyclic_research(research_skill_cyclic)
    end
    if 'You cannot begin' == bput("research #{@researching} 300", 'You focus', 'You tentatively', 'You confidently', 'Abandoning the normal', 'You cannot begin')
      fput('research cancel')
      fput('research cancel')
      research
    end
  end

  def cyclic_research(research_skill_cyclic)
    cast_spell(@settings.research_training_spells({})[research_skill_cyclic], research_skill_cyclic)
  end

  def check_research
    return unless @researching
    if Flags['research-partial']
      Flags.reset('research-partial')
      check_osrel
      research
    elsif Flags['research-complete']
      Flags.reset('research-complete')
      @researching = nil
    end
  end

  def do_research(skill)
    unless @use_research
      echo "Tried to use spell research to train #{skill} with it disabled, please correct YAML."
      return
    end

    return if @stop

    Flags.reset('research-partial')
    Flags.reset('research-complete')

    until DRSpells.active_spells['Gauge Flow'] > 20
      cast_spell({ 'abbrev' => 'GAF' }, nil)
      pause 2
    end
    @researching = case skill
                   when 'Arcana', 'Life Magic', 'Holy Magic', 'Lunar Magic', 'Elemental Magic', 'Arcane Magic'
                     'FUNDAMENTAL'
                   when 'Attunement'
                     'STREAM'
                   else
                     skill.upcase
                   end
    research
  end

  def cast_spell(data, skill)
    Flags.reset('ct-spellcast')
    check_discern(data)
    if data['abbrev'] =~ /^comp/i
      walk_to 991
      return unless DRRoom.npcs.empty?
      fput(['\'Had this been a real compost your belongings would be gone. Composting soon', '\'Compost', '\'Compost incoming', '\'This is a code green, compost alert', '\'Pick up your valuables, compost time', '\'If it\'s on the ground it\'s gone, Compost incoming'].sample)
    end

    if (data['abbrev'] =~ /locat/i) && !DRSpells.active_spells['Clear Vision']
      fput('prep cv')
      pause 5
      fput('cast')
    end

    if data['moon']
      # Look for a moon that will be up for the next few minutes
      unless moon = UserVars.moons.find { |moon_name, moon_data| UserVars.moons['visible'].include?(moon_name) && moon_data['timer'] >= 4 }.first
        echo "No moon available to cast #{data['abbrev']}"
        unless Script.running? 'moonwatch'
          echo 'moonwatch is not running. Starting it now'
          custom_require.call('moonwatch')
          echo "Run `;e autostart('moonwatch')` to avoid this in the future"
        end

        weather = bput('weather', 'inside', 'You glance up at the sky.')
        walk_to @settings.outdoor_room if weather =~ /inside/
        fput('perceive moons')

        # Look for a moon that will be up for the next few minutes
        unless moon = UserVars.moons.find { |moon_name, moon_data| UserVars.moons['visible'].include?(moon_name) && moon_data['timer'] >= 4 }.first
          echo "Couldn't find any moons to cast #{data['abbrev']} with"
          return
        end
      end
      data['cast'] = "cast #{moon}"
    end

    release_cyclics if data['cyclic']

    bput('prep symb', 'You recall the exact details of the', 'But you\'ve already prepared') if data['symbiosis']
    scaled_prep_mana = data['mana']
    if /Something in the area interferes/ =~ prepare(data['abbrev'], scaled_prep_mana)
      fput('rel symb') if data['symbiosis']
      return
    end

    find_charge_invoke_stow(@settings.cambrinth, @settings.stored_cambrinth, @settings.cambrinth_cap, data['cambrinth'])

    pause 0.5 until Flags['ct-spellcast']

    snapshot = DRSkill.getxp(skill) if data['symbiosis']

    Flags.reset('ct-spell-fail')

    while DRSpells.prep_spell
      data['before'].each { |action| bput(action['message'], action['matches']) }
      fput(data['cast'] || 'cast')
      data['after'].each { |action| bput(action['message'], action['matches']) }
    end

    return unless data['symbiosis']

    start = Time.now
    pause 0.5 until snapshot != DRSkill.getxp(skill) || Time.now - start > 10 || Flags['ct-spell-fail']
    if Flags['ct-spell-fail']
      fput('rel symb')
      UserVars.discerns[data['abbrev']]['more'] = [UserVars.discerns[data['abbrev']]['more'] - 1, 0].max
    elsif DRSkill.getxp(skill) - snapshot <= 1
      UserVars.discerns[data['abbrev']]['more'] = UserVars.discerns[data['abbrev']]['more'] + 1
    end
  end

  def braid_to_fail(item)
    return if left_hand || right_hand
    return unless forage?(item)
    loop do
      waitrt?
      check_research
      case bput("braid my #{item}", 'You Need to have more', 'Roundtime', 'You need both hands to do that', 'You can\'t braid the .* into your braided')
      when 'Roundtime'
        rt = reget(10, 'Roundtime').last.scan(/\d+/).first.to_i
        break if rt >= 8 || DRSkill.getxp('Mechanical Lore') >= 30
      when 'You need both hands to do that', /into your braided/
        waitrt?
        empty_trash
        return
      else
        break unless forage?(item)
      end
    end
    pause 1
    waitrt?
    bput("pull my #{item}", 'You tug and pull')
    pause 1
    waitrt?
    empty_trash
  end

  def train_performance
    unless play_song?(true)
      echo '***UNABLE TO TRAIN PERFORMANCE, REMOVING IT FROM THE TRAINING LIST***'
      @settings.crossing_training([]).delete('Performance')
      return
    end
  end

  def train_outdoorsmanship
    if DRSkill.getrank('Outdoorsmanship') < 30
      forage?('rock')
      dispose_trash 'rock'
    else
      item = if @settings.forage_item
               @settings.forage_item
             else
               'rock'
             end
      bput("collect #{item}", 'You manage to collect', 'The room is too cluttered to find anything here')
      waitrt?
      kick_pile? unless kick_pile?("#{item}s")
    end
  end

  def train_first_aid
    play_song?
    bput('get my compendium', 'You get')
    start_text = bput('look my compendium', '^The compendium lies open to the section on .* physiology')
    start_text =~ /^The compendium lies open to the section on (.*) physiology/i
    start = Regexp.last_match(1)
    attempts = 0
    loop do
      study = bput('study my compendium', 'you begin to study', 'you begin studying', 'With a sudden moment of', 'In a sudden moment of clarity', '^Why ', 'you continue to study', 'you attempt', 'you continue studying')
      waitrt?
      attempts += 1
      next if study =~ /^you attempt/i && attempts < 2
      attempts = 0
      match_text = bput 'turn my compendium', '^You turn to the section containing (.*) physiology'
      match_text =~ /^You turn to the section containing (.*) physiology/i
      match = Regexp.last_match(1)
      break if start == match || DRSkill.getxp('First Aid') >= 30
    end
    EquipmentManager.instance.empty_hands
  end

  def train_scholarship
    play_song?

    case bput('get my black book', 'What were you', 'You get')
    when 'What were you'
      echo '***UNABLE TO TRAIN SCHOLARSHIP, REMOVING IT FROM THE TRAINING LIST***'
      @settings.crossing_training([]).delete('Scholarship')
      return
    end

    fput('turn my book to chapter 6')
    14.times do |count|
      bput("turn my book to page #{count + 1}", 'You turn your book to page', 'You are already on')
      bput('study my book', 'roundtime')
      waitrt?
    end
    fput 'stow my book'
  end

  def train_mechanical_lore
    EquipmentManager.instance.empty_hands
    fput "remove #{@settings.hand_armor}"
    fput "stow #{@settings.hand_armor}"
    pause 1
    if @settings.braid_item
      braid_to_fail(@settings.braid_item)
    else
      braid_to_fail(DRSkill.getrank('Outdoorsmanship') < 110 ? 'grass' : 'vine')
    end
    EquipmentManager.instance.empty_hands
    fput "get my #{@settings.hand_armor}"
    fput "wear my #{@settings.hand_armor}"
  end

  def climb?(room, targets)
    targets.each do |target|
      walk_to(room)
      return true if DRRoom.npcs.length >= 3

      fput "climb #{target}"
      pause
      waitrt?
      return false if DRSkill.getxp('Athletics') >= 30
    end
    true
  end

  def train_athletics
    if DRSkill.getrank('Athletics') >= 400
      return if @researching
      climb_branch
    else
      play_song?
      @athletics_options.each do |data|
        check_research
        break unless climb?(data['room'], data['targets'])
      end
    end
  end

  def practice_branch
    while DRSkill.getxp('Athletics') < 29
      check_osrel unless @researching
      check_research
      loop do
        break if hide?
      end
      bput('climb practice branch', 'You begin to practice ')
      Flags.add('ct-climbing', 'You finish practicing')
      loop do
        pause 1
        break if Flags['ct-climbing']
        if DRSkill.getxp('Athletics') > 28
          fput('stop climb')
          break
        end
      end
    end
  end

  def climb_branch
    walk_to(19_074)
    check_research
    if DRSkill.getxp('Athletics') < 29
      walk_to(2245)
      if UserVars.athletics < 540
        practice_branch
      else
        walk_to(19_464)
        while DRSkill.getxp('Athletics') < 29
          walk_to(2245)
          walk_to(19_464)
          check_osrel unless @researching
          check_research
          break if DRSkill.getxp('Athletics') >= 29
          train_outdoorsmanship
          train_outdoorsmanship
          train_outdoorsmanship
          train_outdoorsmanship
        end
      end
    end
    check_osrel unless @researching
    check_research
    walk_to(1894)
  end

  def train_empathy
    [8266, 850, 7902, 19_077, 815, 793, 8265, 4652, 19_093, 19_078].each do |room_id|
      walk_to(room_id)
      until 'You sense:' == bput('perceive health', 'You fail to sense', 'You sense:', 'You\'re not ready to do that again, yet')
        pause 1
        rt = waitrt?
        pause 5 if rt.nil? || rt.zero?
        check_research
      end
      waitrt?
      break if DRSkill.getxp('Empathy') >= 30
    end
  end

  def train_scouting
    wait_for_script_to_complete('scouting')
  end

  def train_attunement
    if @use_research && @settings.research_skills([]).include?('Attunement')
      do_research('Attunement')
      return
    end

    if DRStats.moon_mage?
      fput('perc mana')
      pause 15
      waitrt?
      return
    end

    room_list = if @settings.crossing_training_stationary_skills_only
                  [Room.current.id.to_i]
                else
                  %w(815 814 802 800 799 801 817 818 816 761 757 756 748 747 746 729)
                end

    start_timer = Time.now
    room_list.each do |roomid|
      walk_to roomid
      bput('perc', 'You reach out')
      waitrt?
      break if DRSkill.getxp('Attunement') >= 30 || start_timer - Time.now > 90
    end
  end

  def hide_in(room_number)
    walk_to room_number
    hide?
    fput 'unhide'
    waitrt?
  end

  def train_stealth
    hide_in 851
    hide_in 850
    hide_in 764
    hide_in 5992
    hide_in 992
  end

  def train_thievery
    stop_play if @settings.hide_to_steal

    wait_for_script_to_complete('steal')
  end

  def train_appraisal
    return if @researching

    wait_for_script_to_complete('appraisal')
  end

  def train_astrology
    wait_for_script_to_complete('astrology')
  end

  def train_outfitting
    if @settings.train_workorders([]).include?('Tailoring')
      return unless money_for_training?(5000, 'Outfitting')
      wait_for_script_to_complete('workorders', ['Tailoring'])
      wait_for_script_to_complete('sell-loot')
      walk_to(@settings.safe_room)
      return
    end

    rank = DRSkill.getrank('Outfitting')
    if rank <= 25 # Tier 1  Extremely Easy
      sew(5, 'knitted socks', 'socks')
    elsif rank <= 50 # Tier 2 Very Easy
      sew(5, 'knitted mittens', 'mittens')
    elsif rank <= 100 # Tier 3  Easy
      sew(5, 'knitted hat', 'hat')
    elsif rank <= 175 # Tier 4  Simple
      sew(5, 'knitted gloves', 'gloves')
    elsif rank <= 300 # Tier 5  Basic
      sew(5, 'knitted hose', 'hose')
    elsif rank <= 425 # Tier 6  Somewhat Challenging
      sew(5, 'knitted cloak', 'cloak')
    elsif rank <= 650 # Tier 7  Challenging
      sew(5, 'knitted blanket', 'blanket')
    else # Tier 12  Extremely Difficult
      echo('*** NOT YET IMPLEMENTED ***')
    end
  end

  def train_engineering
    return unless money_for_training?(5000, 'Engineering')
    wait_for_script_to_complete('workorders', ['Shaping'])
    wait_for_script_to_complete('sell-loot')
    walk_to(@settings.safe_room)
  end

  def train_trading
    disciplines = @settings.work_order_disciplines

    if @settings.sell_pouches_for_trading && DRSkill.getxp('Trading') < 5 && 'You get a' == bput("get pouch from my #{@settings.sale_pouches_container}", 'You get a', 'What were you')
      gemshop = get_data('towns')[@settings.hometown]['gemshop']['id']
      walk_to gemshop
      fput('spec finesse')
      fput('sell pouch')
      fput('put pouch in bucket')
      wait_for_script_to_complete('sell-loot')
      return
    end

    unless disciplines
      beep
      echo('SELECT DISCIPLINES FOR TRADING TRAINING WITH work_order_disciplines:')
      beep
      pause 5
      return
    end

    discipline = disciplines.min_by { |s| DRSkill.getxp(@disciplines_to_skill[s]) }

    return unless money_for_training?(5000, 'Trading')
    wait_for_script_to_complete('workorders', [discipline])
    wait_for_script_to_complete('sell-loot')
    walk_to(@settings.safe_room)
  end

  # https://elanthipedia.play.net/Blacksmithing_Products
  def train_forging
    if @settings.train_workorders([]).include?('Blacksmithing')
      return unless money_for_training?(5000, 'Forging')
      wait_for_script_to_complete('workorders', ['Blacksmithing'])
      wait_for_script_to_complete('sell-loot')
      walk_to(@settings.safe_room)
      return
    end

    rank = DRSkill.getrank('Forging')
    if rank <= 25 # Tier 1 - Extremely Easy
      smith('a shallow metal cup')
    elsif rank <= 50 # Tier 2 - Very Easy
      smith('a short metal mug')
    elsif rank <= 100 # Tier 3 - Easy
      smith('a back scratcher')
    elsif rank <= 175 # Tier 4 - Simple
      smith('a metal ankle band')
    elsif rank <= 300 # Tier 5 - Basic
      smith('a metal lockpick ring')
    elsif rank <= 425 # Tier 6 - Somewhat Challenging
      smith('a metal armband')
    elsif rank <= 550 # Tier 7 - Challenging
      smith('some metal clippers')
    elsif rank <= 700 # Tier 8 - Complicated
      echo('*** NOT YET IMPLEMENTED ***')
      # Journeyman book: triangular wire sieve, bent <metal> scissors, knobby sewing needles, squat knitting needles, narrow <metal> awl
    elsif rank <= 850 # Tier 9 - Intricate
      echo('*** NOT YET IMPLEMENTED ***')
      # Master book: beveled wood shaper, serrated hide scraper, compact <metal> awl, compact <metal> awl, round pestle
    elsif rank <= 1175 # Tier 10 - Difficult
      echo('*** NOT YET IMPLEMENTED ***')
      # Master book: slender <metal> awl, serrated scissors, grooved pestle, oblong wire sieve
    elsif rank <= 1400 # Tier 11 - Very Difficult
      echo('*** NOT YET IMPLEMENTED ***')
      # Master book: jagged wood shaper, thin sewing needles
    else # Tier 12 - Extremely Difficult
      echo('*** NOT YET IMPLEMENTED ***')
      # Master book: trapezoidal wire sieve
    end
  end

  # https://elanthipedia.play.net/Remedies_products
  def train_alchemy
    if @settings.train_workorders([]).include?('Remedies')
      return unless money_for_training?(5000, 'Alchemy')
      wait_for_script_to_complete('workorders', ['Remedies'])
      wait_for_script_to_complete('sell-loot')
      walk_to(@settings.safe_room)
      return
    end

    rank = DRSkill.getrank('Alchemy')
    if rank <= 25 # Tier 1 - Extremely Easy
      # remedy('')
      beep
      echo('*** NOT YET IMPLEMENTED ***')
    end
  end

  def money_for_training?(amount, skill)
    if ensure_copper_on_hand(amount)
      true
    else
      echo("Low on funds, removing #{skill} from training")
      @settings.crossing_training([]).delete(skill)
      false
    end
  end

  def sew(chapter, unique_name, item)
    buy_yarn

    walk_to(@settings.safe_room)
    check_listening

    wait_for_script_to_complete('sew', ['trash', 'knitting', chapter, unique_name, item])

    fput('get my wool yarn')
    dispose_trash('yarn')
  end

  def smith(full_name)
    wait_for_script_to_complete('smith', ['bronze', full_name, 'buy'])
    dispose_trash(right_hand)
    dispose_trash(left_hand)
  end

  def buy_yarn
    return unless money_for_training?(700, 'Outfitting')
    order_item(16_667, 13)
    fput('stow my yarn')
  end

  def stop_play
    return unless @did_play
    return if @no_instrument
    @did_play = false
    bput('stop play', 'You stop playing your song', 'In the name of', "But you're not performing")
    Flags['ct-song'] = true
  end

  def play_song?(blocking = false)
    return true if @researching
    return false if @no_instrument
    return true if DRSkill.getxp('Performance') >= 28

    UserVars.song = @song_list.first.first unless UserVars.song
    @did_play = true
    case bput("play #{UserVars.song}", 'dirtiness may affect your performance', 'slightest hint of difficulty', 'You begin a', 'You struggle to begin', 'You\'re already playing a song', 'You effortlessly begin', 'You begin some', 'You cannot play', 'Play on what instrument', 'now isn\'t the best time to be playing', 'Perhaps you should find somewhere drier before trying to play')
    when 'Play on what instrument'
      @no_instrument = true
      return false
    when 'now isn\'t the best time to be playing', 'Perhaps you should find somewhere drier before trying to play'
      return true
    when 'You cannot play'
      wait_for_script_to_complete('safe-room')
    when 'dirtiness may affect your performance'
      if DRSkill.getrank('Performance') < 20
        echo "Skipping cleaning of zills due to low rank of Performance: #{DRSkill.getrank('Performance')}" if UserVars.crossing_trainer_debug
        return true
      end
      stop_play
      clean_zills
      return play_song?
    when 'You begin a', 'You effortlessly begin', 'You begin some'
      stop_play
      UserVars.song = @song_list[UserVars.song] || @song_list.first.first
      return play_song?
    when 'You struggle to begin'
      if UserVars.song != @song_list.first.first
        stop_play
        UserVars.song = @song_list.first.first
        return play_song?
      end
    end

    return true unless blocking

    Flags.reset('ct-song')
    pause 1 until Flags['ct-song']
    true
  end

  def clean_zills
    cloth = @settings.cleaning_cloth
    bput('remove my zills', 'You slide')
    bput("get my #{cloth}", 'You get')

    loop do
      case bput("wipe my zills with my #{cloth}", 'Roundtime', 'not in need of drying', 'You should be sitting up')
      when 'not in need of drying'
        break
      when 'You should be sitting up'
        fix_standing
        next
      end
      pause 1
      waitrt?

      until /you wring a dry/i =~ bput("wring my #{cloth}", 'You wring a dry', 'You wring out')
        pause 1
        waitrt?
      end
    end

    until /not in need of cleaning/i =~ bput("clean my zills with my #{cloth}", 'Roundtime', 'not in need of cleaning')
      pause 1
      waitrt?
    end

    bput('wear my zills', 'You slide')
    bput("stow my #{cloth}", 'You put')
  end
end

# Call this last to avoid the need for forward declarations
$CROSSING_TRAINER = CrossingTraining.new
$CROSSING_TRAINER.main

=begin
  Documentation: https://elanthipedia.play.net/mediawiki/index.php/Lich_script_development#crossing-repair
=end

custom_require.call(%w(common common-money common-travel drinfomon equipmanager))

class CrossingRepair
  include DRC
  include DRCM
  include DRCT

  def initialize
    setup

    ensure_copper_on_hand(@settings.repair_withdrawal_amount(10_000))

    @repair_info.each do |repairer, info|
      echo "Repairing at #{repairer}" if UserVars.crossing_repair_debug
      repair_at(repairer, info['room'], info['items'])
    end

    while tickets_left?
    end
  end

  def repair(repairer, item, failed = false)
    if failed
      fput('swap') unless checkright
      command = "give #{repairer}"
    else
      return unless EquipmentManager.instance.get_item?(item)
      command = "give my #{item.short_name} to #{repairer}"
    end

    case bput(command, "There isn't a scratch on that", "I don't work on those here", 'Just give it to me again', "You don't need to specify the object")
    when "There isn't a scratch on that"
      EquipmentManager.instance.empty_hands
    when "I don't work on those here"
      echo "*** ITEM HAS IMPROPER is_leather FLAG: #{item.short_name} ***"
      EquipmentManager.instance.empty_hands
    when "You don't need to specify the object"
      repair(repairer, item, true)
    else
      fput "give my #{item.short_name} to #{repairer}"
      fput 'stow my ticket'
    end
  end

  def tickets_left?
    result = bput('look at my ticket', "won't be ready for another", 'should be ready any moment now', 'Looking at the (.*) ticket .* should be ready by now', 'I could not find what you were referring to')

    case result
    when "won't be ready for another", 'should be ready any moment now'
      echo '***Item not ready yet. Sleeping for 30 seconds.***'
      pause 30
    when 'I could not find what you were referring to'
      return false
    else
      repairer = result.match(/Looking at the (.*) ticket/).to_a[1]
      walk_to @repair_info[repairer]['room']
      fput 'get my ticket'
      turn_in_ticket(repairer)
      EquipmentManager.instance.empty_hands
    end

    true
  end

  def turn_in_ticket(repairer, failed = false)
    if failed
      fput('swap') unless checkright
      command = "give #{repairer}"
    else
      command = "give my ticket to #{repairer}"
    end

    case bput(command, 'You hand', "You don't need to specify the object")
    when "You don't need to specify the object"
      turn_in_ticket(repairer, true)
    end
  end

  def repair_at(repairer, target_room, items)
    return if items.nil? || items.empty?
    walk_to target_room

    items.each { |item| repair(repairer, item) }
  end

  def setup
    @settings = get_settings
    EquipmentManager.instance.refresh
    EquipmentManager.instance.wear_equipment_set?('standard')

    @repair_info = {
      # forging tool repair: clerk, 8776
      # outfitting tool repair: clerk, 16659
      'Catrox' => { 'room' => 19_093, 'items' => EquipmentManager.instance.items.reject(&:leather) },
      'Randal' => { 'room' => 1544, 'items' => EquipmentManager.instance.items.select(&:leather) }
    }
  end
end

CrossingRepair.new

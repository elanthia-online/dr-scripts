=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#crossing-repair
=end

custom_require.call(%w(common common-money common-travel drinfomon equipmanager))

class CrossingRepair
  include DRC
  include DRCM
  include DRCT

  def initialize
    setup

    @repair_info.each do |repairer, items|
      echo "Repairing at #{repairer}" if UserVars.crossing_repair_debug
      repair_at(repairer['name'], repairer['id'], items)
    end

    while tickets_left?
    end
  end

  def repair(repairer, item, failed = false)
    if failed
      fput('swap') unless right_hand
      command = "give #{repairer}"
    else
      return unless EquipmentManager.instance.get_item?(item)
      command = "give my #{item.short_name} to #{repairer}"
    end

    case bput(command, "There isn't a scratch on that", "I don't work on those here", 'Just give it to me again', "You don't need to specify the object", "I will not repair something that isn't broken")
    when "There isn't a scratch on that", "I will not repair something that isn't broken"
      EquipmentManager.instance.empty_hands
    when "I don't work on those here"
      echo "*** ITEM HAS IMPROPER is_leather FLAG: #{item.short_name} ***"
      EquipmentManager.instance.empty_hands
    when "You don't need to specify the object"
      repair(repairer, item, true)
    else
      fput "give my #{item.short_name} to #{repairer}"
      fput 'stow my ticket'
    end
  end

  def tickets_left?
    result = bput('look at my ticket', "won't be ready for another", 'should be ready any moment now', 'Looking at the (.*) ticket .* should be ready by now', 'I could not find what you were referring to')

    case result
    when "won't be ready for another", 'should be ready any moment now'
      echo '***Item not ready yet. Sleeping for 30 seconds.***'
      pause 30
    when 'I could not find what you were referring to'
      return false
    else
      name = result.match(/Looking at the (.*) ticket/).to_a[1]
      room = @repair_info.keys.find { |repairer| repairer['name'].casecmp(name).zero? }['id']
      walk_to(room)
      fput 'get my ticket'
      turn_in_ticket(name)
      EquipmentManager.instance.empty_hands
    end

    true
  end

  def turn_in_ticket(repairer, failed = false)
    if failed
      fput('swap') unless right_hand
      command = "give #{repairer}"
    else
      command = "give my ticket to #{repairer}"
    end

    case bput(command, 'You hand', "You don't need to specify the object")
    when "You don't need to specify the object"
      turn_in_ticket(repairer, true)
    end
  end

  def repair_at(repairer, target_room, items)
    return if items.nil? || items.empty?
    walk_to target_room

    items.each { |item| repair(repairer, item) }
  end

  def setup
    EquipmentManager.instance.refresh
    EquipmentManager.instance.wear_equipment_set?('standard')

    settings = get_settings
    @repair_withdrawal_amount = settings.repair_withdrawal_amount
    hometown = get_data('town')[settings.hometown]

    ensure_copper_on_hand(@repair_withdrawal_amount, settings.hometown)

    @repair_info = {
      hometown['metal_repair'] => EquipmentManager.instance.items.reject(&:leather),
      hometown['leather_repair'] => EquipmentManager.instance.items.select(&:leather)
    }
  end
end

CrossingRepair.new

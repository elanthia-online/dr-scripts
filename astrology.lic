=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#astrology
=end

custom_require.call(%w(common common-arcana drinfomon spellmonitor))

class Astrology
  include DRC
  include DRCA

  def initialize
    settings = get_settings
    @constellations = get_data('constellations').constellations
    @have_telescope = settings.have_telescope

    do_buffs(settings)

    train_astrology
  end

  def do_buffs(settings)
    settings.astrology_buffs['spells'].each do |spell|
      echo "Buffing: #{spell}" if UserVars.astrology_debug
      buff(spell, settings)
    end
  end

  def visible_bodies
    result = []
    all_bodies = @constellations
    bput('observe sky', 'The following heavenly bodies are visible:')
    until (line = get?) =~ /^Roundtime/i
      result << all_bodies.find { |body| /\b#{body['name']}\b/i =~ line && line !~ /below the horizon/ }
    end
    result.compact.select { |data| data['circle'] <= DRStats.circle }
  end

  def train_astrology
    fput('predict weather')
    waitrt?

    vis_bodies = visible_bodies

    night = vis_bodies.find { |body| body['constellation'] }

    best_eye_data = vis_bodies
                    .select { |data| @have_telescope || !data['telescope'] }
                    .max_by { |data| [data['pools'].values.compact.size, data['circle']] }

    echo(best_eye_data) if UserVars.astrology_debug

    waitrt?

    Flags.add('bad-search', 'is foiled by the daylight', 'turns up fruitless')

    observed = if @have_telescope
                 bput('get telescope', 'you get', 'You are already')
                 things_to_try = @constellations.select do |data|
                   data['telescope'] &&
                     data['circle'] <= DRStats.circle &&
                     data['circle'] > best_eye_data['circle'] &&
                     (night || !data['constellation']) &&
                     data['pools'].values.compact.size > best_eye_data['pools'].values.compact.size
                 end

                 things_to_try << best_eye_data

                 things_to_try.sort! { |data| data['circle'] }.reverse!

                 echo(things_to_try) if UserVars.astrology_debug

                 things_to_try.find do |data|
                   bput("center telescope on #{data['name']}", 'You put your eye')
                   result = nil
                   until ['Roundtime', 'You peer aimlessly through your telescope'].include?(result)
                     if Flags['bad-search']
                       train_astrology
                       return
                     end
                     result = bput('peer telescope', 'You peer aimlessly through your telescope', 'You see nothing regarding the future', 'Roundtime')
                   end
                   result == 'Roundtime'
                 end
               else
                 until ['Roundtime', 'Clouds obscure'].include? bput("observe #{best_eye_data['name']} in sky", 'Your search for', 'You see nothing regarding the future', 'Clouds obscure', 'Roundtime')
                   if Flags['bad-search']
                     train_astrology
                     return
                   end
                 end
                 best_eye_data
               end
    pause 2
    waitrt?

    bput('stow telescope', 'you put') if @have_telescope

    observed['pools']
      .reject { |_skill, value| value.nil? }
      .each { |skill, _value| align(skill) }
    bput('predict anal', 'roundtime')
    waitrt?
  end

  def align(skill)
    bput("align #{skill}", 'You focus internally')
    waitrt?
    bput('predict future', 'roundtime')
    waitrt?
    pause 0.5 while stunned?
    fix_standing
  end
end

# Call this last to avoid the need for forward declarations
Astrology.new

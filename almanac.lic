=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#almanac
=end

custom_require.call(%w[common common-items])

class Almanac

  def initialize
    settings = get_settings
    UserVars.almanac_last_use ||= Time.now - 600
    @no_use_scripts = settings.almanac_no_use_scripts
    @no_use_rooms = settings.almanac_no_use_rooms
    @almanac_skills = settings.almanac_skills
    @almanac = settings.almanac_noun
    @priority_skills = settings.almanac_priority_skills

    startup_delay = settings.almanac_startup_delay

    pause startup_delay
    passive_loop
  end

  def passive_loop
    loop do
      use_almanac unless should_not_use_almanac?
      pause
    end
  end

  def almanac_sort_by_rate_then_rank(skills)
    skills
          .select { |skill| DRSkill.getxp(skill) < 18 }
          .sort_by { |skill| [DRSkill.getxp(skill), DRSkill.getrank(skill)] }.first
  end

  def use_almanac
    unless @almanac_skills.empty?
      unless almanac_sort_by_rate_then_rank(@priority_skills)
        training_skill = almanac_sort_by_rate_then_rank(@almanac_skills)
      else
        training_skill = almanac_sort_by_rate_then_rank(@priority_skills)
      end
      return unless training_skill
    end

    # Pause scripts to prevent interference
    until scripts_to_unpause = DRC.safe_pause_list
      echo("Cannot pause, trying again in 30 seconds.")
      pause 30
    end

    waitrt?

    # Wait for any last output from paused scripts to resolve
    # to mitigate things like combat-trainer doing `loot treasure`
    # and getting a "I could not find what you were referring to" response
    # (because no critter to loot) before the response to "get my almanac".
    # In that race condition, we think we didn't get your almanac and
    # the script exits, but that leaves you with an almanac in your hand
    # and can cause combat-trainer to hang if it's trying to use a twohanded weapon.
    pause 1
    clear

    unless DRCI.get_item_if_not_held?(@almanac) && DRCI.in_hands?(@almanac)
      if DRCI.exists?(@almanac)
        DRC.message('Hands full, will try again later')
        DRC.safe_unpause_list(scripts_to_unpause)
        return
      else
        DRC.message('Almanac not found, exiting')
        DRC.safe_unpause_list(scripts_to_unpause)
        exit
      end
    end

    if training_skill
      DRC.bput("turn #{@almanac} to #{training_skill}", 'You turn', 'You attempt to turn')
    end

    study_almanac

    DRCI.put_away_item?(@almanac)

    DRC.safe_unpause_list(scripts_to_unpause)
  end

  def study_almanac
    case DRC.bput("study my #{@almanac}", /You believe you've learned something significant/, /^You've gleaned all the insight you can/, /^Study what/, 'interrupt your research', /^The pages of the .* seem worn/, /is only usable by a character with a Premium subscription/, /STUDY its contents\./)
    when /^You've gleaned all the insight you can/, /^The pages of the .* seem worn/
      UserVars.almanac_last_use = Time.now - 540
    when /You believe you've learned something significant/
      UserVars.almanac_last_use = Time.now
    when /is only usable by a character with a Premium subscription/
      DRC.message("Premium almanac detected in a non-premium account.")
      DRC.message("Exiting")
      DRCI.put_away_item?(@almanac)
      exit
    when /STUDY its contents\./
      DRC.bput("open my #{@almanac}", /^You open/)
      study_almanac
    end
      waitrt?
  end

  def should_not_use_almanac?
    (hidden? || invisible? || almanac_on_cooldown? || hands_full? || running_no_use_scripts? || inside_no_use_room?)
  end

  def running_no_use_scripts?
    @no_use_scripts.any? { |name| Script.running?(name) }
  end

  def inside_no_use_room?
    @no_use_rooms.any? { |room| room === DRRoom.title.to_s()[2..-3] || room == Room.current.id }
  end

  def almanac_on_cooldown?
    (Time.now - UserVars.almanac_last_use.to_i).to_i < 600
  end

  def hands_full?
    DRC.left_hand && DRC.right_hand && !DRCI.in_hands?(@almanac)
  end

end

Almanac.new

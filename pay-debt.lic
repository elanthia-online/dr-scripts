=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#pay-debt
=end

custom_require.call(%w[common common-money common-travel events])

class PayDebt
  include DRC
  include DRCM
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'sack', regex: /sack/i, optional: true, description: 'Retrieve your sack of items from the guards' },
        { name: 'province', options: %w[therengia zoluren ilithi qi forf], optional: true, description: 'Choose a province to pay your debt in' }
      ]
    ]

    args = parse_args(arg_definitions)

    Flags.add('debt-collector', 'With a resigned sigh, you hand your coins to the collector.', 'A town official approaches you.')
    @settings = get_settings
    town_data = get_data('town')

    forf = { town_data['Hibarnhvidar']['debt_office']['id'] => 'Hibarnhvidar', town_data['Boar Clan']['debt_office']['id'] => 'Boar Clan' }
    ilithi = { town_data['Shard']['debt_office']['id'] => 'Shard' }
    qi = { town_data['Aesry']['debt_office']['id'] => 'Aesry', town_data["Mer'Kresh"]['debt_office']['id'] => "Mer'Kresh", town_data['Ratha']['debt_office']['id'] => 'Ratha' }
    therengia = { town_data['Therenborough']['debt_office']['id'] => 'Therenborough', town_data['Langenfirth']['debt_office']['id'] => 'Langenfirth', town_data['Riverhaven']['debt_office']['id'] => 'Riverhaven', town_data["Muspar'i"]['debt_office']['id'] => "Muspar'i" }
    zoluren = { town_data['Crossing']['debt_office']['id'] => 'Crossing', town_data['Leth Deriel']['debt_office']['id'] => 'Leth Deriel' }

    province_to_town = {
      'forf' => forf[Room.current.find_nearest(forf.keys)],
      'ilithi' => ilithi[Room.current.find_nearest(ilithi.keys)],
      'qi' => qi[Room.current.find_nearest(qi.keys)],
      'therengia' => therengia[Room.current.find_nearest(therengia.keys)],
      'zoluren' => zoluren[Room.current.find_nearest(zoluren.keys)]
    }

    @hometown_info = town_data[@settings.hometown]
    debt_town_name = if args.province
                       province_to_town[args.province]
                     else
                       @settings.hometown
                     end
    @debt_town_info = town_data[debt_town_name]
    @hometown_currency = town_data[@settings.hometown]['currency']
    @debt_currency = @debt_town_info['currency']

    pay_debt(debt_town_name)

    return unless args.sack
    walk_to(@debt_town_info['guard_house']['id'])
    bput("get #{checkname} sack", 'you reach for your sack')
  end

  def pay_debt(debt_town)
    debt_amount = debt(debt_town)

    return if debt_amount < 1

    if @hometown_currency != @debt_currency
      debt_currency_on_hand = wealth(debt_town)
      if debt_currency_on_hand < debt_amount
        withdraw_amt = convert_currency(debt_amount - debt_currency_on_hand, @hometown_currency, @debt_currency, -@hometown_info['exchange']['fee'])
        deposit_coins(withdraw_amt, @settings)
        walk_to(@hometown_info['exchange']['id'])
        bput("exchange all #{@hometown_currency} for #{@debt_currency}", 'The money-changer says', 'After collecting a modest fee', "You don't have that many")
        amount, denom = @settings.sell_loot_money_on_hand.split(' ')
        deposit_coins(convert_to_copper(amount, denom), @settings)
      end
    else
      unless ensure_copper_on_hand(debt_amount, @settings)
        echo '***STATUS*** Insufficient funds to pay your debt'
        beep
        exit
      end
    end

    if Flags['debt-collector']
      Flags.reset('debt-collector')
      pay_debt(debt_town)
      return
    end

    walk_to(@debt_town_info['debt_office']['id'])
    fput("pay #{debt_amount}")
  end
end

before_dying do
  Flags.delete('debt-collector')
end

PayDebt.new

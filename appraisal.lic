=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#appraisal
=end

custom_require.call(%w(common common-travel drinfomon equipmanager))

class Appraisal
  include DRC
  include DRCT

  def initialize
    @equipment_manager = EquipmentManager.new
    @equipment_manager.wear_equipment_set?('standard')

    return if train_appraisal_with_gear?

    return if assess_zills?

    art_options = get_data('art').art_options
    study_art(art_options)
  end

  def train_appraisal_with_gear?
    settings = get_settings
    return false unless settings.train_appraisal_with_gear

    @equipment_manager.items.each { |item| break unless appraise_item?(item) }
    true
  end

  def appraise_item?(item)
    @equipment_manager.get_item?(item)
    bput("appraise #{item.short_name} quick", 'Roundtime')
    waitrt?
    @equipment_manager.empty_hands
    DRSkill.getxp('Appraisal') < 30
  end

  def study_art(art_options)
    art_options.each do |data|
      break unless study?(data['room'], data['targets'])
    end
  end

  def study?(room, targets)
    walk_to(room)
    targets.each do |target|
      fput "study #{target}"
      waitrt?
      return false if DRSkill.getxp('Appraisal') >= 30
    end
    true
  end

  def assess_zills?
    return false if DRSkill.getrank('Appraisal') >= 250

    case bput('remove my zill', 'You slide', 'Remove what')
    when 'Remove what'
      return false
    end
    bput('assess my zill', 'you carefully look them over')
    waitrt?
    bput('wear my zill', 'You slide')

    true
  end
end

# Call this last to avoid the need for forward declarations
Appraisal.new

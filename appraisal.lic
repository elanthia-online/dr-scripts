=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#appraisal
=end

custom_require.call(%w(common common-travel drinfomon equipmanager))

class Appraisal
  include DRC
  include DRCT

  def initialize
    @equipment_manager = EquipmentManager.new
    @equipment_manager.wear_equipment_set?('standard')

    return if train_appraisal_with_pouches?
    return if train_appraisal_with_gear?

    return if assess_zills?
    wait_for_script_to_complete('study-art', ['appraisal'])
  end

  def train_appraisal_with_gear?
    settings = get_settings
    return false unless settings.train_appraisal_with_gear

    @equipment_manager.items.each { |item| break unless appraise_item?(item) }
    true
  end
  
  def train_appraisal_with_pouches?
    settings = get_settings
    return false unless settings.train_appraisal_with_pouches
    full_pouch_container = settings.full_pouch_container
    unless full_pouch_container
      echo "Must set full_pouch_container in YAML"
      return false
    end      
    if full_pouch_container == settings.spare_gem_pouch_container
      echo "*** Cannot have full pouches be stored where spare pouches are ***"
      return false
    end
    
    pouches = rummage('C pouch', full_pouch_container)
    $ORDINALS.each_with_index do |p, i|
      
      case bput("get #{p} pouch from my #{full_pouch_container}", '^You get ', '^What were you referring')
      when /^You get /
        bput("appraise my pouch quick", 'Roundtime')
        waitrt?
        fput("put my pouch in my #{full_pouch_container}")
      else
        break
      end
      
      break if DRSkill.getxp('Appraisal') >= 32
      
    end
    true
  end

  def appraise_item?(item)
    @equipment_manager.get_item?(item)
    bput("appraise #{item.short_name} quick", 'Roundtime')
    waitrt?
    @equipment_manager.empty_hands
    DRSkill.getxp('Appraisal') < 30
  end

  def assess_zills?
    return false if DRSkill.getrank('Appraisal') >= 250

    case bput('remove my zill', 'You slide', 'Remove what')
    when 'Remove what'
      return false
    end
    bput('assess my zill', 'you carefully look them over')
    waitrt?
    bput('wear my zill', 'You slide')

    true
  end
end

# Call this last to avoid the need for forward declarations
Appraisal.new
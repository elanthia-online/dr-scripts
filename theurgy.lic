=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#theurgy
=end

$settings = get_settings

custom_require.call(%w(common common-items common-money common-travel drinfomon))

######################## GET/PUT ########################

def put_in_container(item)
  DRC.bput "put #{item} in my #{$settings.theurgy_supply_container}", 'You put', 'What were you referring to'
end

def get_from_container(item)
  DRC.bput "get #{item} from my #{$settings.theurgy_supply_container}", 'You get', 'I could not find', 'What were you referring to'
end

######################## COMMUNES ########################

def comm_eluned
  fput "stow #{GameObj.right_hand.noun}" if GameObj.right_hand.name != 'Empty'
  fput "stow #{GameObj.left_hand.noun}" if GameObj.left_hand.name != 'Empty'

  DRC.forage? 'dirt'

  get_from_container($settings.water_holder)
  fput 'commune eluned'
  put_in_container($settings.water_holder)
  fput('drop dirt') if [checkleft, checkright].include?('dirt')
end

def comm_tasmine
  pause 1
  waitrt?
  get_from_container($settings.water_holder)
  fput "sprinkle #{$settings.water_holder} on #{checkname}"
  fput 'commune tasmine'
  put_in_container($settings.water_holder)
end

def comm_kert
  case DRC.bput("get oil from #{$settings.theurgy_supply_container}", 'holy oil', 'some oil', 'I could not find', 'What were you referring to')
  when 'I could not find', 'What were you referring to'
    return
  when 'some oil'
    if 'interrupt your research' == DRC.bput('prep bless', 'Bless spell', 'interrupt your research')
      research_type = ["Fundamental", "Augmentation", "Stream", "Sorcery", "Utility", "Warding"]
      find_current_project = DRC.bput("research status", / (\d+)% complete with a portion .*\./)
      hold_research = research_type.find{ |hold_research| find_current_project =~ /#{hold_research}/i }
      if hold_research == nil
        return
      end
      if find_current_project[1,2].to_i >= 60
        wait_time = (101 - find_current_project[1,2].to_i) * 3
        pause (wait_time)
      else
        echo "stopping research"
      end
      fput 'prep bless'
    end	
    pause 5
    fput 'cast oil'
  end
  fput "sprinkle holy oil on #{checkname}"
  put_in_container('oil')
  fput "commune kertigen"
end

def comm_truff
  fput "stow #{GameObj.right_hand.noun}" if GameObj.right_hand.name != 'Empty'
  fput "stow #{GameObj.left_hand.noun}" if GameObj.left_hand.name != 'Empty'
  get_from_container('Taffelberries')
  fput 'commune truffenyi'
  pause 1
  if checkright == 'orb'
    fput 'drop orb'
  else
    fput 'get Taffelberries'
    put_in_container('Taffelberries')
  end
end

######################## SHOPPING ########################

def check_supplies
  if DRStats.circle > 60
    buy_Taffelberries unless DRCI.inside?('Taffelberries', "#{$settings.theurgy_supply_container}")
  end
  buy_incense unless DRCI.inside?('incense', "#{$settings.theurgy_supply_container}")
  buy_sage unless DRCI.inside?('sage', "#{$settings.theurgy_supply_container}")
  buy_lavender unless DRCI.inside?('lavender', "#{$settings.theurgy_supply_container}")
  buy_wine unless DRCI.inside?('wine', "#{$settings.theurgy_supply_container}")
  buy_oil unless DRCI.inside?('oil', "#{$settings.theurgy_supply_container}")
  buy_flint unless DRCI.inside?('flint', "#{$settings.theurgy_supply_container}")
  buy_parchment unless DRCI.inside?('golden parchment', "#{$settings.theurgy_supply_container}")
  DRCT.walk_to '741'
end

def buy_incense
  DRCI.buy_item(19_073, 'incense')
  put_in_container('incense')
end

def buy_lavender
  DRCI.buy_item(19_073, 'lavender')
  put_in_container('lavender')
end

def buy_sage
  DRCI.buy_item(19_073, 'sage')
  put_in_container('sage')
end

def buy_flint
  DRCI.buy_item(8265, 'flint')
  put_in_container('flint')
end

def buy_wine
  DRCI.buy_item(19_073, 'wine')
  put_in_container('wine')
end

def buy_oil
  DRCI.buy_item(19_076, 'oil')
  put_in_container('oil')
end

def buy_parchment
  DRCT.walk_to('5735')
  fput 'read placard'
  pause 1
  fput 'order 4 from monk'
  fput 'unroll my parchment'
  put_in_container('golden parchment')
end

def buy_Taffelberries
  DRCI.order_item(8280, 14)
  fput 'get Taffelberries'
  put_in_container('Taffelberries')
  fput 'get Taffelberries'
  put_in_container('Taffelberries')
end

######################## CARVING ########################

carve_bead = proc do
  DRCT.walk_to '1030'
  exit unless DRRoom.npcs.empty? # Invasion check
  if $settings.immortal_aspect && DRCI.exists?('carving knife') && DRCI.exists?('shaper') && DRCI.exists?('prayer chain')
    prayer_bead
  end
end

def prayer_bead
  return unless DRSkill.getrank('Mechanical Lore') > 140
  hold_research = nil
  fput "stow #{GameObj.right_hand.noun}" if GameObj.right_hand.name != 'Empty'
  fput "stow #{GameObj.left_hand.noun}" if GameObj.left_hand.name != 'Empty'
  case DRC.bput('get prayer chain', 'You get', 'I could not find', 'What were you referring to', 'already in your inventory')
  when 'I could not find', 'What were you referring to'
    echo 'No Prayer Chain Found - Skipping Bead Carve'
    return
  when 'already in your inventory'
    fput 'remove my prayer chain'
  end
  beads = DRC.bput("look at my chain", /^Strung on to the prayer bead chain you see .*\./, 'There are currently no beads on it.')
  bead_count = DRC.list_to_nouns(beads.match(/^Strung on to the prayer bead chain you see (.*)\./).to_a[1])
  if bead_count.count >= 10
    put_in_container('prayer chain')
    return
  end
  put_in_container('prayer chain')
  research_check
  fput 'prep bless'
  DRC.forage? 'limb'
  get_from_container($settings.water_holder)
  fput("sprinkle #{$settings.water_holder} on my limb")
  put_in_container($settings.water_holder)
  pause 1
  fput 'cast my limb'
  if hold_research != nil
    fput ("RESEARCH #{hold_research.upcase} 300")
  end
  DRC.bput('get carving knife', 'You get', 'I could not find', 'What were you referring to')
  while checkright == 'limb'
    fput('carve my limb with my knife')
    pause 1
    waitrt?
  end
  put_in_container('carving knife')
  DRC.bput('get shaper', 'You get', 'I could not find', 'What were you referring to')
  while checkright == 'block'
    fput("shape block to #{$settings.immortal_aspect}")
	pause 1
    waitrt?
  end
  put_in_container('shaper')
  get_from_container('prayer chain')
  fput ("put #{$settings.immortal_aspect} bead on prayer chain")
  put_in_container('prayer chain')
end

######################## DEVOTION RITUALS ########################

clean_altar = proc do
  get_from_container($settings.water_holder)
  fput 'clean altar with holy water'
  waitfor 'You finish your job'
  put_in_container($settings.water_holder)
  waitrt?
end

meditate_bead = proc do
  if $settings.immortal_aspect
    case DRC.bput('get prayer chain', 'You get', 'I could not find', 'What were you referring to', 'already in your inventory')
    when 'I could not find', 'What were you referring to'
      echo 'No Prayer Chain Found - Skipping Prayer Bead Meditation'
      return
    when 'already in your inventory'
      fput 'remove my prayer chain'
    end
    beads = DRC.bput("look at my chain", /^Strung on to the prayer bead chain you see .*\./, 'There are currently no beads on it.')
    bead_count = DRC.list_to_nouns(beads.match(/^Strung on to the prayer bead chain you see (.*)\./).to_a[1])
    if bead_count.count >= 1
      fput 'kneel'
      fput 'meditate my prayer chain'
      waitfor 'suddenly detaches from your prayer bead chain'
      DRC.fix_standing
      put_in_container('prayer chain')
    end
    waitrt?
  end
end

bathe = proc do
  move 'go pool'
  get_from_container('sage')
  fput 'rub sage'
  pause 1
  get_from_container('lavender')
  fput 'rub lavender'
  waitfor 'A Dark Grove, A Deep Pool'
  DRC.fix_standing
  move 'out'
end

tithe = proc do
  DRCT.walk_to '741'
  DRC.bput("put 5 silver kronar in almsbox", 'You drop', 'But you do not')
end

pray = proc do
  if $settings.favor_god
    DRC.bput("pray #{$settings.favor_god}", "#{$settings.favor_god}")
    waitrt?
  else
    DRC.bput('pray meraud', 'meraud')
    waitrt?
  end
end

study_wall = proc do
  if DRStats.circle >= 30
    move 'pull candle'
    case DRC.bput('study wall', 'Turning your attention to the sigils', 'interrupt your research')
    when 'Turning your attention to the sigils'
      waitfor 'as your understanding of the sigils gradually slips away.'
    when 'interrupt your research'
      echo 'Researching - skipping Study'
    end
  end
  move 'go hatch'
end

find_seed = proc do
  DRCT.walk_to '1032'
  exit unless DRRoom.npcs.empty? # Invasion check
  while 'You come up empty' == DRC.bput('gather seed', 'You find a tiny', 'This is not a good', 'You come up empty')
    waitrt?
  end
  waitrt?
end

plant_seed = proc do
  DRCT.walk_to '1031'
  fput('plant seed')
  get_from_container($settings.water_holder)
  fput("sprinkle #{$settings.water_holder} on room")
  put_in_container($settings.water_holder)
end

pray_badge = proc do
  case DRC.bput('remove badge', 'You take off', 'Remove what')
  when 'You take off'
    fput 'pray badge'
    pause 2
    waitrt?
    DRC.bput 'wear badge', 'You put on a', 'You are already'
  when 'Remove what'
    return if 'You get' != DRC.bput('get badge', 'You get', 'I could not find', 'What were you referring to')
    fput 'pray badge'
    pause 2
    waitrt?
    put_in_container ('pilgrim badge')
  end
end

dance = proc do
  until ['flawless performance to those on high', 'In your condition', 'Your dance reaches its conclusion'].include? DRC.bput('dance', 'flawless performance to those on high', 'Your dance reaches its conclusion', 'You begin to dance', 'Your actions grow', 'Your dance', 'but you falt', 'In your condition',)
    pause 1
    waitrt?
    DRC.fix_standing
  end
end

incense_wine = proc do
  DRC.bput("get #{$settings.flint_lighter}", 'You get', 'I could not find', 'What were you referring to')
  get_from_container('incense')
  while 'nothing happens' == DRC.bput('light my incense with flint', 'nothing happens', 'bursts into flames', 'much too dark in here to do that')
    waitrt?
  end
  waitrt?
  fput 'wave incense at altar'
  fput 'snuff incense'
  put_in_container('incense')
  fput "stow #{$settings.flint_lighter}", 'You put your', 'Stow what'
  pause 1
  get_from_container('wine')
  fput 'pour wine on altar'
  put_in_container('wine')
end

recite_prayer = proc do
  fput "recite Meraud, power the holy fires that unleash my righteous vengeance;Chadatru, guide my sword to swing in justice;Everild, give me the power to conquer my enemies;Truffenyi, let me not lose sight of compassion and mercy;Else, I will become like those I despise;Urrem'tier, receive into your fetid grasp these wicked souls;May the Tamsine's realms never know their evil ways again;May all the Immortals guide your faithful soldier #{checkname}."
  pause 1
  waitrt?
end

reflectory = proc do
  DRCT.walk_to '5988'
  fput 'meditate'
  waitrt?
end

invoke_parchment = proc do
  DRCT.walk_to('1230')
  if 'but there is nothing in there like that' != DRC.bput("rummage /C parchment my #{$settings.theurgy_supply_container}", 'but there is nothing in there like that', 'pale golden prayer parchment')
    get_from_container('golden parchment')
    fput 'invoke my parchment'
    waitfor 'You conclude'
    put_in_container('golden parchment')
  end
end

######################## CUSTOM TRAVEL ########################

enter_altar = proc do
  DRCT.walk_to('1164')
  move 'go shack'
  move 'go hole'
  move 'west'
  move 'up'
  waitrt?
  move 'go path'
end

exit_altar = proc do
  move 'go path'
  move 'go hole'
  waitrt?
  move 'east'
  move 'go hole'
  move 'out'
end

######################## MISC ########################

def research_check
  case find_current_project = DRC.bput("research status", / (\d+)% complete with a portion .*\./, 'not researching anything')
  when /not researching anything/
    return
  when /complete with a portion/
    research_type = ["Fundamental", "Augmentation", "Stream", "Sorcery", "Utility", "Warding"]
    hold_research = research_type.find{ |hold_research| find_current_project =~ /#{hold_research}/i }
    if hold_research.nil?
      return
    end
    if find_current_project[1,2].to_i >= 60
      wait_time = (101 - find_current_project[1,2].to_i) * 3
      pause (wait_time)
    else
      echo "stopping research"
    end
    fput 'prep bless'
  end
  return hold_research
end

def controller(method)
  echo Flags['theurgy-commune']
  echo Flags['theurgy-eluned']
  echo Flags['theurgy-tasmine']
  echo Flags['theurgy-truffenyi']
  echo Flags['theurgy-kertigen']
  if Flags['theurgy-commune']
    Flags.reset('theurgy-commune')
    next_commune
  end
  method.call
end

def next_commune
  if Flags['theurgy-eluned'] == false && DRStats.circle > 3 && DRSkill.getrank('Outdoorsmanship') >= 20 && DRSkill.getxp('Theurgy') <=31
    comm_eluned
  elsif Flags['theurgy-tasmine'] == false && DRStats.circle > 2 && DRSkill.getxp('Theurgy') <=31
    comm_tasmine
  elsif Flags['theurgy-truffenyi'] == false && DRStats.circle > 60 && DRSkill.getxp('Theurgy') <=24
    comm_truff
  elsif Flags['theurgy-kertigen'] == false && DRStats.circle > 8 && DRSkill.getxp('Theurgy') <=31
    comm_kert
  end
end

######################## FLAGS ########################
  
Flags.add('theurgy-commune', 'fully prepared to seek assistance from the Immortals once again', 'completed this commune too recently')
Flags['theurgy-commune'] = true
Flags.add('theurgy-eluned', 'You grind some dirt in your fist')
Flags.add('theurgy-tasmine', 'You feel warmth spread throughout your body')
Flags.add('theurgy-truffenyi', 'The power of Truffenyi has answered your prayer')
Flags.add('theurgy-kertigen', 'The thick smell of ozone fills your nostrils')

######################## SCRIPT ########################

DRCT.walk_to '1900'
fput 'withdraw 12 silver'
pray
check_supplies
controller(tithe)
DRCT.walk_to '5846'
controller(clean_altar)
controller(study_wall)
controller(reflectory)
controller(carve_bead)
controller(find_seed)
controller(plant_seed)
controller(enter_altar)
controller(bathe)
controller(meditate_bead)
controller(pray_badge)
controller(dance)
controller(incense_wine)
controller(recite_prayer)
controller(clean_altar)
waitrt?
controller(pray)
controller(exit_altar)
controller(invoke_parchment)
fput 'commune'

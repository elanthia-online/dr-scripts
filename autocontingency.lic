=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#autocontingency
=end
custom_require.call(%w(common common-arcana events spellmonitor drinfomon common-travel))
class Contingency
  include DRC
  include DRCA
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'anchor', regex: /\w+/, description: 'Contingency to create' },
        { name: 'room', regex: /\d+/, description: 'Room to move to' }
      ],
      [
        { name: 'invoke', regex: /invoke/i }
      ]
    ]
    args = parse_args(arg_definitions)
    @settings = get_settings
    @anchor = args.anchor.capitalize
    @room = args.room
    if args.invoke
      check_contingency
    else
      contingency_saferoom
    end
  end

  def contingency_saferoom
    moon = UserVars.moons.select { |moon, _data| UserVars.moons['visible'].include?(moon) }
                   .reject { |_moon, data| data['timer'] < 32 }
                   .max_by { |_moon, data| data['timer'] }
                   .first
    echo "moon=#{moon}"
    return unless moon
    DRCT.walk_to(@room)
    cast_contingency_spells
    pause 1
  end

  def cast_contingency_spells
    data = @settings.waggle_sets['contingency'].values.each do |data|
      data['cast'] = "cast #{@anchor}"
      cast_spell(data, @settings)
    end
  end

  def check_contingency
    if DRSpells.active_spells['Contingency'].to_i <=0
      pause 1
      echo("No contingency")
    else
      fput("invoke contingency")
    end
  end

end
Contingency.new
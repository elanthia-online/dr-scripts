=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#charge-holy-weapon
=end

custom_require.call(%w[common common-travel drinfomon equipmanager])

class HolyWeapon
  include DRC
  include DRCT

  def initialize
    exit unless DRStats.paladin?

    settings = get_settings
    @hometown = settings.hometown
    hw_settings = settings.holy_weapon
    @hw_power_levels = get_data('spells')['holy_weapon_power_levels']
    @altar_room = get_data('town')[@hometown]['holy_weapon_altar']['id']
    @em = EquipmentManager.new(settings)

    unless hw_settings
      DRC.message("No paladin settings found, please check your YAML settings. Exiting...")
      exit
    end

    check_charge_level(hw_settings)
  end

  def check_charge_level(hw_settings)
    weapon = hw_settings['weapon_name']
    threshold = hw_settings['power_level_threshold'] || 3

    @em.wield_weapon(weapon)

    power_matches = @hw_power_levels.map { |data| /#{data['match']}/ }
    power_message = DRC.bput("look my #{weapon}", *power_matches)
    power_data = @hw_power_levels.find { |data| /#{data['match']}/ =~ power_message }

    unless power_data
      DRC.message("Could not detect holy power on your '#{weapon}', is this the correct weapon?")
      exit
    end

    level = power_data['level']
    charges = power_data['estimated_charges']

    echo("Detected holy power level of #{level} with an estimated #{charges} charges remaining")
    echo("Your holy power level threshold is #{threshold} or below")

    if level <= threshold
      DRC.message("At or below holy power level threshold, recharging")
      complete_ritual(hw_settings)
    else
      DRC.message("Above holy power level threshold, skipping")
    end

    @em.stow_weapon(weapon)
  end

  def complete_ritual(hw_settings)
    weapon = hw_settings['weapon_name']
    name = hw_settings['icon_name']
    container = hw_settings['icon_container']
    room = hw_settings['icon_room']

    @em.stow_weapon(weapon)

    unless name
      DRC.message("No icon found, using #{@hometown}'s chapel to complete the ritual!")
      altar_room_ritual(weapon, @altar_room)
    else
      DRC.message("Icon -#{name}- found, moving to room #{room} to complete the ritual!")
      icon_ritual(weapon, name, room, container)
    end
  end

  def altar_room_ritual(weapon, room)
    DRCT.walk_to(room)

    case DRC.bput('pray chadatru', 'not cleared enough to pay proper respect to Chadatru', 'You decide to wait awhile longer')
    when 'not cleared enough to pay proper respect to Chadatru'
      DRC.message("Waiting for the prayer to finish (should take no longer than 2 minutes)...")
      waitfor('soothing sensation washes over your soul.')
      glyph_of_renew(weapon)
    when 'You decide to wait awhile longer'
      DRC.message("You're not ready to recharge yet, exiting!")
    end

    exit
  end

  def icon_ritual(weapon, name, room = @altar_room, container)
    DRCT.walk_to(room)

    DRCI.open_container?(container)
    unless DRCI.get_item_if_not_held?(name, container)
      DRC.message("Icon not found! Exiting...")
      exit
    end

    icon_routine(name)
    DRCI.put_away_item?(name, container)
    glyph_of_renew(weapon)
  end

  def icon_routine(name)
    3.times{DRC.bput("clean my #{name}", 'You carefully', 'You turn', 'You inspect')}
    DRC.bput("hug my #{name}", 'You drop')
    DRC.bput("focus my #{name}", 'Unaware of what')
    DRC.bput("pray my #{name}", 'You breathe out')
    DRC.fix_standing
  end

  def glyph_of_renew(weapon)
    @em.wield_weapon(weapon)
    DRC.bput("glyph renew my #{weapon}", 'You trace')
    @em.stow_weapon(weapon)
  end
end

HolyWeapon.new

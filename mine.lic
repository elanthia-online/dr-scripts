=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#mine
=end

custom_require.call(%w(common equipmanager common-travel))

class Mine
  include DRC
  include DRCT

  def initialize
    setup

    bput("get my #{@mining_implement}", 'You get')

    bput('prospect', 'roundtime', 'You carefully scan')

    @multiplier = @mining_implement =~ /pick/i ? 4 : 5

    mine(@multiplier * resource_level)
    while bput('prospect careful', 'roundtime', 'You carefully scan')
      bput('prospect', 'roundtime', 'You carefully scan')
      results = reget(10, 'can be mined here')
      waitrt?
      return if results.nil?
      mine(@multiplier * resource_level)
    end
  end

  def resource_level
    case Flags['resource-level'].first
    when 'certain a scattering of resources', 'scattering of resources (0/5) remains to be found'
      1
    when 'enormous quantity remains to be found', 'enormous quantity (5/5) remains to be found'
      6
    when 'substantial quantity remains to be found', 'substantial quantity (4/5) remains to be found'
      5
    when 'good quantity remains to be found', 'good quantity (3/5) remains to be found'
      4
    when 'decent quantity remains to be found', 'decent quantity (2/5) remains to be found'
      3
    when 'small quantity remains to be found', 'small quantity (1/5) remains to be found'
      2
    end
  end

  def handle_danger
    fput('exit') if Flags['mine-exit']
    fix_standing

    if bleeding?
      snapshot = Room.current.id
      wait_for_script_to_complete('safe-room')
      walk_to(snapshot)
      bput("get my #{@mining_implement}", 'You get')
    end

    if Flags['mine-danger']
      waitrt?
      until /danger|find nothing of concern/ =~ bput('prospect danger', 'Unfortunately', 'shown a way to significantly reduce the danger', 'find nothing of concern')
        pause
        waitrt?
      end
      Flags.reset('mine-danger')
    end
  end

  def mine(count)
    waitrt?
    handle_danger

    if count.zero?
      bput('prospect', 'roundtime', 'You carefully scan')
      results = reget(10, 'can be mined here')
      waitrt?
      return if results.nil?
      mine(@multiplier * resource_level)
      return
    end

    bput('mine', 'roundtime')
    waitrt?

    @loot_list.each do |item|
      matches = DRRoom.room_objs.grep(/\b#{item}/i)
      matches.each do |match|
        if @use_packet && packet?
          bput("push #{item} #{match.scan(/\w+/).last} with my packet", 'You push')
          bput('stow my packet', 'You put', 'Stow what')
          bput('stow deed', 'You put')
        else
          bput("stow #{match.scan(/\w+/).last}", 'You put')
        end
      end
    end
    mine(count - 1)
  end

  def packet?
    'You get' == bput('get my packet', 'You get', 'What were you referring to')
  end

  def setup
    EquipmentManager.instance.empty_hands
    Flags.add('mine-danger', 'The ground rumbles ominously', 'A bitter smell seeps into the air', 'The floor shudders briefly', 'continued mining .* hazardous', 'slightly dangerous because the ground')
    # Flags.add('mine-stand', 'clear away enough rubble to lever yourself free', 'You probably would have better luck while standing', 'You peacefully awaken, feeling refreshed', 'The world slowly comes into focus again, followed swiftly by a throbbing headache')
    Flags.add('mine-exit', 'The entire wall of rock fractures at your blow and comes crashing down atop you')
    Flags.add('resource-level',
              'certain a scattering of resources', 'enormous quantity remains to be found', 'substantial quantity remains to be found',
              'good quantity remains to be found', 'decent quantity remains to be found', 'small quantity remains to be found',
              'enormous quantity \(5/5\) remains to be found', 'substantial quantity \(4/5\) remains to be found', 'good quantity \(3/5\) remains to be found',
              'decent quantity \(2/5\) remains to be found', 'small quantity \(1/5\) remains to be found', 'scattering of resources \(0/5\) remains to be found')
    settings = get_settings
    @mining_implement = settings.mining_implement
    @loot_list = settings.mining_buddy_vein_list
    @use_packet = settings.mine_use_packet
  end
end

Mine.new

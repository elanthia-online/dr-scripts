=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#bescort
=end

custom_require.call(%w(common common-travel drinfomon events skill-recorder common-arcana))

$turns_since_bad = 0

class MazeRoom
  include DRC
  include DRCT

  $CARDINALS = { 'n' => 's', 's' => 'n', 'ne' => 'sw', 'sw' => 'ne', 'nw' => 'se', 'se' => 'nw', 'e' => 'w', 'w' => 'e' }
  $ADJUSTMENTS = { 'n' => [0, 1], 's' => [0, -1], 'ne' => [1, 1], 'sw' => [-1, -1], 'nw' => [-1, 1], 'se' => [1, -1], 'e' => [1, 0], 'w' => [-1, 0] }

  attr_accessor :desc, :exits, :checked, :parent, :coords

  def initialize(came_from = nil, source_room = nil)
    if came_from
      @exits = { $CARDINALS[came_from] => source_room }
      source_room.exits[came_from] = self
      @coords = update_coords(source_room.coords, came_from)
    else
      @@room_list = []
      @exits = {}
      @coords = [0, 0]
    end

    populate_exits
    @@room_list << self
  end

  def find_room_by_coords(coords)
    @@room_list.find { |room| room.coords == coords }
  end

  def update_coords(coords, traveled)
    [coords.first + $ADJUSTMENTS[traveled].first, coords.last + $ADJUSTMENTS[traveled].last]
  end

  def best_path
    @@room_list.each do |room|
      room.checked = false
      room.parent = nil
    end
    @checked = true
    queue = [self]
    until queue.empty?
      current = queue.shift
      current.exits.each do |dir, child|
        return current.parent || dir if child.nil?
        next if child.checked
        child.checked = true
        child.parent = current.parent || dir
        queue << child
      end
    end
  end

  def condense_direction(direction)
    direction.gsub(/orth|est|ast|outh/i, '')
  end

  def populate_exits
    remaining_exits = XMLData.room_exits.map { |exit| condense_direction(exit) } - @exits.keys

    remaining_exits.each { |exit| @exits[exit] = nil }
  end

  def wander
    dir_to_go = @exits.keys.first if @exits.size == 1
    dir_to_go, = @exits.find { |_, room| room.nil? } unless dir_to_go
    dir_to_go, = best_path unless dir_to_go

    fix_standing
    move(dir_to_go)
    pause

    return @exits[dir_to_go] if @exits[dir_to_go]

    if existing_room = find_room_by_coords(update_coords(@coords, dir_to_go))
      @exits[dir_to_go] = existing_room
      existing_room.exits[$CARDINALS[dir_to_go]] = self
      return existing_room
    end

    MazeRoom.new(dir_to_go, self)
  end
end

class Bescort
  include DRC
  include DRCT
  include DRCA

  def initialize
    arg_definitions = [
      [
        { name: 'wilds', regex: /wilds/i, description: 'The Leucro and Geni wilds on the NTR.' },
        { name: 'mode', options: %w(exit leucro1 leucro2 geni), description: 'Where do you need to get to?' }
      ],
      [
        { name: 'northern_trade', regex: /northern_trade/i, description: 'The thicket vipers and rock guardians near the wilds on the NTR.' },
        { name: 'mode', options: %w(exit thicket_vipers rock_guardians), description: 'Where do you need to get to?' }
      ],
      [
        { name: 'faldesu', regex: /faldesu/i, description: 'The Faldesu river at the end of the NTR.' },
        { name: 'mode', options: %w(haven crossing), description: 'Where do you need to get to?' }
      ],
      [
        { name: 'zaulfang', regex: /zaulfang/i, description: 'For crossing the Zaulfang swamp maze outside Haven' },
        { name: 'mode', options: %w(exit enter), description: 'Where do you need to get to?' }
      ],
      [
        { name: 'segoltha', regex: /segoltha/i, description: 'The Segoltha south of the crossing' },
        { name: 'mode', options: %w(north south), description: 'Where do you need to get to?' }
      ],
      [
        { name: 'crocs', regex: /crocs/i, description: 'Blue belly crocodiles on NTR' },
        { name: 'mode', options: %w(enter exit), description: 'Where do you need to get to?' }
      ],
      [
        { name: 'ways', regex: /ways/i, description: 'Astral travelling' },
        { name: 'mode', options: %w(shard crossing leth riverhaven merkresh fang raven throne muspari aesry taisgath theren steppes), description: 'Where do you need to get to?' }
      ],
      [
        { name: 'mammoth', regex: /mammoth/i, description: 'The mammoths between Acenamacra, Fang Cove, and Ratha' },
        { name: 'mode', options: %w(acen fang ratha), description: 'Where do you need to get to?' }
      ]
    ]

    args = parse_args(arg_definitions)

    pause

    if args.wilds
      wilds(args.mode)
    elsif args.northern_trade
      northern_trade(args.mode)
    elsif args.faldesu
      faldesu(args.mode)
    elsif args.zaulfang
      zaulfang(args.mode)
    elsif args.segoltha
      segoltha(args.mode)
    elsif args.crocs
      croc_swamp(args.mode)
    elsif args.ways
      astral_walk(args.mode)
    elsif args.mammoth
      take_mammoth(args.mode)
    end
  end

  private

  def do_map_move(movement)
    if movement.is_a?(StringProc) || movement.is_a?(Proc)
      movement.call
    else
      move movement
    end
  end

  def manual_go2(goal_room)
    return if Room.current.id == goal_room
    path = Map.findpath(Room.current.id, Map[goal_room])
    path.each { |step| do_map_move(Room.current.wayto[step.to_s]) }
    do_map_move(Room.current.wayto[goal_room.to_s])
  end

  def search
    fput('search')
    pause
    waitrt?
    retreat
  end

  def search_path(pathname, visible = true, movetype = 'go')
    if visible
      loop do
        loop do
          search
          # 'other stuff' indicates the room is full - any paths could be rolled up into that collection
          break if DRRoom.room_objs.find { |obj| obj.include?(pathname) || obj.include?('other stuff') }
        end
        break if move "#{movetype} #{pathname}"
        pause
      end
      pause
    else
      search
      until move "#{movetype} #{pathname}"
        pause
        search
      end
    end
  end

  def move_direction?(dir_priority, force_match = nil)
    if choice = dir_priority.find { |dir| XMLData.room_exits.include?(dir) }
      $turns_since_bad = 0
      move choice
      true
    elsif force_match
      dir_priority.each do |dir|
        if force_match.find { |msg| XMLData.room_description.include?(msg) }
          return false
        end
        move(dir)
        pause 0.5
        waitrt?
      end
      true
    elsif XMLData.room_exits.empty?
      $turns_since_bad += 1
      # fog?
      move dir_priority.sample
      $turns_since_bad > 10
    else
      false
    end
  end

  def find_room_maze(valid_move = proc { |_| true }, error_rooms = {})
    loop do
      error_rooms[Room.current.id].call if error_rooms[Room.current.id]
      return if DRRoom.pcs.empty? && DRRoom.npcs.empty?
      return if !DRRoom.pcs.empty? && (DRRoom.pcs - UserVars.friends).empty?
      exits = XMLData.room_exits.dup.shuffle
      exits = %w(nw n ne e se s sw w).shuffle if exits.empty?
      exits.rotate! until valid_move.call(exits.first)
      move exits.first
    end
  end

  def find_room_list(moves, min = 0)
    count = 0
    moves.each do |dir|
      count += 1
      break if DRRoom.pcs.empty? && DRRoom.npcs.empty? && count > min
      move dir
      pause 0.5
    end
  end

  def wilds(mode)
    if mode !~ /exit/i && Room.current.id != 1176
      echo('Wilds script must be started from 1176')
      exit
    end
    case mode
    when /exit/i
      wilds_leave
    when /leucro1/i
      wilds_enter
      find_room_maze(proc { |dir| !(XMLData.room_exits == %w(east south northwest) && dir == 'northwest') }, 7958 => proc { search_path('spot') }, 7957 => proc { move('east') })
    when /leucro2/i
      wilds_enter
      wilds_leucro_maze(true)
      find_room_list(%w(se s se sw sw sw w w w w s se), 4)
    when /geni/i
      wilds_enter
      wilds_leucro_maze(true)
      wilds_leucro_walk
      find_room_maze
    end
  end

  def wilds_enter
    fix_standing
    move 'go path'
    pause
    search_path('trail')
    search_path('trail')
    search_path('trail')
    search_path('spot')
  end

  def wilds_leucro_walk
    attempts = 0
    until XMLData.room_description.include?('small creatures still lurk beneath its surface -- perhaps following the remnant of an old, long unused trail.')
      unless move_direction?(%w(southeast south southwest west))
        move('southeast')
      end
      pause 0.5
      attempts += 1
      if attempts == 50
        echo 'Train your perception!'
        exit
      end
    end
    search_path('trail', false)
  end

  def wilds_leucro_maze(entering)
    if entering
      while move_direction?(%w(northeast east north southeast))
        pause 0.5
        break if DRRoom.room_objs.include?('tangled deadfall')
      end
      if Room.current.id == 7958
        move 'go spot'
        wilds_leucro_maze(entering)
        return
      end
      move 'go dead'
    else
      pause 0.5 while move_direction?(%w(northwest west north))
    end
  end

  def wilds_leave_trail
    pause 0.5 while move_direction?(%w(northeast north northwest east south), ['A fearsomely large black plant rests at the bottom of two slopes.  Its serpentine, multiple stems end in large red tubular openings, which exude a smell like a cross between donkey roadkill and flayed skunk'])
    move 'go dead'
  end

  def wilds_leave
    matches = [
      'It drips slowly into the undergrowth, creating a damp sludge that makes walking unpleasant and hazardous',
      'Several sets of yellow eyes stare out unblinkingly from the safety of oak tree limbs too high for even the largest creatures to reach.  The sound of softly fluttering wings drifts down',
      'A fearsomely large black plant rests at the bottom of two slopes.  Its serpentine, multiple stems end in large red tubular openings, which exude a smell like a cross between donkey roadkill and flayed skunk',
      'A lively brook once bubbled through the narrow gully, but time and drought have left only this cracked streambed as a reminder.'
    ]

    loop do
      pause 0.25 while move_direction?(%w(northwest west north northeast), matches)

      if XMLData.room_description.include?(matches[0])
        search_path('trail', false)
      elsif XMLData.room_description.include?(matches[1]) || XMLData.room_description.include?(matches[2])
        wilds_leave_trail
      else
        search_path('trail')
        move 'n'
        move 'n'
        search_path('path')
        break
      end
    end
  end

  def northern_trade(mode)
    if mode !~ /exit/i && Room.current.id != 1176
      echo('Northern trade route script must be started from 1176')
      exit
    end
    case mode
    when /exit/i
      northern_trade_leave
    when /thicket_vipers/i
      northern_trade_enter
      walk_to 6847
      find_room_list(%w(e s w w w n))
    when /rock_guardians/i
      northern_trade_enter
      walk_to 19_154
      find_room_list(['climb fall', 'nw', 'nw', 'w', 'sw', 's', 'se', 'se'])
    end
  end

  def northern_trade_enter
    fix_standing
    move 'go path'
    pause
    search_path('trail')
    search_path('trail')
    search_path('trail')
    search_path('tracks', false)
  end

  def northern_trade_leave
    loop do
      case Room.current.id
      when 6830
        break
      when 1386 # Handle broken room
        ['nw', 'nw', 'n', 'ne', 'e', 'se', 'se', 'climb fall'].each { |dir| move dir }
      end
      walk_to(6830, false)
    end
    search_path('tracks', false)
    search_path('trail')
    move 'n'
    move 'n'
    search_path('path')
  end

  def faldesu(mode)
    unless mode =~ /haven|crossing/i
      echo 'You must specify haven or crossing for traversing the faldesu river'
      exit
    end

    if UserVars.athletics >= 140
      swim_faldesu(mode =~ /haven/i)
    else
      take_rh_ferry(mode =~ /haven/i)
    end
  end

  def swim(dir)
    move dir
    pause
    waitrt?
  end

  def swim_faldesu(north)
    start = north ? 1375 : 473
    manual_go2(start)
    moveset = north ? %w(north northwest northeast) : %w(south southwest southeast)
    move 'dive river'
    swim(moveset[0]) while XMLData.room_exits.include?(moveset[0])

    swim(moveset[1]) while XMLData.room_exits.include?('east')

    swim(moveset[2]) while XMLData.room_exits.include?(moveset[0])

    move 'climb bridge'
  end

  def take_mammoth(mode)
    case mode
    when 'fang'
      id_to_mammoth = { 2239 => 'tall', 11_130 => 'sea' }
      closest_mammoth = sort_destinations(id_to_mammoth.keys).first
      manual_go2(closest_mammoth)
      mammoth_type = id_to_mammoth[closest_mammoth]
    when 'acen'
      manual_go2(8301)
      mammoth_type = 'tall'
    when 'ratha'
      manual_go2(8301)
      mammoth_type = 'sea'
    end
    case bput("join #{mammoth_type} mammoth", 'What were you referring to', 'You join the Merelew driver')
    when /What were you referring to/
      waitfor 'The waves along the waterline increase drastically', 'A watery trumpeting sound heralds the swift approach'
      take_mammoth(mode)
    when /You join the Merelew driver/
      waitfor 'The burly beast trumpets a series of watery blasts', 'Here we are, ladies and gentlemen'
    end
  end

  def take_rh_ferry(north)
    if north
      manual_go2(1385)
    else
      manual_go2(470)
    end
    case bput('go ferry', 'You .* climb aboard', 'Come back when you can afford the fare', 'not here', 'I could not find what you were referring to', 'stuck here until the next one arrives')
    when /not here/, /I could not find what you were referring to/i, /stuck here until the next one arrives/
      waitfor 'pulls into the dock', 'pulls up to the dock'
      take_rh_ferry(north)
    when /climb aboard/
      waitfor 'reaches the dock and its crew ties the ferry off'
      fput('go dock')
    end
  end

  def zaulfang(mode)
    Flags.add('zfswamp-reset', 'The noxious swamp gas takes its toll on your mind, and your surroundings seem to shift as you grow immensely dizzy')
    case mode
    when /enter/i
      unless Room.current.id == 8540
        echo('Must enter Zaulfang swamp from 8540')
        exit
      end
      move('go path')
      pause
      wander_maze_until('sickly tree that looms far above the swamp', 'climb tree')
    when /exit/i
      unless Room.current.id == 19_415
        echo('Must exit Zaulfang swamp from 19415')
        exit
      end
      move('down')
      pause
      wander_maze_until('curving path', 'go path')
    end
  end

  def wander_maze_until(target, exit_command)
    current_room = MazeRoom.new
    loop do
      if Flags['zfswamp-reset']
        Flags.reset('zfswamp-reset')
        result = bput('look', 'Obvious paths:.*').split(':').last.split(', ').first.delete('.')
        move(result)
        pause
        current_room = MazeRoom.new
      end

      if DRRoom.room_objs.include?(target)
        unless move(exit_command)
          fix_standing
          wander_maze_until(target, exit_command)
        end
        return
      end
      current_room = current_room.wander
    end
  end

  def segoltha(mode)
    if mode =~ /^n/i
      dir_of_travel = 'north'
      start_room = 19_373
    elsif mode =~ /^s/i
      dir_of_travel = 'south'
      start_room = 19_457
    else
      echo('Must specify north or south for swimming the segoltha')
      exit
    end

    unless start_room == Room.current.id
      echo("Must start bescort in room #{start_room} for traveling #{dir_of_travel}")
      exit
    end

    loop do
      waitrt?
      if XMLData.room_exits.length == 2
        move 'west'
      elsif XMLData.room_exits.include?(dir_of_travel)
        move dir_of_travel
      else
        break
      end
    end
  end

  def croc_swamp(mode)
    if mode == 'enter'
      unless 1358 == Room.current.id
        echo('Must start bescort in room 1358 to enter the swamp')
        exit
      end
      move('nw')
      move('n')
      move('go reed')
      until DRRoom.pcs.empty? && DRRoom.npcs.empty?
        move(%w(w nw n ne e se s sw).sample)
      end
    else
      loop do
        if 'You see nothing unusual' == bput('look reed', 'You see nothing unusual', 'could not find')
          move('go reed')
          break
        end
        if DRRoom.room_objs.include?('ruined shack')
          move('w')
          move('nw')
        else
          move(%w(w nw n ne e se s sw).sample)
        end
      end
      while move_direction?(%w(south southeast))
      end
    end
  end

  def power_walk(pattern)
    fput 'exit' if dead? && @exit_if_killed
    if Flags['harness-check']
      harness_mana(20) unless Flags['harness-check'].include?('effortlessly')
      Flags.reset('harness-check')
    end
    result = bput('pow', pattern)
    result =~ pattern
    waitrt
    if Flags['pattern-shift']
      Flags.reset('pattern-shift')
    else
      move Regexp.last_match[:direction]
    end
  end

  def know_shard?(shard_name)
    result = bput('recall heavens grazhir', shard_name, 'Roundtime')
    result != 'Roundtime'
  end

  def open_gate(shard, entering_ap)
    Flags.reset('gate-failure')
    prepare?('mg', 5)
    if entering_ap
      bput("focus #{shard}", 'Roundtime') if DRStats.circle < 100
      3.times { harness_mana(20) }
      waitcastrt?
      DRStats.circle > 99 ? cast?('cast grazhir') : cast?("cast #{shard}")
    else
      bput("focus #{shard}", 'Roundtime')
      waitcastrt?
      cast?("cast #{shard}")
    end
    pause 0.25
    open_gate(shard, entering_ap) if Flags['gate-failure']
  end

  def astral_walk(mode)
    @exit_if_killed = get_settings.quit_on_death_in_ap

    Flags.add('harness-check', /You (.*) maintain your place among the shifting streams of mana\./)
    Flags.add('pattern-shift', 'A wave of rippling air sweeps through the conduit!  The streams of mana writhe violently before settling into new patterns')
    Flags.add('gate-failure', 'With supreme effort, you are able to bring the spell to an end without harm.')

    room_id_to_shard = {
      9999 => "Asharshpar'i",
      607 => 'Rolagi',
      2493 => 'Marendin',
      306 => 'Taniendar',
      3002 => 'Mintais',
      3105 => 'Dinegavren',
      4542 => 'Tamigen',
      5050 => 'Erekinzil',
      6867 => 'Auilusi',
      8302 => 'Vellano'
    }

    mode_to_shard = {
      'shard' => 'Marendin',
      'crossing' => 'Rolagi',
      'leth' => "Asharshpar'i",
      'theren' => 'Dinegavren',
      'throne' => 'Mintais',
      'raven' => 'Tamigen',
      'riverhaven' => 'Taniendar',
      'taisgath' => 'Erekinzil',
      'aesry' => 'Auilusi',
      'fang' => 'Vellano',
      'muspari' => 'Tabelrem',
      'steppes' => "Dor'na'torna",
      'merkresh' => 'Besoge'
    }

    mode_to_pillar_roomid = {
      'shard' => 9806,
      'merkresh' => 9806,
      'crossing' => 9764,
      'muspari' => 9764,
      'aesry' => 9807,
      'steppes' => 9807,
      'fang' => 9805,
      'leth' => 9803,
      'raven' => 9803,
      'theren' => 9762,
      'riverhaven' => 9762,
      'throne' => 9808,
      'taisgath' => 9808
    }

    direction_to_pattern = {
      'center' => /the microcosm is to the (?<direction>.*)\.$/,
      'exit' => /You believe the end of the conduit lies (?<direction>.*)\.$/
    }

    destination_shard = mode_to_shard[mode]
    unless know_shard?(destination_shard)
      echo 'You dont know that shard!'
      exit
    end

    source_shard = room_id_to_shard[Room.current.id]
    unless source_shard || DRStats.circle > 99
      echo 'You are not in a room with a Grazhir shard.'
      exit
    end

    open_gate(source_shard, true)
    pause 0.25 until XMLData.room_exits.empty?
    power_walk(direction_to_pattern['center']) while XMLData.room_exits.empty?
    walk_to mode_to_pillar_roomid[mode]
    bput("focus #{destination_shard}", 'You move into the chaotic tides of energy')
    power_walk(direction_to_pattern['exit']) while DRRoom.room_objs.empty?
    open_gate(destination_shard, false)
    fput('rel mana')
  end
end

Bescort.new

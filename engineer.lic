custom_require.call(%w[common common-crafting common-items common-money common-travel drinfomon])

class Engineer
  def initialize
    arg_definitions =
      [
        [
          { name: 'material', regex: /\w+/, description: 'Material to be used in crafting' },
          { name: 'recipe_name', display: 'Recipe Name', regex: /^[A-z\s\-\']+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
          { name: 'stamp', regex: /^stamp/i, optional: true, description: 'To stamp completed items' },
          { name: 'here', regex: /^here/i, optional: true, description: 'Force script to craft in the room you are currently in, skips consumables checks' },
          { name: 'laminate', regex: /^laminate/i, optional: true, description: 'Reinforces key components of a bow or crossbow to boost durability' },
          { name: 'cable', regex: /^cable/i, optional: true, description: 'Applies cable-backing to bows/crossbows, increasing draw strength and probably RT' },
          { name: 'lighten', regex: /^lighten/i, optional: true, description: 'Lightens crafted bows/crossbows, reducing draw strength and possibly RT' }
        ]
      ]

    args = parse_args(arg_definitions)

    settings = get_settings
    @bag = settings.crafting_container
    @bag_items = settings.crafting_items_in_container
    @belt = settings.engineering_belt
    @type_to_script = { 'shaping' => 'shape', 'carving' => 'carve', 'tinkering' => 'tinker' }
    # This line below is looking to find the item we wish to make among our recipes, and saves the category in which it found a match (type)
    type = ['shaping', 'carving', 'tinkering'].find { |x| get_data('recipes')[x].any? { |y| y['name'] =~ /#{args.recipe_name}/i } }
    # Taking the above information, we are fetching the recipe information for that item from our recipes. This is necessary only in scripts like this, since
    # this script can accept the name of the item only in order to craft it. having only the name, we have to work backwards, then forwards.
    recipes = get_data('recipes')[type].select { |x| x['name'] =~ /#{args.recipe_name}/i }
    hometown = settings.crafting_hometown[type] || settings.crafting_hometown || settings.hometown
    @craft_data = get_data('crafting')[type.sub('tinkering', 'shaping')][hometown]
    recipe = DRCC.recipe_lookup(recipes, args.recipe_name)
    parts = recipe['part'] || []
    enhance = [args.laminate, args.cable, args.lighten].compact
    enhance.each do |enh|
      if enh == 'cable'
        parts << 'leather strips'
      elsif enh == 'laminate'
        parts << 'bone backer'
      end
    end

    unless args.here || Script.running?('workorders')
      total_cost = DRCC.crafting_cost(recipe, hometown, parts, 1, false)
      DRCM.ensure_copper_on_hand(total_cost, settings)
    end

    craft_items(args.material, type, recipe, parts.uniq, args.stamp, enhance, args.here, hometown)
  end

  def craft_items(material, type, recipe, parts, stamp, enhance, stay, hometown)
    buy_parts(parts) unless stay
    DRCC.find_shaping_room(hometown) unless stay
    DRC.wait_for_script_to_complete(@type_to_script[type], [recipe['chapter'], recipe['name'], material, recipe['noun'], stay ? 'skip' : nil])
    stamp_item(recipe['noun']) if stamp && !get_settings.mark_crafted_goods
    enhance.each { |task| DRC.wait_for_script_to_complete(@type_to_script[type], [task, recipe['noun'], stay ? 'skip' : nil]) }
    dispose_parts(parts) unless stay
  end

  def buy_parts(parts)
    parts_room = @craft_data['part-room']
    DRCI.stow_hands
    parts.each do |part|
      DRCT.buy_item(parts_room, part)
      DRCC.stow_crafting_item(part, @bag, @belt)
    end
  end

  def stamp_item(noun)
    DRCC.get_crafting_item('stamp', @bag, @bag_items, @belt)
    DRC.bput("mark my #{noun} with my stamp", /carefully hammer the.*stamp/, /You cannot figure out how to do that/, /too badly damaged/)
    DRCC.stow_crafting_item('stamp', @bag, @belt)
  end

  def dispose_parts(parts)
    parts.each do |part|
      DRCT.dispose(part, @craft_data['trash-room'])
    end
  end
end

Engineer.new

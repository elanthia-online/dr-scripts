=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#sigilharvest
=end

#patterns which signal that the sigil hunting process is proceeding successfully but a sigil has not yet been found
@@search_patterns = [/^You clear your mind/,
          /^Left and right you crane your head/,
          /^Back and forth you walk/,
          /^You close your eyes and turn to a random direction/,
          /^You scour the area looking for hints of sigil lore patterned upon the ground/,
          /^Whorls of dust upon the ground catch your eye/,
          /^The sky holds your interest/,
          /^The ceiling holds your interest/
          ]

#patterns that signal a sigil has been detected   
@@found_patterns = /After much scrutiny|Through the seemingly mundane lighting|Almost obscured by the surroundings|Subtleties in the surroundings|The area contains signs of a sigil|In your mind's eye|Sorting through the imagery/

#patterns for detecting the type of sigil found
@@sigil_patterns = /(abolition|congruence|induction|permutation|rarefaction|antipode|ascension|clarification|decay|evolution|integration|metamorphosis|nurture|paradox|unity) sigil/

#patterns that detect when sigil improvement has failed
@@mishaps = /Chills creep down your spine|About the area you wander|A sudden sneeze|You lose track|You prepare yourself for continued exertion|You are too distracted/

#arbitrary numerical values for minigame resource costs
@@action_cost = { "taxing" => 1, "disrupting" => 2, "destroying" => 3 }

#arbitrary numerical values for ranking difficulty of improvement action in the minigame
@@action_difficulty = { "trivial" => 1, "straightforward" => 2, "challenging" => 3, "difficult" => 4, "formidable" => 5 }

custom_require.call(%w[common common-crafting common-items common-travel common-arcana common-money])

class SigilHarvest
  
  def initialize
    @sigil_list = ['abolition','congruence','induction','permutation','rarefaction', 'antipode','ascension','clarification','decay','evolution','integration','metamorphosis','nurture','paradox','unity']

    arg_definitions = [
      [
        { name: 'city', regex: /\w+/, description: 'Region to find sigils in: Shard, Crossing, Riverhaven' }, 
        { name: 'sigil', regex: /\w+/, description: "Type of sigil to harvest OR enter 'random' to target a random sigil." }, 
        { name: 'precision', regex: /\d+/, description: 'Precision target.' },
        { name: 'roomcap', regex: /[\w\d]+/i, optional: true, description: "Max number of rooms to harvest OR choose 'loop' to continuously harvest sigils" },
        { name: 'debug', regex: /debug/i, optional: true, description: 'Provides extra debug information while the script runs' }
      ]
    ]
    
    @settings = get_settings
    @burin = @settings.enchanting_tools.find { |item| /burin/ =~ item } || 'burin'
    @bag = @settings.crafting_container
    @belt = @settings.enchanting_belt
    @bag_items = @settings.crafting_items_in_container
    @danger_rooms = @settings.sigil_harvest_settings['danger_rooms']
    @stock_scrolls = @settings.sigil_harvest_settings['blank_scrolls']
    @season = get_season
    @data = get_data('sigils')
    #used to store rooms that enemies are detected in so the player can be alerted when the script is finished
    @enemy_rooms = [] 

    @args = parse_args(arg_definitions)
    @debug = @args.debug
    
    #sigil harvesting uses the same sorts of buffs that other gathering skills use i.e. outdoorsmanship and perception
    DRCA.do_buffs(@settings, 'outdoors') 
    
    Flags.add('sigilharvest-found', @@found_patterns) #flag for when any sigil has been found
    Flags.add('sigilharvest-type', @@sigil_patterns) #stores the type of sigil that was found
    Flags.add('sigilharvest-noactions', /You are unable to perceive any opportunities for improving the sigil/)
    
    DRC.message("Finding #{@args.sigil.downcase} sigils near #{@args.city.capitalize}")

     #store the current room so we can walk back here later
    startroom = Room.current.id

    #check @settings and ensure we have enough scrolls on hand for harvesting
    get_scrolls 

    #contains main loop
    find_sigils(@args.city.capitalize, @args.sigil.downcase) 

    #return to starting spot before exiting
    DRCT.walk_to(startroom)
    
    #alert the player if enemies were detected in any rooms. YAML is not automatically updated to prevent things like invasions from polluting the data
    DRC.message("Enemies were encountered in the following rooms: #{@enemy_rooms}") if @enemy_rooms.length > 0
    DRC.message("Consider adding them to danger_rooms under sigil_harvest_settings in your YAML.") if @enemy_rooms.length > 0

  end #initialize

  def find_sigils(city, sigil)

    #this loop only occurs when roomcap is set to 'loop', else it runs the code only once
    loop do
      #if 'random' is selected, choose a random sigil from @sigil_list
      sigil = @sigil_list.sample if @args.sigil.downcase == 'random'

      #get the list of rooms containing the desired sigil from base-sigils
      roomlist = @data.SigilInfo.dig(city, sigil, @season)
      DRC.message("Harvesting #{sigil} sigils from #{roomlist.length} known rooms in the vicinity of #{@args.city.capitalize}.") if @args.debug

      #track how many rooms have been harvested
      num_rooms = 0 

      #main loop
      roomlist.each do |room|
        #check setup YAML for list of player-specified rooms to avoid
        next if @danger_rooms.include?(room)

        #check buffs before harvesting each room
        DRCA.do_buffs(@settings, 'outdoors') 

        #head to the room with the desired sigil
        DRCT.walk_to(room)

        #increment only if the sigil hunt in the room was uninterrupted
        num_rooms += 1 if harvest_sigil(sigil)

        DRC.message("Number of rooms harvested: #{num_rooms}") if @args.debug

        #If we've successfully searched the desired number of rooms break out of the loop, otherwise keep going
        (num_rooms >= @args.roomcap.to_i ? break : next) if /\d+/ =~ @args.roomcap
      end #each

      #do not loop unless explicitly delcared in args
      break if @args.roomcap.downcase != 'loop'
    end #loop
  end

  def harvest_sigil(sigil)
    #sigil finding loop
    while true
      #this case specifically only looks for bad outcomes, the desired outcomes are captured by the flags
      case DRC.bput('perc sigil', @@found_patterns, @@search_patterns, /You are too distracted/, /You recall|Having recently been searched|You are already/)

      #this response should only occur if any enemy has engaged the player, skip room and move on
      when /You are too distracted/
        DRC.message("Enemies detected. Consider adding room #{Room.current.id} to personal no-go list in your character-setup YAML.")
        @enemy_rooms.push(Room.current.id)
        return false
      
      #room searched too recently 'return false' to skip the room and move on
      when /You recall|Having recently been searched|You are already/
        DRC.message('This room does not contain the desired sigil or has been searched too recently.') if @args.debug
        return false
      end #case
      waitrt?

      #If a sigil has been found store the sigil type captured by the -type flag, then compare to see if it's the target sigil
      if Flags['sigilharvest-found']
        flagstring = Flags['sigilharvest-type'].to_s.gsub(/ sigil/, '')
        DRC.message("Sigil found: #{flagstring}") if @args.debug
        Flags.reset('sigilharvest-found')
        Flags.reset('sigilharvest-type')
        sigil_match = true if flagstring.downcase == sigil
      else
        pause 0.2
      end #if
      
      #break the loop if the desired sigil was found (if base-sigils has incorrect data this will result in an infinite loop)
      if sigil_match
        break
      end #if
    end #while

    #kick off the improvement loop by capturing the current stats of the found sigil with the 'improve' verb, i.e. perc sigil improve
    if sigil_info('improve')

      #main sigil improvement loop
      while improve_sigil(@args.precision.to_i)
        DRC.message("Current Precision: #{@sigil_precision} | Target Precision: #{@args.precision} | Danger Modifier: #{(@danger_lvl * 0.5).floor()}") if @args.debug
      end #while
    else
      return false
    end

    return true

  end #harvest_sigil
  
  def check_sigil(sigil)
    DRC.message('Checking if this is the desired sigil') if @args.debug

    #comparing found sigil to the desired sigil
    /\) (\w+) sigil/ =~ DRC.bput('perc sigil info', /^You have perceived an? \w+ \(Clarity:\d+\) (\w+) sigil comprised of broad strokes \(Precision:\d+\) in the area.*/)
    @sigil_type = $1
    DRC.message("Sigil type found: #{@sigil_type} - Sigil target: #{sigil}") if @args.debug

    #if the desired sigil has been found return true to break out of the sigil hunting loop and enter the sigil improvement process, else return false to keep using 'perc sigil' to uncover the secondary sigil
    if @sigil_type == sigil
      DRC.message("Desired sigil found! #{@sigil_type}") if @args.debug
      return true
    else
      DRC.message("This is not the sigil we are looking for.")  if @args.debug #continue loop
      return false
    end #case  
  end #check_sigil
  
  def improve_sigil(precision)
    waitrt?
    
    #declare empty hash to store the possible actions we might take
    sigil_action = { }
    
    #check each improvement for which minigame stat it drains
    @sigil_improvement.each do |x|
      case x['resource']
      when 'sanity'
        DRC.message('Contesting Sanity') if @args.debug
        contest_stat = @sanity_lvl.to_i
      when 'resolve'
        DRC.message('Contesting Resolve') if @args.debug
        contest_stat = @resolve_lvl.to_i
      when 'focus'
        DRC.message('Contesting Focus') if @args.debug
        contest_stat = @focus_lvl.to_i
      end
      
      DRC.message("Aspect: #{x['aspect']} -> Precision Comparison #{@sigil_precision}|#{precision} -> Risk|Stat: #{x['risk']}|#{contest_stat}") if @args.debug

      #This is somewhat arbitrary, if a stat gets knocked to a low value early on, the script will skip that improvement based on the values in @@action_cost and @@action_difficulty. 
      #As Danger accumulates the script takes more risks to try to boost Precision before the auto-fail from high Danger.
      if x['aspect'] == 'precision' && @sigil_precision <= precision && (x['risk'] - (@danger_lvl * 0.5).floor()) < contest_stat
        DRC.message("Potential precision upgrade found... ") if @args.debug
        if sigil_action.key?("difficulty")
          sigil_action['risk'] > x['risk'] ? sigil_action = x : DRC.message('Previous precision verb has less risk, keeping old values') if @args.debug
        else
          sigil_action = x
          DRC.message('Storing new verb for precision improvement') if @args.debug
        end #if
      end #if
    end #do
    
    #if data is stored in the 'difficulty' key perform the chosen verb, otherwise perform an 'improve' to get a new list of actions
    #if either fails, return false to signify the process has failed and end the improvement loop
    if sigil_action.key?("difficulty")
      return false if !(sigil_info(sigil_action['verb']))
    else
      return false if !(sigil_info('improve'))
    end #if
    
    #if the target precision has been reached scribe the sigils and then return false to break the improvement loop, else return true to continue the improvement process
    if @sigil_precision >= precision
      DRC.message("Current Precision: #{@sigil_precision} | Target Precision: #{@args.precision}") if @args.debug
      scribe_sigils
      return false
    else
      DRC.message("Current Precision: #{@sigil_precision} | Target Precision: #{@args.precision}") if @args.debug
      return true
    end #if
    DRC.message("Exiting sigil improvement") if @args.debug
  end #improve_sigil
  
  def sigil_info(command)

    #Detect whether the command resulted in failed harvest attempt, if not, capture the sigils new stats
    case results = DRC.bput("perc sigil #{command}", /^You have perceived a.*/, @@mishaps)
    when @@mishaps
      DRC.message('Sigil harvesting failed') if @args.debug
      return false
    else
      /\(Clarity:(\d+)\).*\(Precision:(\d+)\).*/ =~ results
      @sigil_clarity = $1.to_i
      @sigil_precision = $2.to_i
    end #case
    

    improvements = []
    @sigil_improvement = []

    #If there are no more improvement actions available return true after clearing the improvement arrays. This will cause improve_sigil to run with empty arrays and generate another 'perc sigil improve' to generate fresh actions.
    if Flags['sigilharvest-noactions']
      Flags.reset('sigilharvest-noactions')
      DRC.message("No actions remain. Generating new actions...") if @args.debug
      return true
      #sigil_info('improve') #testing out a recursive function here. The more I think about how this is set up the more I think this might be the best solution.
    end

    #loop through the list of possible actions and store them in an array
    DRC.message("Entering improvement capture loop...") if @args.debug
    while true
      improvements.push(waitfor /^\.|^You also take the opportunity to take stock of your mental health\.|^You are unable to perceive any opportunities for improving the sigil\./)

      #if the most recent addition to the array is not an improvement action, pop it out of the array and break the loop
      if improvements.last =~ /^You also take the opportunity to take stock of your mental health\.|^You are unable to perceive any opportunities for improving the sigil\./
        improvements.pop
        break
      end #if
    end #while
    
    index = 0

    #loop through the each improvement and capture information about what it modifies and how risky/expensive it is
    improvements.each do |x|
      /^\.\.\.a (\w+), (\w+) (\w+) (\w+).*(your|sigil) (\w+)\.?$/ =~ x
      @sigil_improvement[index] = {
      "difficulty" => @@action_difficulty[$1],
      "resource" => $2,
      "impact" => @@action_cost[$3],
      "verb" => $4,
      "target" => $5,
      "aspect" => $6,
      "risk" => (@@action_difficulty[$1].to_i + @@action_cost[$3].to_i) #choose riskier actions once Danger begins to accumulate
      }
      index += 1
    end #each
    
    #captures raw text data for the various minigame stats
    danger_str = waitfor "Danger:"
    sanity_str = waitfor "Sanity:"
    resolve_str = waitfor "Resolve:"
    focus_str = waitfor "Focus:"
    
    #convert raw text to integers
    @danger_lvl = danger_str.split('*').length - 1
    @sanity_lvl = sanity_str.split('*').length - 1
    @resolve_lvl = resolve_str.split('*').length - 1
    @focus_lvl = focus_str.split('*').length - 1

    return true
  end #sigil_info
  
  #Get those sigils!
  def scribe_sigils
    #clear hands and then get burin and scrolls for scribing
    DRCI.stow_hands
    DRCI.get_item?('blank scrolls')
    DRCC.get_crafting_item(@burin, @bag, @bag_items, @belt)

    #scribing loop, keeps scribing/stowing sigils until it detects that the sigil is no longer present
    while true
      case DRC.bput('scribe sigil', /You carefully/, /You should/)
      when /You carefully/
        DRCI.stow_item?('sigil-scroll')
      DRC.bput('get blank scroll', /You pick/, /You get/)
      when /You should/
        break
      end #case
    end #while

    #put away buring/blanks
    DRCC.stow_crafting_item(@burin, @bag, @belt)
    DRCI.stow_item?('blank scroll')

    #stow feet just in case
    fput('stow feet')

    #check our stock of scrolls since we just used some
    get_scrolls
  end #scribe_sigils

  #returns the current seasonw which determines what room list to pull from base-sigils
  def get_season
    /^It is currently (\w+) and it is.*$/ =~ DRC.bput('time', /^It is currently.*/)
    return $1.downcase
  end #get_season

  #check stock of scrolls, get money and buy scrolls if it's below default threshold or minimum stock set in player's YAML
  def get_scrolls
    #default minimum is 25, otherwise use player-defined value from YAML
    @stock_scrolls ? target_scrolls = @stock_scrolls : target_scrolls = 25

    #Count scrolls and store number in a variable, set variable to 0 if scrolls are not found
    if /^There (?:are|is) (.*) scrolls? left for use with crafting\.$/ =~ DRC.bput("count my blank scrolls", 'I could not find', /^There are .* scrolls left for use with crafting\.$/)
      num_scrolls = DRC.text2num($1)
    else
      num_scrolls = 0
    end

    #if we have enough scrolls exit the function
    return if num_scrolls >= target_scrolls

    #determine room number and amount of coppers needed per order of scrolls
    case @args.city
    when /crossing/i
      scroll_room = 14754
      scroll_price = 125 #kronars
    when /riverhaven/i
      scroll_room = 14770
      scroll_price = 100 #lirums
    when /shard/i
      scroll_room = 14772
      scroll_price = 90 #dokora
    end

    #ensure hands are clear
    DRCI.stow_hands

    #blank scrolls come in a stack of 25, divide the difference by 25 and ceil to determine the number of times we need to order to meet or exceed stock target
    num_to_order = ((target_scrolls - num_scrolls) / 25).ceil()

    #calculate the amount of money needed
    coppers_needed = num_to_order * scroll_price

    #go to bank if insufficient funds on hand
    DRCM.ensure_copper_on_hand(coppers_needed, @settings)

    #order repeatedly and combine
    (1..num_to_order).each do 
      DRCT.order_item(scroll_room, 8)
      DRC.bput('combine', /^You combine|^You must/)
    end

    #if we had more scrolls in containers get them and combine them also
    DRC.bput('combine', /^You combine|^You must/) if DRCI.get_item?('blank scroll', @bag)

    #put away the scrolls
    DRCI.stow_item?('blank scroll')
  end
  
end #SigilHarvest

before_dying do
  Flags.delete('sigilharvest-found')
  Flags.delete('sigilharvest-type')
  Flags.delete('sigilharvest-noactions')
end

SigilHarvest.new

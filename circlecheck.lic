=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#circlecheck
  Circle Requirements are matched off of Elanthipedia
=end

custom_require.call(%w[common])

$Skills = [
  { name: 'Instinct', type: 'Survival' },
  { name: 'Evasion', type: 'Survival' },
  { name: 'Athletics', type: 'Survival' },
  { name: 'Stealth', type: 'Survival' },
  { name: 'Perception', type: 'Survival' },
  { name: 'Locksmithing', type: 'Survival' },
  { name: 'First Aid', type: 'Survival' },
  { name: 'Skinning', type: 'Survival' },
  { name: 'Outdoorsmanship', type: 'Survival' },
  { name: 'Thievery', type: 'Survival' },
  { name: 'Backstab', type: 'Survival' },
  { name: 'Thanatology', type: 'Survival' },

  { name: 'Forging', type: 'Lore' },
  { name: 'Outfitting', type: 'Lore' },
  { name: 'Engineering', type: 'Lore' },
  { name: 'Alchemy', type: 'Lore' },
  { name: 'Scholarship', type: 'Lore' },
  { name: 'Appraisal', type: 'Lore' },
  { name: 'Tactics', type: 'Lore' },
  { name: 'Mechanical Lore', type: 'Lore' },
  { name: 'Performance', type: 'Lore' },
  { name: 'Empathy', type: 'Lore' },
  { name: 'Enchanting', type: 'Lore' },
  { name: 'Trading', type: 'Lore' },

  { name: 'Attunement', type: 'Magic' },
  { name: 'Arcana', type: 'Magic' },
  { name: 'Targeted Magic', type: 'Magic' },
  { name: 'Debilitation', type: 'Magic' },
  { name: 'Warding', type: 'Magic' },
  { name: 'Augmentation', type: 'Magic' },
  { name: 'Utility', type: 'Magic' },
  { name: 'Sorcery', type: 'Magic' },
  { name: 'Summoning', type: 'Magic' },
  { name: 'Astrology', type: 'Magic' },
  { name: 'Theurgy', type: 'Magic' },
  { name: 'Inner Magic', type: 'Magic', generic: true },
  { name: 'Inner Fire', type: 'Magic', generic: true },

  { name: 'Melee Mastery', type: 'Mastery' },
  { name: 'Missile Mastery', type: 'Mastery' },

  { name: 'Parry Ability', type: 'Weapon', generic: true },
  { name: 'Small Edged', type: 'Weapon' },
  { name: 'Large Edged', type: 'Weapon' },
  { name: 'Twohanded Edged', type: 'Weapon' },
  { name: 'Twohanded Blunt', type: 'Weapon' },
  { name: 'Small Blunt', type: 'Weapon' },
  { name: 'Large Blunt', type: 'Weapon' },
  { name: 'Bow', type: 'Weapon' },
  { name: 'Slings', type: 'Weapon' },
  { name: 'Crossbow', type: 'Weapon' },
  { name: 'Polearms', type: 'Weapon' },
  { name: 'Heavy Thrown', type: 'Weapon' },
  { name: 'Offhand Weapon', type: 'Weapon', generic: true },
  { name: 'Brawling', type: 'Weapon' },
  { name: 'Light Thrown', type: 'Weapon' },
  { name: 'Staves', type: 'Weapon' },
  { name: 'Expertise', type: 'Weapon' },

  { name: 'Defending', type: 'Armor', generic: true },
  { name: 'Shield Usage', type: 'Armor' },
  { name: 'Light Armor', type: 'Armor' },
  { name: 'Chain Armor', type: 'Armor' },
  { name: 'Brigandine', type: 'Armor' },
  { name: 'Plate Armor', type: 'Armor' },
  { name: 'Conviction', type: 'Armor' }
]

$GuildReqs = {
  'Empath'       => {
    specific_reqs: {
      'Empathy'         => [[10, 4], [30, 5], [100, 6], [150, 7], [200, 15]],
      'Scholarship'     => [[30, 3], [70, 4], [150, 5], [200, 13]],
      'First Aid'       => [[10, 2], [100, 3], [150, 4], [200, 10]],
      'Outdoorsmanship' => [[30, 1], [150, 2], [200, 5]]
    },
    general_reqs: {
      'Lore'     => [
        [[30, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [70, 3], [150, 4], [200, 10]],
        [[30, 2], [100, 3], [150, 4], [200, 10]]
      ],
      'Magic'    => [
        [[30, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [70, 3], [150, 4], [200, 10]],
        [[10, 0], [30, 2], [100, 3], [150, 4], [200, 10]],
        [[30, 0], [100, 3], [150, 4], [200, 10]]
      ],
      'Survival' => [
        [[10, 1], [70, 2], [100, 3], [150, 4], [200, 10]],
        [[10, 1], [70, 2], [100, 3], [150, 4], [200, 10]],
        [[30, 1], [70, 2], [150, 3], [200, 8]]
      ]
    },
    hard_reqs: ['Scholarship', 'Empathy', 'First Aid'],
    restricted: ['Sorcery', 'Thievery']
  },
  'Thief'        => {
    specific_reqs: {
      'Parry Ability' => [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]],
      'Stealth'       => [[10, 2], [30, 2], [70, 3], [100, 3], [150, 4], [200, 10]],
      'Thievery'      => [[10, 2], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]],
      'Inner Magic'   => [[10, 1], [30, 2], [100, 3], [150, 4], [200, 10]]
    },
    general_reqs: {
      'Armor'    => [
        [[70, 2], [150, 3], [200, 8]]
      ],
      'Weapon'   => [
        [[30, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 1], [30, 2], [100, 3], [150, 4], [200, 10]]
      ],
      'Lore'     => [
        [[10, 1], [30, 2], [100, 3], [150, 4], [200, 10]],
        [[10, 1], [70, 2], [150, 3], [200, 8]],
        [[30, 1], [70, 2], [100, 2], [150, 3], [200, 8]]
      ],
      'Magic'    => [
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 10]],
        [[10, 0], [30, 0], [70, 2], [100, 2], [150, 4], [200, 8]]
      ],
      'Survival' => [
        [[10, 4], [30, 4], [70, 5], [100, 5], [150, 6], [200, 15]],
        [[10, 4], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
        [[10, 3], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
        [[10, 3], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],

        [[10, 3], [30, 4], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 3], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]]
      ]
    },
    restricted: ['Offhand Weapon']
  },
  'Ranger'       => {
    specific_reqs: {
      'Parry Ability' => [[10, 2], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]],
      'Defending'     => [[10, 1], [30, 2], [70, 2], [100, 3], [150, 4], [200, 10]],
      'Instinct'      => [[10, 2], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]]
    },
    general_reqs: {
      'Lore'     => [
        [[10, 1], [30, 1], [70, 2], [100, 2], [150, 3], [200, 8]],
        [[10, 0], [30, 1], [70, 1], [100, 2], [150, 2], [200, 5]]
      ],
      'Magic'    => [
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]],
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]],
        [[10, 1], [30, 1], [70, 2], [100, 2], [150, 3], [200, 8]]
      ],
      'Survival' => [
        [[10, 4], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
        [[10, 4], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
        [[10, 3], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
        [[10, 3], [30, 4], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 3], [30, 4], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]],
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]],
        [[10, 2], [30, 2], [70, 3], [100, 3], [150, 4], [200, 10]]
      ],
      'Armor'    => [
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 0], [30, 1], [70, 2], [100, 3], [150, 3], [200, 8]]
      ],
      'Weapon'   => [
        [[10, 3], [30, 3], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 1], [30, 2], [70, 3], [100, 3], [150, 4], [200, 10]]
      ]

    },
    restricted: ['Sorcery', 'Offhand Weapon']
  },
  'Warrior Mage' => {
    specific_reqs: {
      'Parry Ability'  => [[10, 2], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]],
      'Defending'      => [[10, 1], [30, 1], [70, 2], [100, 2], [150, 3], [200, 8]],
      'Summoning'      => [[10, 3], [30, 4], [70, 5], [100, 5], [150, 5], [200, 13]],
      'Targeted Magic' => [[10, 4], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
      'Scholarship'    => [[10, 1], [30, 1], [70, 2], [100, 2], [150, 3], [200, 8]]
    },
    general_reqs: {
      'Lore'     => [
        [[10, 2], [30, 2], [70, 3], [100, 3], [150, 4], [200, 10]],
        [[10, 2], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]],
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]]
      ],
      'Magic'    => [
        [[10, 4], [30, 4], [70, 5], [100, 5], [150, 6], [200, 15]],
        [[10, 4], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
        [[10, 3], [30, 3], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 0], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 0], [30, 0], [70, 3], [100, 4], [150, 5], [200, 13]]
      ],
      'Survival' => [
        [[10, 1], [30, 1], [70, 2], [100, 2], [150, 3], [200, 8]],
        [[10, 1], [30, 1], [70, 2], [100, 2], [150, 3], [200, 8]],
        [[10, 1], [30, 1], [70, 1], [100, 2], [150, 2], [200, 5]],
        [[10, 1], [30, 1], [70, 1], [100, 2], [150, 2], [200, 5]]
      ],
      'Armor'    => [
        [[10, 2], [30, 2], [70, 3], [100, 3], [150, 4], [200, 10]]
      ],
      'Weapon'   => [
        [[10, 3], [30, 4], [70, 4], [100, 5], [150, 5], [200, 13]],
        [[10, 0], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]],
        [[10, 0], [30, 0], [70, 2], [100, 3], [150, 4], [200, 10]]
      ]

    },
    hard_reqs: ['Summoning'],
    restricted: ['Sorcery', 'Thievery', 'Offhand Weapon']
  },
  'Paladin'      => {
    specific_reqs: {
      'Conviction'    => [[10, 3], [70, 4], [150, 5], [200, 13]],
      'Defending'     => [[30, 3], [100, 4], [150, 5], [200, 13]],
      'Shield Usage'  => [[30, 2], [100, 3], [150, 4], [200, 10]],
      'Parry Ability' => [[30, 3], [100, 4], [150, 5], [200, 13]],
      'Evasion'       => [[10, 2], [70, 3], [150, 4], [200, 10]],
      'Scholarship'   => [[10, 1], [70, 2], [150, 3], [200, 8]],
      'Tactics'       => [[10, 1], [30, 2], [100, 3], [150, 4], [200, 10]]
    },
    general_reqs: {
      'Armor'    => [
        [[10, 4], [100, 5], [150, 6], [200, 15]],
        [[10, 2], [70, 3], [100, 4], [150, 5], [200, 13]]
      ],
      'Magic'    => [
        [[10, 1], [70, 2], [150, 3], [200, 8]],
        [[30, 1], [100, 2], [150, 3], [200, 8]],
        [[70, 1], [150, 2], [200, 5]]
      ],
      'Lore'     => [
        [[10, 2], [70, 3], [150, 4], [200, 10]],
        [[10, 1], [30, 2], [100, 3], [150, 4], [200, 10]],
        [[30, 1], [100, 2], [150, 3], [200, 8]]
      ],
      'Survival' => [
        [[10, 1], [70, 2], [150, 3], [200, 8]],
        [[30, 1], [100, 2], [150, 3], [200, 8]],
        [[70, 1], [150, 2], [200, 5]],
        [[70, 1], [150, 2], [200, 5]]
      ],
      'Weapon'   => [
        [[10, 3], [70, 4], [150, 5], [200, 13]],
        [[10, 0], [30, 2], [70, 3], [150, 4], [200, 10]]
      ]
    },
    hard_reqs: ['Conviction', 'Evasion', 'Parry Ability', 'Defending'],
    restricted: ['Sorcery', 'Thievery', 'Offhand Weapon']
  },
  'Cleric'       => {
    specific_reqs: {
      'Parry Ability' => [[10, 2], [30, 3], [70, 3], [100, 3], [150, 4], [200, 10]],
      'Shield Usage'  => [[10, 1], [30, 2], [70, 2], [100, 3], [150, 4], [200, 10]],
      'Theurgy'       => [[10, 3], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
      'Attunement'    => [[10, 2], [30, 2], [70, 3], [100, 3], [150, 4], [200, 10]]
    },
    general_reqs: {
      'Lore'     => [
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 2], [70, 3], [100, 3], [150, 4], [200, 10]],
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 10]],
        [[10, 0], [30, 0], [70, 2], [100, 3], [150, 3], [200, 8]]
      ],
      'Magic'    => [
        [[10, 4], [30, 4], [70, 5], [100, 5], [150, 6], [200, 15]],
        [[10, 4], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
        [[10, 3], [30, 3], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 0], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 0], [30, 0], [70, 3], [100, 4], [150, 5], [200, 13]]
      ],
      'Survival' => [
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]],
        [[10, 1], [30, 1], [70, 2], [100, 2], [150, 3], [200, 8]],
        [[10, 1], [30, 1], [70, 1], [100, 2], [150, 2], [200, 5]],
        [[10, 1], [30, 1], [70, 1], [100, 2], [150, 2], [200, 5]]
      ],
      'Armor'    => [
        [[10, 2], [30, 2], [70, 3], [100, 3], [150, 4], [200, 10]]
      ],
      'Weapon'   => [
        [[10, 3], [30, 3], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 0], [30, 0], [70, 2], [100, 2], [150, 3], [200, 8]]
      ]

    },
    hard_reqs: ['Theurgy', 'Parry', 'Shield Usage'],
    restricted: ['Sorcery', 'Thievery', 'Offhand Weapon']
  },

  'Barbarian'    => {
    specific_reqs: {
      'Parry Ability' => [[10, 4], [30, 4], [70, 4], [100, 4], [150, 5], [200, 13]],
      'Expertise'     => [[10, 4], [30, 5], [70, 5], [100, 5], [150, 6], [200, 15]],
      'Tactics'       => [[10, 1], [30, 1], [70, 2], [100, 2], [150, 3], [200, 8]],
      'Inner Fire'    => [[10, 1], [30, 2], [70, 3], [100, 3], [150, 3], [200, 8]],
      'Evasion'       => [[10, 3], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]]
    },
    general_reqs: {
      'Lore'     => [
        [[10, 1], [30, 1], [70, 2], [100, 2], [150, 3], [200, 8]]
      ],
      'Magic'    => [
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]],
        [[10, 0], [30, 0], [70, 2], [100, 2], [150, 3], [200, 8]]
      ],
      'Survival' => [
        [[10, 2], [30, 2], [70, 3], [100, 3], [150, 3], [200, 8]],
        [[10, 2], [30, 2], [70, 3], [100, 3], [150, 3], [200, 8]],
        [[10, 2], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]],
        [[10, 1], [30, 1], [70, 2], [100, 2], [150, 2], [200, 5]]
      ],
      'Armor'    => [
        [[10, 3], [30, 4], [70, 4], [100, 5], [150, 6], [200, 13]],
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 4], [200, 10]]
      ],
      'Weapon'   => [
        [[10, 4], [30, 5], [70, 6], [100, 6], [150, 6], [200, 15]],
        [[10, 4], [30, 5], [70, 6], [100, 6], [150, 6], [200, 15]],
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 4], [200, 10]]
      ],
      'Mastery'  => [
        [[10, 4], [30, 5], [70, 6], [100, 6], [150, 6], [200, 15]]
      ]

    },
    hard_reqs: ['Evasion', 'Parry Ability', 'Expertise', 'Inner Fire', 'Tactics'],
    restricted: ['Sorcery', 'Thievery', 'Targeted Magic', 'Offhand Weapon']
  },

  'Necromancer'  => {
    specific_reqs: {
      'Thanatology'    => [[10, 3], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
      'Small Edged'    => [[10, 1], [30, 2], [70, 2], [100, 2], [150, 2], [200, 5]],
      'Targeted Magic' => [[10, 2], [30, 2], [70, 3], [100, 4], [150, 5], [200, 13]]
    },
    general_reqs: {
      'Lore'     => [
        [[10, 2], [30, 2], [70, 3], [100, 3], [150, 3], [200, 8]],
        [[10, 2], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]]
      ],
      'Magic'    => [
        [[10, 3], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
        [[10, 3], [30, 3], [70, 4], [100, 5], [150, 6], [200, 15]],
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 0], [30, 0], [70, 3], [100, 4], [150, 5], [200, 13]]
      ],
      'Survival' => [
        [[10, 4], [30, 4], [70, 5], [100, 5], [150, 6], [200, 15]],
        [[10, 4], [30, 4], [70, 5], [100, 5], [150, 6], [200, 15]],
        [[10, 3], [30, 4], [70, 4], [100, 5], [150, 5], [200, 13]],
        [[10, 3], [30, 4], [70, 4], [100, 5], [150, 5], [200, 13]],
        [[10, 3], [30, 4], [70, 4], [100, 5], [150, 5], [200, 13]],
        [[10, 3], [30, 3], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]]
      ],
      'Armor'    => [
        [[10, 1], [30, 2], [70, 2], [100, 2], [150, 3], [200, 8]]
      ],
      'Weapon'   => []

    },
    hard_reqs: ['Thanatology']
  },

  'Moon Mage'    => {
    specific_reqs: {
      'Astrology'   => [[10, 3], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
      'Scholarship' => [[10, 3], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]]
    },
    general_reqs: {
      'Lore'     => [
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 2], [70, 3], [100, 3], [150, 4], [200, 10]],
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]]
      ],
      'Magic'    => [
        [[10, 4], [30, 4], [70, 5], [100, 6], [150, 7], [200, 18]],
        [[10, 4], [30, 4], [70, 4], [100, 5], [150, 6], [200, 15]],
        [[10, 3], [30, 4], [70, 4], [100, 5], [150, 5], [200, 13]],
        [[10, 2], [30, 3], [70, 4], [100, 5], [150, 5], [200, 13]],
        [[10, 0], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 0], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]]
      ],
      'Survival' => [
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]],
        [[10, 2], [30, 2], [70, 3], [100, 3], [150, 4], [200, 10]],
        [[10, 2], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]],
        [[10, 0], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]]
      ],
      'Armor'    => [],
      'Weapon'   => []
    },
    hard_reqs: %w[Scholarship Astrology],
    restricted: ['Thievery']
  },

  'Bard'         => {
    specific_reqs: {
      'Performance'   => [[10, 4], [30, 4], [70, 5], [100, 5], [150, 6], [200, 15]],
      'Parry Ability' => [[10, 2], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
      'Tactics'       => [[10, 2], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]]
    },
    general_reqs: {
      'Lore'     => [
        [[10, 3], [30, 3], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 3], [30, 3], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 2], [70, 3], [100, 3], [150, 4], [200, 10]]
      ],
      'Magic'    => [
        [[10, 3], [30, 3], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 2], [70, 3], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 2], [70, 3], [100, 3], [150, 4], [200, 10]],
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 4], [200, 10]],
        [[10, 0], [30, 0], [70, 2], [100, 3], [150, 3], [200, 8]]
      ],
      'Survival' => [
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 4], [200, 10]],
        [[10, 1], [30, 1], [70, 2], [100, 2], [150, 3], [200, 8]],
        [[10, 1], [30, 1], [70, 1], [100, 2], [150, 2], [200, 5]],
        [[10, 1], [30, 1], [70, 1], [100, 2], [150, 2], [200, 5]]
      ],
      'Armor'    => [
        [[10, 2], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]]
      ],
      'Weapon'   => [
        [[10, 3], [30, 3], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]]
      ]
    },
    hard_reqs: ['Performance', 'Parry Ability'],
    restricted: ['Offhand Weapon']
  },

  'Trader'       => {
    specific_reqs: {
      'Trading'   => [[10, 4], [30, 5], [70, 6], [100, 6], [150, 7], [200, 15]],
      'Appraisal' => [[10, 3], [30, 3], [70, 4], [100, 5], [150, 6], [200, 15]]
    },
    general_reqs: {
      'Lore'     => [
        [[10, 3], [30, 3], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]],
        [[10, 2], [30, 2], [70, 3], [100, 4], [150, 4], [200, 10]]
      ],
      'Magic'    => [],
      'Survival' => [
        [[10, 3], [30, 3], [70, 4], [100, 4], [150, 5], [200, 13]],
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]],
        [[10, 2], [30, 3], [70, 3], [100, 4], [150, 4], [200, 10]],
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 4], [200, 10]],
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]],
        [[10, 1], [30, 1], [70, 1], [100, 2], [150, 2], [200, 5]]
      ],
      'Armor'    => [
        [[10, 2], [30, 3], [70, 3], [100, 3], [150, 4], [200, 10]],
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]]
      ],
      'Weapon'   => [
        [[10, 1], [30, 2], [70, 2], [100, 3], [150, 3], [200, 8]]
      ]

    },
    hard_reqs: ['Appraisal', 'Trading'],
    restricted: ['Offhand Weapon']
  }
}

def main
  arg_definitions = [
    [
      { name: 'debug', regex: /debug/i, optional: true },
      { name: 'mode', options: %w[brief short next], optional: true, description: 'Only display requirements you don\'t meet' },
      { name: 'target', regex: /^\d+$/, optional: true, description: 'See requirements for a specific circle' }
    ]
  ]

  args = parse_args(arg_definitions)

  $debug_mode_cc = args.debug

  # Check yaml settings to see if prettyprint is true
  pretty_print = get_settings.circlecheck_prettyprint

  level_target = [args.target.to_i, DRStats.circle + 1].max
  requirements = all_requirements(level_target)
  display_requirements(requirements, level_target, args.mode, pretty_print)
end

def display_requirements(requirements, level_target, brief, pretty_print)
  can_circle = false
  first_circle_seen = nil
  column_headings_displayed = false
  spacer_displayed = false

  # Caclulate the TDPs gained at next level
  # No TDPs earned for circling after 150
  tdps = if DRStats.circle < 9
           DRStats.circle + 51
         elsif DRStats.circle < 150
           DRStats.circle + 101
         else
           0
         end

  # If the user has yaml set to circlecheck_prettyprint
  # then handle top of display. Otherwise display traditional.
  if pretty_print
    # Hash of column => spacing, which centralizes the formatting
    # to handle display of circlecheck columns and allows us to easily
    # edit column widths in an single spot.
    column_spacing = {
      1 => 16,
      2 => 12,
      3 => 6,
      4 => 3,
      5 => 8,
      6 => 7,
      7 => 2,
      8 => 3
    }

    # This outputs the beginning section of circle check, which
    # gives your current circle and your TDPs at next level.
    DRC.message("___________________________________________________________")
    _respond " Current Circle:  <pushBold/>#{DRStats.circle}<popBold/>" +
             " | Next Level TDPs:  #{DRStats.tdps} <pushBold/>+ #{tdps}<popBold/> = #{DRStats.tdps + tdps}"
    respond("")

    # Set column headings for later display for prettyprint
    column_headings =
      "SKILL".center(column_spacing[1]) +
      "CATEGORY".center(column_spacing[2]) +
      "CIR".rjust(column_spacing[3]) +
      "  ".center(column_spacing[4]) +
      "RANKS for CIR".rjust(20)
  else
    # Retain original formatting at top of display
    respond("Your next level will award: #{tdps} TDPs")
  end

  new_target = 0
  requirements.each do |skill, met_circle, missing_ranks, ranks|
    first_circle_seen ||= met_circle

    # Check if we're ready to circle. If so, display message.
    # Also, if so, recognize that that our ;circlecheck readout
    # should be targetting an additional circle (e.g. if we're
    # currenly 30th circle but can circle to 31st, ;circlecheck
    # should show us target skill for circle 32)
    if first_circle_seen > DRStats.circle && !can_circle
      echo("met_circle: #{met_circle} circle: #{DRStats.circle}") if $debug_mode_cc
      can_circle = true
      new_target = first_circle_seen + 1
      DRC.message("***You're ready to circle!***")
      DRC.message("")
    end

    # If we're in the first iteration of this loop, and user has
    # prettyprint specified in yaml, display column headings,
    # then recognize we've displayed column headings so we don't
    # re-display them every loop.
    if !column_headings_displayed && pretty_print
      respond(column_headings)
      column_headings_displayed = true
    end

    # This gives some space between the top set of skill(s) for target circle
    # and the rest of the circlecheck readout.
    if met_circle >= [level_target, new_target].max && !spacer_displayed
      break if brief

      spacer_displayed = true
      respond('')
    end

    if pretty_print
      # Break each skill string into skill name and skill category
      # E.g. "Stealth (1st Survival)" becomes "Stealth" and "1st Survival"
      # If this is a hard req, display hard req instead of category
      if skill =~ /\(/i
        sub_skill = skill.scan(/\(([A-z\.\s\-']+)\)/i).first.first
        category = skill.split(/ \([A-z\.\s\-']+\)/i).first
      else
        sub_skill = skill
        category = 'Hard Req'
      end

      # Calculate the percent remaining to next skill rank
      # so we can display fractional amounts. Format so
      # we can easily append decimal to current rank.
      subtraction = (100 - DRSkill.getpercent(sub_skill).to_f) / 100.00
      percent_remaining = format('%.2f', subtraction).sub(/^./, '')

      # Formulate the needed ranks to target circle including
      # fractional amount. Also prep total target ranks for proper display.
      if subtraction == 1
        needed_ranks = missing_ranks
      else
        needed_ranks = missing_ranks - 1
      end
      needed_ranks = needed_ranks.to_s + percent_remaining.to_s
      missing_ranks_plus_ranks = "(" + (missing_ranks + ranks).to_s + ")"

      # Handle formatting circlecheck output in column formatting.
      case
      when met_circle == 200
        # If ranks are beyond what's needed for circle 200, add a +
        # in front of the ranks to signify the amount beyond 200
        # circle reqs.
        needed_ranks_plus = "+" + needed_ranks.to_s

        respond(
          "#{sub_skill.center(column_spacing[1])}" +                            # Column 1 - Skill
          "#{category.center(column_spacing[2])}" +                             # Column 2 - Category
          "#{met_circle.to_s.rjust(column_spacing[3])}  " +                     # Column 3 - Met circle
          "-".center(column_spacing[4]) +                                       # Column 4 - and need
          "#{needed_ranks_plus.to_s.rjust(column_spacing[5])}" +                # Column 5 - Needed Ranks
          "#{missing_ranks_plus_ranks.to_s.rjust(column_spacing[6])} " +        # Column 6 - Total Target Ranks
          "|".ljust(column_spacing[7]) +                                        # Column 7 - for
          "#{met_circle.to_s.rjust(column_spacing[8])}"                         # Column 8 - Target circle
        )
      else
        respond(
          "#{sub_skill.center(column_spacing[1])}" +                            # Column 1 - Skill
          "#{category.center(column_spacing[2])}" +                             # Column 2 - Category
          "#{met_circle.to_s.rjust(column_spacing[3])}  " +                     # Column 3 - Met circle
          "-".center(column_spacing[4]) +                                       # Column 4 - and need
          "#{needed_ranks.to_s.rjust(column_spacing[5])}" +                     # Column 5 - Needed Ranks
          "#{missing_ranks_plus_ranks.to_s.rjust(column_spacing[6])} " +        # Column 6 - Total Target Ranks
          "|".ljust(column_spacing[7]) +                                        # Column 7 - for
          "#{[met_circle + 1, level_target].max.to_s.rjust(column_spacing[8])}" # Column 8 - Target circle
        )
      end # Prettyprint display section

    else # If yaml prettyprint not set, display original format
      if met_circle == 200
        respond("You have enough #{skill} for circle #{met_circle} and have exceeded it by #{missing_ranks} (#{ranks}) ranks")
      else
        respond("You have enough #{skill} for circle #{met_circle} and need #{missing_ranks} (#{missing_ranks + ranks}) ranks for circle #{[met_circle + 1, level_target].max}")
      end
    end
  end
  # Line delimiter for visual separation from game spam
  DRC.message("___________________________________________________________")
end

def all_requirements(level_target)
  guild = DRStats.guild
  echo(guild) if $debug_mode_cc

  reqs = $GuildReqs[guild]

  echo("reqs: #{reqs}") if $debug_mode_cc

  requirements = calc_requirements(reqs, 'Survival', level_target)
  requirements += calc_requirements(reqs, 'Magic', level_target)
  requirements += calc_requirements(reqs, 'Lore', level_target)
  requirements += calc_requirements(reqs, 'Armor', level_target)
  requirements += calc_requirements(reqs, 'Weapon', level_target)
  requirements += calc_requirements(reqs, 'Mastery', level_target)

  requirements = requirements.sort_by { |item| [item[1], item[2]] }
  echo("reqs: #{requirements}") if $debug_mode_cc
  requirements
end

def get_skills_by_type(type)
  $Skills
    .select { |skill| skill[:type] == type }
    .map { |skill| [skill[:name], DRSkill.getrank(skill[:name]), DRSkill.getpercent(skill[:name])] }
    .sort_by { |skill| [skill[1], skill[2]] }
    .reverse
end

# ['skill', met_circle, missing_ranks, ranks]
def calc_requirement(skill_info, costs, level_target)
  name, ranks = skill_info
  echo("calc_requirement #{ranks}:#{costs}") if $debug_mode_cc
  required_rank = 0
  met_circle = 0
  (1..200).each do |circle|
    cost = costs.find { |cap, _| circle <= cap }.last
    if required_rank + cost <= ranks || circle < level_target
      met_circle = circle if required_rank + cost <= ranks
      required_rank += cost
      next
    else
      echo("circle #{circle}, cost:#{cost} ranks:#{ranks} required_rank:#{required_rank}") if $debug_mode_cc
      return [name, met_circle, cost - (ranks - required_rank), ranks]
    end
  end
  [name, 200, ranks - required_rank, ranks]
end

def calc_requirements(reqs, type, level_target)
  requirements = []
  skill_type_info = get_skills_by_type(type)
  type_names = skill_type_info.map { |skill, _rank| skill }
  echo(skill_type_info) if $debug_mode_cc
  reqs[:specific_reqs].each do |skill_name, costs|
    unless type_names.include?(skill_name)
      echo("skipping #{skill_name}") if $debug_mode_cc
      next
    end
    echo("calcing #{skill_name}") if $debug_mode_cc
    skill_info = skill_type_info.find { |skill, _rank| skill == skill_name }
    requirements << calc_requirement(skill_info, costs, level_target)
    skill_type_info.reject! { |name, _| name == skill_name } if reqs[:hard_reqs].include?(skill_name)
  end
  echo("deleting generics: #{skill_type_info.select { |x| $Skills.find { |skill| x[0] == skill[:name] }[:generic] }}") if $debug_mode_cc
  skill_type_info.reject! { |x| $Skills.find { |skill| x[0] == skill[:name] }[:generic] }

  echo("deleting restricted: #{skill_type_info.select { |name, _| reqs[:restricted].include?(name) }}") if $debug_mode_cc
  skill_type_info.reject! { |name, _| reqs[:restricted].include?(name) }

  echo("remaining skills to match: #{skill_type_info}") if $debug_mode_cc

  reqs[:general_reqs][type].each_with_index do |costs, i|
    echo("costs #{costs}") if $debug_mode_cc
    best_skill = skill_type_info.shift
    best_skill[0] = "#{$Ordinals[i + 1]} #{type} (#{best_skill[0]})"
    echo("formatted skill info #{best_skill}") if $debug_mode_cc
    requirements << calc_requirement(best_skill, costs, level_target)
  end
  requirements
end

$Ordinals = { 1 => '1st', 2 => '2nd', 3 => '3rd', 4 => '4th', 5 => '5th', 6 => '6th', 7 => '7th', 8 => '8th', 9 => '9th' }

main

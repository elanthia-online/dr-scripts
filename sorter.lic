=begin
  Documentation: https://elanthipedia.play.net/Lich_script_development#sorter
=end

custom_require.call(%w[common])

@settings = get_settings

script.want_downstream = false
script.want_downstream_xml = true
hide_me

#show_sellable = false

best_column_count = proc { |list|
    num_columns = 1
    loop {
        items_per_column = (list.length / num_columns.to_f).ceil
        total_width = 0
        for column_num in 0...num_columns
            max_width = 0
            list[(column_num*items_per_column)...((column_num+1)*items_per_column)].each { |item_name| max_width = [ max_width, item_name.length ].max }
            total_width += max_width
        end
        total_width += (num_columns - 1) * 8
        if total_width > @settings.sorter['width'].to_i - 8
            num_columns -= 1
            break
        elsif num_columns >= list.length
            break
        end
        num_columns += 1
    }
    [ num_columns, 1 ].max
}

begin
    action = proc { |s|
        if s =~ /^(<(?:c|clearC|exposeC)ontainer.+>)?(?:[IO]n the .*? you see |You rummage .*? and see .*?(?:, | and )(?:a|an|some) )/
            xml_only = $1
            if s =~ /In the/ and s =~ /On the/
                s
            elsif s =~ /^(?:<container.*inv>|<clearContainer.*inv>|<exposeContainer.*inv>)(?:(?:[IO]n the .*?) you see .*\.|(?:You rummage .*? and see .*?)(?:, | and )(?:a|an|some) .*\.)/
                xml_only
            else
                #s
            end
        else
            s
        end
    }
    DownstreamHook.add('sorter', action)
    while (line = get)
        if line =~ /^(?:<container.*inv>|<clearContainer.*inv>|<exposeContainer.*inv>)?([IO]n the .*?) (you see .*\.)/
            container = $1
            contents = $2
            next if line =~ /In the/ and line =~ /On the/
        elsif line =~ /^(?:<container.*inv>|<clearContainer.*inv>|<exposeContainer.*inv>)?(You rummage .*?)( and see .*?\.)/
            container = $1
            contents = $2
            next if line =~ /In the/ and line =~ /On the/
        else
            next
        end
        if contents =~ /(?:and|you) see (.*)\./
            #list_to_array
            if contents = $1.strip.split(/,|\sand\s(?=a|an|some)/)
                sorted_contents = Hash.new
                item_data = get_data('items').to_h
                contents.each{|item|
                    category_name = 'other'
                    item_data.each{|key, value|
                    #get_noun
                        if (item.strip.sub(/\s?(?:fastened|interwoven|layered|marked|stacked|worn)? (?:with|labeled|titled).*/, '').scan(/[a-z\-']+$/i).first =~ /#{value.join('|')}/i || item =~ /(?:#{value.join('|')})$/i)
                            if key.to_s.sub(/_nouns|_types/,'') !~ /#{@settings.sorter['ignore']}/i
                                category_name = key.to_s.sub(/_nouns|_types/,'')
                                break;
                            end
                        end
                    }
                    sorted_contents[category_name] ||= Hash.new
                    sorted_contents ||= Hash.new
                    item_name = item.sub(/^\s?(?:a |an |some )/,'')
                    if sorted_contents[category_name][item_name].nil?
                        sorted_contents[category_name][item_name] = Hash.new
                        #get_noun
                        sorted_contents[category_name][item_name]['noun'] = item.strip.sub(/\s?(?:fastened|interwoven|layered|marked|stacked|worn)? (?:with|labeled|titled).*/, '').scan(/[a-z\-']+$/i).first
                        #sorted_contents[category_name][item_name]['exist'] = item.id
                        sorted_contents[category_name][item_name]['count'] = 1
                    else
                        sorted_contents[category_name][item_name]['count'] += 1
                    end
                }
                if @settings.sorter['width'].to_i > 0 and $frontend == 'stormfront'
                    output = "<output class=\"mono\"/>\n"
                else
                    output = String.new
                end
                output.concat "#{container}:\n"
                if @settings.sorter['width'].to_i > 0
                    for category_name, category_contents in sorted_contents
                        count = 0
                        category_contents.values.each { |value| count += value['count'] }
                        output.concat "#{monsterbold_start}#{category_name} (#{count}):#{monsterbold_end} \n"
                        category_contents = category_contents.sort { |a,b| a[0].split(/\s/).last <=>  b[0].split(/\s/).last }
                        column_count = best_column_count.call(category_contents.collect { |a| a[0] })
                        row_count = (category_contents.length / column_count.to_f).ceil
                        column_count = (category_contents.length / row_count.to_f).ceil
                        column_widths = Array.new
                        for column_num in 0...column_count
                            category_contents[(column_num*row_count)...((column_num+1)*row_count)].each { |item_name,item_info| column_widths[column_num] = [ column_widths[column_num].to_i, item_name.length ].max }
                        end
                        for row_num in 0...row_count
                            output.concat '    '
                            for column_num in 0...column_count
                                item_name, item_info = category_contents[(column_num*row_count) + row_num]
                                if item_info['count'] > 1
                                    #str = "<a exist=\"#{item_info['exist']}\" noun=\"#{item_info['noun']}\">#{item_name}</a> (#{item_info['count']})"
                                    str = "#{item_name} (#{item_info['count']})"
                                else
                                    #str = "<a exist=\"#{item_info['exist']}\" noun=\"#{item_info['noun']}\">#{item_name}</a>"
                                    str = "#{item_name}"
                                end
                                str = str.ljust(column_widths[column_num] + str.length + 12)
                                if column_num == column_count - 1
                                    str = str.strip
                                end
                                output.concat str
                            end
                            output.concat "\n"
                        end
                        output.concat "\n"
                    end
                else
                    for category_name, category_contents in sorted_contents
                        count = 0
                        category_contents.values.each { |value| count += value['count'] }
                        output.concat "#{monsterbold_start}#{category_name} (#{count}):#{monsterbold_end} "
                        category_contents = category_contents.sort { |a,b| a[0].split(/\s/).last <=>  b[0].split(/\s/).last }
                        for item_name, item_info in category_contents
                            if item_info['count'] > 1
                                #output.concat "<a exist=\"#{item_info['exist']}\" noun=\"#{item_info['noun']}\">#{item_name}</a> (#{item_info['count']}), "
                                output.concat "#{item_name} (#{item_info['count']}), "
                            else
                                #output.concat "<a exist=\"#{item_info['exist']}\" noun=\"#{item_info['noun']}\">#{item_name}</a>, "
                                output.concat "#{item_name}, "
                            end
                        end
                        output.chop!
                        output.chop!
                        output.concat ".\n"
                    end
                end
                if @settings.sorter['width'].to_i > 0 and $frontend == 'stormfront'
                    output.concat "<output class=\"\"/>\n"
                end
                output.gsub!(/<.*?>/, '') unless $frontend =~ /^(?:stormfront|profanity)$/
                if defined?(_respond)
                    _respond output
                else
                    $stdout.puts output
                end
=begin
                if show_sellable
                    sorted_contents = Hash.new
                    for item in contents
                        category_name = item.sellable || 'nil'
                        sorted_contents[category_name] ||= Hash.new
                        if item.full_name =~ /^a crystalline flask containing/
                            item_name = item.full_name.sub(/^a crystalline flask containing /, '')
                        else
                            item_name = item.full_name.sub(/containing (.*)$/) { "(#{$1})" }
                        end
                        if sorted_contents[category_name][item_name].nil?
                            sorted_contents[category_name][item_name] = Hash.new
                            sorted_contents[category_name][item_name]['noun'] = item.noun
                            sorted_contents[category_name][item_name]['exist'] = item.id
                            sorted_contents[category_name][item_name]['count'] = 1
                        else
                            sorted_contents[category_name][item_name]['count'] += 1
                        end
                    end
                    output = "\n#{container}:\n"
                    for category_name, contents in sorted_contents
                        count = 0
                        contents.values.each { |value| count += value['count'] }
                        output.concat "#{monsterbold_start}#{category_name} (#{count}):#{monsterbold_end} "
                        contents = contents.sort { |a,b| a[0].split(/\s/).last <=>  b[0].split(/\s/).last }
                        for item_name, item_info in contents
                            if item_info['count'] > 1
                                output.concat "<a exist=\"#{item_info['exist']}\" noun=\"#{item_info['noun']}\">#{item_name}</a> (#{item_info['count']}), "
                            else
                                output.concat "<a exist=\"#{item_info['exist']}\" noun=\"#{item_info['noun']}\">#{item_name}</a>, "
                            end
                        end
                        output.chop!
                        output.chop!
                        output.concat ".\n"
                    end
                    if CharSettings['screen_width'] and $frontend == 'stormfront'
                        output.concat "<output class=\"\"/>\n"
                    end
                    output.gsub!(/<.*?>/, '') unless $frontend =~ /^(?:stormfront|profanity)$/
                    if defined?(_respond)
                        _respond output
                    else
                        $stdout.puts output
                    end
                end
=end            
            else
                echo 'fixme'
            end
        end
    end
ensure
    DownstreamHook.remove('sorter')
end

=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#vanity-pet
=end

custom_require.call(%w[common common-items drinfomon])

class VanityPet
  def initialize
    arg_definitions = [
      [
        { name: 'pet_action', regex: /(stow|drop)/, optional: true, description: 'STOW or DROP to either stow your pet in their container or drop them to the ground.' },
        { name: 'pet_name', regex: /^(?!debug)\w+$/, optional: true, description: 'Name of your pet.' },
        { name: 'pet_container', regex: /^(?!debug)\w+$/, optional: true, description: 'Container for your pet.' },
        { name: 'debug', regex: /^debug$/i, optional: true, description: 'Enable debug output' },
      ]
    ]

    args = parse_args(arg_definitions, true)
    settings = get_settings

    $debug_mode_pet = UserVars.pet_debug || args.debug

    pet_action = args.pet_action || settings.vanity_pet_action
    pet_name = args.pet_name || settings.vanity_pet_name
    pet_container = args.pet_container || settings.vanity_pet_container

    if $debug_mode_pet
      echo "pet_action: #{pet_action}"
      echo "pet_name: #{pet_name}"
      echo "pet_container: #{pet_container}"
    end

    case pet_action
    when 'stow'
      stow_pet(pet_name, pet_container)
    when 'drop'
      drop_pet(pet_name, pet_container)
    else
      DRC.message("Unkown pet action: #{pet_action}")
      DRC.message("For usage run '#{$clean_lich_char}vanity-pet help'")
    end
  end

  def stow_pet(pet_name, pet_container)
    echo "stowing pet" if $debug_mode_pet
    unless DRCI.in_hands?(pet_name) || DRCI.get_item_if_not_held?(pet_name, pet_container)
      wait_for_pet_to_arrive(pet_name, 15)
      unless DRCI.get_item_unsafe(pet_name)
        DRC.message("Could not pick up pet, where did it go?")
        exit
      end
    end
    DRCI.put_away_item?(pet_name, pet_container)
  end

  def drop_pet(pet_name, pet_container)
    echo "dropping pet" if $debug_mode_pet
    unless DRCI.get_item_if_not_held?(pet_name, pet_container)
      DRC.message("Could not find pet, are you sure you have it?")
      exit
    end
    case DRC.bput("drop my #{pet_name}",
                  /^You set the .* on the ground/,
                  /^No littering in the bank/,
                  /you can't drop anything here/,
                  /^What were you referring/,
                  /^You give your \w+ puppy/,
                  /^You give your .*#{pet_name} an affectionate smooch/)
    when /^No littering in the bank/, /you can't drop anything here/
      DRC.message("Can't drop pets in this room")
      DRCI.put_away_item?(pet_name, pet_container)
    when /^What were you referring/
      DRC.message("Could not drop pet, where did it go?")
      exit
    end
  end

  # Pets follow you around but lag behind you.
  # It may take a few seconds for them to catch up to you.
  def wait_for_pet_to_arrive(pet_name, timeout)
    stop_time = Time.now + timeout
    until pet_in_room?(pet_name)
      echo "waiting for pet to arrive..." if $debug_mode_pet
      if Time.now > stop_time
        DRC.message("Pet never arrived after #{timeout} seconds, are you sure it's out?")
        exit
      end
      pause 1
    end
  end

  def pet_in_room?(pet_name)
    DRRoom.room_objs.any? { |obj| obj =~ /\b#{pet_name}\b/ }
  end
end

VanityPet.new

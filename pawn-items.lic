=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#pawn-items
=end

# This script pauses itself to warn user before proceeding with item-losing actions.
# Flag this script as not eligible for generic "unpause all" commands so that
# only if the player explicitly unpauses this script does it unpause.
no_pause_all

custom_require.call %w[common common-items common-travel equipmanager]

class PawnItems
  def initialize
    arg_definitions = [
      [
        { name: 'source', regex: /^[A-z\.\s\-']+$/i, variable: true, description: 'Source container' },
        { name: 'town', regex: $HOMETOWN_REGEX, optional: true, variable: true, description: 'Override the town to pawn in.' },
        { name: 'noun', regex: /^[A-z\.\s\-]+$/i, optional: true, variable: true, description: 'If specified, only items with this noun will be sold.' }
      ]
    ]
    args = parse_args(arg_definitions)

    settings = get_settings

    # Identify which pawnshop to go to.
    if DRCT.tag_to_id('pawnshop') == Room.current.id
      # If you're already in the nearest pawnshop, sell there.
      pawnshop_room_id = Room.current.id
    else
      # Otherwise, go to the one in your preferred town.
      hometown = DRC.get_town_name(args.town || settings.sell_loot_town || settings.hometown)
      pawnshop_room_id = DRCT.get_hometown_target_id(hometown, 'pawnshop')
    end

    if pawnshop_room_id.nil?
      DRC.message("Pawning not supported in #{hometown}.")
      exit
    end

    # You can't sell to a merchant if you're invisible,
    # and invisibility sometimes impedes getting/stowing items.
    DRC.release_invisibility

    # Warn the script user that this is designed to sell items off your person
    warn_before_sell(args.source, args.noun)

    # Turn items into coins
    sell_items(pawnshop_room_id, args.source, args.noun)
  end

  def sell_items(pawnshop_room_id, source, noun)
    # If container is very full then LOOK may not list all of them.
    # If you're moving a specific item, then sort those to the top
    # to increase chances we find and sell all of them in one go.
    DRC.bput("sort #{noun} in my #{source}", "are now at the top", "What were you referring to", "Please rephrase that command", "You may only sort items in your inventory") if noun
    DRCI.get_item_list(source, 'look')
        .map { |full_name| full_name =~ /lot of other stuff/ ? full_name : full_name.split(' ').last }
        .select { |item| noun ? /\b#{noun}\b/ =~ item : true }
        .each do |item|
      # This indicates there is more items than LOOK can show
      # and we've reached the end of what we last saw.
      # We need to look again to see what we can now see.
      # Keep doing this until exhaust source.
      if item =~ /lot of other stuff/
        sell_items(source, noun)
        break
      end
      # Attempt to get the item from the source container.
      if DRCI.get_item?(item, source)
        unless DRCT.sell_item(pawnshop_room_id, item)
          # Failed. Message user and return item to source container.
          DRC.message("Unable to sell #{item}. The merchant may not accept these items.")
          DRCI.put_away_item?(item, source)
          exit
        end
      else
        DRC.message("Unable to get #{item} from #{source}.")
        DRC.message("Your hands are full!") if (DRC.left_hand && DRC.right_hand)
        exit
      end
    end
  end

  def warn_before_sell(source, noun)
    # Pause script and warn that it is designed to sell items
    # from your person to somewhere else. Item loss may occur.
    DRC.message("WARNING: This script is designed to sell items from YOU to an NPC merchant.")
    DRC.message("WARNING: It also has the ability to sell every item from the source container.")
    DRC.message("WARNING: Item loss may occur. Use with caution.")
    DRC.message("WARNING: If you want to sell loot like gems and bundles then use #{$clean_lich_char}sell-loot instead.")
    DRC.message("WARNING: If you want to transfer items between containers then use #{$clean_lich_char}transfer-items or #{$clean_lich_char}offload-items instead.")
    DRC.message("\n")

    if noun
      DRC.message("You are about to sell all #{noun.upcase}s from #{source}.")
      DRC.message("Unpause the script to continue or #{$clean_lich_char}kill the script to stop.")
      pause_script
    else
      DRC.message("You are about to sell EVERY SINGLE ITEM from #{source}.")
      DRC.message("Unpause the script to continue or #{$clean_lich_char}kill the script to stop.")
      pause_script
      DRCI.rummage_container(source)
      DRC.message("Are you SURE you want to sell EVERY SINGLE ITEM from YOUR #{source}?")
      pause_script
    end
  end
end

PawnItems.new

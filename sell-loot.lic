=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#sell-loot
=end

custom_require.call(%w(common common-items common-money common-travel drinfomon equipmanager))

class SellLoot
  include DRC
  include DRCI
  include DRCM
  include DRCT

  def initialize
    EquipmentManager.instance.empty_hands

    settings = get_settings
    town_data = get_data('town')
    @hometown = town_data[settings.hometown]

    keep_amount, keep_type = parse(settings.sell_loot_money_on_hand(nil).split(' '))
    sell_gems("#{settings.gem_pouch_adjective} pouch") if settings.sell_loot_pouch(true)

    check_spare_pouch(settings.spare_gem_pouch_container, settings.gem_pouch_adjective) if settings.spare_gem_pouch_container

    sell_bundle if settings.sell_loot_bundle(true)

    withdrawals = convert_input(keep_amount, keep_type)
    deposit_coins(withdrawals)
  end

  def parse(setting)
    arg_definitions = [
      [
        { name: 'amount', regex: /\d+/i, variable: true, description: 'Number of coins to keep' },
        { name: 'type', regex: /\w+/i, variable: true, description: 'Type of coins to keep' }
      ],
      []
    ]

    args = parse_args(arg_definitions)

    keep_amount = args.amount || setting[0] || 3
    keep_type = args.type || setting[1] || 'silver'

    [keep_amount, keep_type]
  end

  def convert_input(keep_amount, keep_type)
    copper = convert_to_copper(keep_amount, keep_type)
    minimize_coins(copper)
  end

  def deposit_coins(withdrawals)
    walk_to @hometown['exchange']['id']
    exchange_to = @hometown['currency']
    %w(dokoras kronars lirums)
      .reject { |currency| currency == exchange_to }
      .each { |currency| fput "exchange all #{currency} for #{exchange_to}" }

    walk_to @hometown['deposit']['id']
    fput 'deposit all'
    withdrawals.each { |amount| fput "withdraw #{amount}" }
    fput 'check balance'
  end

  def sell_bundle
    return unless exists?('bundle')

    walk_to @hometown['tannery']['id']

    bput('remove my bundle', 'You remove', 'You sling')
    bput('sell my bundle', 'ponders over the bundle', 'sorts through it carefully')
    bput('stow rope', 'You put')
  end

  def check_spare_pouch(container, adj)
    fput("open my #{container}")
    return if inside?("#{adj} pouch", container)
    walk_to @hometown['gemshop']['id']
    clerk = which_clerk(@hometown['gemshop']['name'])
    fput("ask #{clerk} for #{adj} pouch")
    fput("put my pouch in my #{container}")
  end

  def which_clerk(clerks)
    clerks.is_a?(String) ? clerks : clerks.find { |clerk| DRRoom.npcs.include?(clerk) }
  end

  def sell_gems(container)
    case bput("open my #{container}", 'You open your', 'has been tied off', 'What were you referring to', 'That is already open')
    when 'has been tied off', 'What were you referring to'
      return
    end

    gems = get_gems(container)
    unless gems.empty?
      walk_to @hometown['gemshop']['id']
      clerk = which_clerk(@hometown['gemshop']['name'])

      gems.each do |gem|
        fput "get my #{gem}"
        fput "sell my #{gem} to #{clerk}"
      end
    end

    fput "close my #{container}"
  end
end

SellLoot.new

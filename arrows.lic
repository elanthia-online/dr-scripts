=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#arrows
=end

custom_require.call(%w[common common-items common-crafting])

class Arrows
  include DRC
  include DRCC
  include DRCI

  def initialize
    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.engineering_belt
    @hometown = @settings.hometown
    @hometown_data = get_data('crafting')['shaping'][@hometown]

    arg_definitions = [
      [
        { name: 'type',
          options: %w[couger-claw boar-tusk sabertooth angiswaerd hele'la basilisk elsralael soot-stained ice-adder jagged-horn drake-fang],
          variable: true,
          descriptions: "Which arrow type to create?" },

        { name: 'lumber',
          regex: /\w+/i,
          variable: true,
          description: 'Type of lumber used.' },

        { name: 'tools',
          regex: /yes/,
          optional: true,
          description: 'Get tools from clerk?'}
      ]
    ]

    args = parse_args(arg_definitions)

    @type = args.type
    @lumber = args.lumber
    tools = args.tools

    get_tools if tools
    order_lumber
    check_flights
    make_shafts
    make_arrowheads
    wait_for_script_to_complete('shape', ['stow', '5', "#{@type} arrows", 'shafts', 'arrows'])
    clean_up
    store_tools if tools
  end

  def get_tools
    wait_for_script_to_complete('clerk-tools', ['engineering', 'get'])
  end

  def store_tools
    wait_for_script_to_complete('clerk-tools', ['engineering', 'store'])
  end

  def order_lumber
    return if exists?("#{@lumber} lumber") || exists?('shafts')
    wood = find_piece("#{@lumber} lumber")
    2.times do
      order_item(@hometown_data['stock-room'], wood)
      bput("get #{@lumber} lumber from #{@bag}", "You get", "What were")
      bput("combine my lumber", "You combine", "You must")
      bput("stow lumber", "You put")
    end
  end

  def check_flights
    return if exists?('flights')
    flight = find_piece('arrow flights')
    2.times do
      order_item(@hometown_data['stock-room'], flight)
      bput("stow flights", "You put")
    end
  end

  def make_shafts
    return if exists?('shafts')
    get_item('shaper')
    bput("get my #{@lumber} lumber from my #{@bag}", "You get", "What were")
    bput("shape lumber into arrow shaft", 'Roundtime')
    stow_item('shaper')
    bput("stow my shafts in my #{@bag}", "You put")
  end

  def make_arrowheads
    return if exists?('arrowheads')
    arrow_head = { "cougar-claw" => "curved claw", "boar-tusk" => "boar tusk", "sabertooth" => "ivory fang", "angiswaerd" => "angiswaerd tooth", "hele'la" => "needlesharp tooth", "basilisk" => "basilisk fang", "elsralael" => "elsralael tooth", "soot-stained" => "soot-streaked fang", "ice-adder" => "adder fang", "jagged-horn" => "jagged horn", "drake-fang" => "drake fang" }
    new_type = arrow_head[@type]
    case bput("get #{new_type} from my #{@bag}", 'You get', 'I could not', 'What were')
    when /You get/
      get_item('shaper')
      bput("shape #{new_type} into arrowhead", 'Roundtime', 'You fumble')
      stow_item('shaper')
      stow_item('arrowheads')
    when /I could not/, /What were/
      beep
      echo("***Out of #{@type}!***")
      exit
    end
  end

  def clean_up
    bput("stow shafts", "you pick up", "What were", "Stow what?")
  end

  def find_piece(match_string)
    wait_for_script_to_complete('go2', [@hometown_data['stock-room']])
    echo(match_string)
    piece = DRC.bput('order', "^\\d+\\)\\.\\s\\s(?:some|a|an|stack of|5 pieces of|10 pieces of|1 batch of straight)?\\s*#{match_string}")
    piece =~ /^(\d+)/
    echo(piece)
    Regexp.last_match(1)
  end

  def get_item(name)
    get_crafting_item(name, @bag, @bag_items, @belt)
  end

  def stow_item(name)
    stow_crafting_item(name, @bag, @belt)
  end
end
Arrows.new

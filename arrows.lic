custom_require.call(%w[common common-crafting])

class Arrows
  include DRC
  include DRCC

  def initialize
    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.engineering_belt

    arg_definitions = [
      [
        { name: 'type', options: %w[couger-claw boar-tusk sabertooth angiswaerd hele'la basilisk elsralael soot-stained ice-adder jagged-horn drake-fang], variable: true, descriptions: "Which arrow type to create?" },
        { name: 'lumber', regex: /\w+/i, variable: true, description: 'Type of lumber used.' },
        { name: 'tools', options: %w[true false], variable: true, description: 'Get tools from clerk?'}
      ]
    ]

    args = parse_args(arg_definitions)

    @type = args.type
    @lumber = args.lumber || 'maple'
    tools = args.tools

    get_tools if tools

    check_flights
    make_shafts
    make_arrowheads
    wait_for_script_to_complete('shape', ['stow', '5', "#{@type} arrows", 'shafts', 'arrows'])
    store_tools if tools
  end

  def get_tools
    wait_for_script_to_complete('clerk-tools', ['engineering', 'get'])
  end

  def store_tools
    wait_for_script_to_complete('clerk-tools', ['engineering', 'store'])
  end

  def order_lumber
    return unless bput('tap my lumber', 'You tap', 'What were') == 'What were'
    wait_for_script_to_complete('go2', ['8864'])
    fput('order 10')
    fput('order 10')
    fput("get maple lumber from #{@bag}")
    fput('combine my lumber')
    fput('stow lumber')
  end

  def check_flights
    return unless bput('tap my flights', 'You tap', 'What were') == 'What were'
    fput('order 12')
    fput('order 12')
    fput('stow flights')
  end

  def make_shafts
    return unless bput('tap my shafts', 'You tap', 'What were') == 'What were'
    order_lumber if bput("tap my #{lumber} lumber", 'You tap', 'What were') == 'What were'
    fput("untie my shaper from my #{@belt}")
    fput("get my #{lumber} lumber from my #{@bag}")
    bput('shape lumber into arrow shaft', 'Roundtime')
    fput("tie my shaper to my #{@belt}")
    fput("stow my shafts in my #{@bag}")
  end

  def make_arrowheads
    new_type = @type
    new_type == 'boar tusk' if @type == 'boar-tusk'
    return unless bput('tap my arrowheads', 'You tap', 'I could not') == 'I could not'
    case bput("get #{@type} from my #{@bag}", 'You get', 'I could not', 'What were')
    when /You get/
      fput("untie my shaper from my #{@belt}")
      bput("shape my #{new_type} into arrowheads", 'Roundtime')
      fput("tie my shaper to my #{@belt}")
      fput("stow my arrowheads in my #{@bag}")
    when /I could not/, /What were/
      beep
      echo("***Out of #{@type}!***")
      exit
    end
  end
end
Arrows.new

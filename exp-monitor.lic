no_pause_all
no_kill_all
silence_me

UserVars.echo_exp = true
UserVars.echo_exp_time ||= 1
DRSkill.gained_skills.clear

before_dying do
  # Turn off setting when script stops otherwise drinfomon script will
  # continue to append data to DRSkill.gained_skills array as a memory leak.
  UserVars.echo_exp = false
  DRSkill.gained_skills.clear
  DownstreamHook.remove('exp_hook')
end

### THIS SECTION IS FOR DISPLAYING RANKS GAINED OVER A SESSION###
# To track when the last time was we checked experience/info.
skills_check_interval = UserVars.echo_exp_time
skills_check_time = Time.now
regex_flag_briefexp_on = %r{<component id='exp .*?<d cmd='skill (?<skill>[a-zA-Z\s]+)'.*:\s+(?<rank>\d+)\s+(?<percent>\d+)%\s*\[\s?(?<rate>\d+)\/34\].*?<\/component>}
regex_flag_briefexp_off = %r{<component id='exp .*?\b(?<skill>[a-zA-Z\s]+)\b:\s+(?<rank>\d+)\s+(?<percent>\d+)%\s+\b(?<rate>[a-zA-Z\s]+)\b.*?<\/component>}
regex_exp_columns = %r{(?:\s*(?<skill>[a-zA-Z\s]+)\b:\s*(?<rank>\d+)\s+(?<percent>\d+)%\s+(?<rate>[a-zA-Z\s]+)\b)}

### This thing has to be a proc not a function/method because it is called in DownstreamHook.
### It is a pared down version from the now obselete drinfomon.lic
exp_hook = proc do |server_string|
  case server_string
  when regex_flag_briefexp_on
    matches = Regexp.last_match
    DRSkill.update(matches[:skill], matches[:rank], matches[:rate], matches[:percent])
    if UserVars.track_exp || UserVars.track_exp.nil?
      UserVars.track_exp ||= true
      server_string.sub!(/(....).(..)%..\[(..)\/34\]/, "\\1\.\\2 ~\\3 #{sprintf('%0.2f', DRSkill.gained_exp(matches[:skill]))}")
    end
  when regex_flag_briefexp_off
    matches = Regexp.last_match
    DRSkill.update(matches[:skill], matches[:rank], DR_LEARNING_RATES.index(matches[:rate]), matches[:percent])
  when regex_exp_columns
    server_string.scan(regex_exp_columns).each do |match|
      DRSkill.update(match[0], match[1], DR_LEARNING_RATES.index(match[3]), match[2])
    end
  end
  server_string
end

### THE REAL START OF THE SCRIPT. THIS IS THE PART THAT EXECUTES ###
DownstreamHook.add('exp_hook', exp_hook)

# Get initial EXPERIENCE
Lich::Util.issue_command("exp all 0", /<output class="mono"\/>/, quiet: true, silent: true)

# Start loop to process incoming data.
loop do
  begin
    if (Time.now - skills_check_time > skills_check_interval)
      new_skills = DRSkill.gained_skills.shift(DRSkill.gained_skills.size)
      # Some actions may pulse the same skill multiple times.
      # When this happens then we aggregate the individual pulses
      # so that we can report on "Skill(+3)" instead of "Skill(+1), Skill(+1), ..."
      new_skills = new_skills.reduce(Hash.new) do |result, gain|
        skill = gain[:skill]
        value = gain[:change]
        result[skill] += value
        result
      end
      new_skills = new_skills.keys.map { |skill| "#{skill}(+#{new_skills[skill]})" }
      respond("Gained: #{new_skills.join(', ')}") unless new_skills.empty?
      skills_check_time = Time.now
    end
  rescue
    echo($ERROR_INFO)
    echo($ERROR_INFO.backtrace.first)
    sleep(1)
  end
  sleep(1)
end

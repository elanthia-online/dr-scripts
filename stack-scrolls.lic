=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#stack-scrolls
=end

custom_require.call(%w[common common-items])

class ScrollStack
  def initialize
    settings = get_settings
    scroll_stackers = settings.scroll_stackers
    @discard_scrolls = settings.discard_scrolls
    @keep_scrolls = settings.keep_scrolls
    stacker_container = settings.stacker_container
    @worn_trashcan = settings.worn_trashcan
    @worn_trashcan_verb = settings.worn_trashcan_verb

    arg_definitions =
      [
        [
          { name: 'container', regex: /\w+/i, optional: true, description: 'The container to collect scrolls from' }
        ],
        [
          { name: 'get', regex: /get/i, description: 'get one copy of a specific spell' },
          { name: 'query', regex: /^[A-z\s\-']+$/i, description: 'spell to search for, use quotes for multiple words' }
        ],
        [
          { name: 'mana', regex: /mana/i, description: 'find scrolls of a specific mana type' },
          { name: 'query', regex: /(lunar|holy|life|arcane|ap|elemental)/i, description: 'mana type to search for' }
        ]
      ]

    args = parse_args(arg_definitions)

    unless args.container
      if args.get
        search_scrolls(args.query, stacker_container)
      elsif args.mana
        display_scrolls(scroll_stackers, stacker_container, args.query)
      else
        display_scrolls(scroll_stackers, stacker_container)
      end
      exit
    end

    DRCI.stow_hands
    populate_stackers(scroll_stackers, stacker_container)
    search_container(args.container, stacker_container)
  end

  def display_scrolls(scroll_stackers, stacker_container = '', mana_type = '')
    unless UserVars.stackers
      DRCI.stow_hands
      populate_stackers(scroll_stackers, stacker_container)
    end
    normalized_data = normalize_stacker_data

    unless mana_type == ''
      spells = get_data('spells').spell_data
      normalized_data.select! { |data| spells[data.first]['mana_type'] == mana_type }
    end

    normalized_data.each do |data|
      respond("  #{data.first.to_s.ljust(30)} #{data[1].to_s.ljust(30)}#{data[2].to_s.ljust(15)} Page:#{data[3]}")
    end

    respond("  Free Slots Remaining: #{UserVars.stackers.flat_map { |stacker| stacker['contents'] }.select(&:empty?).size}")
  end

  def search_scrolls(query, stacker_container)
    target = UserVars.stackers.find { |stacker| stacker['contents'].find { |data| data.first =~ /#{query}/i } }
    unless target
      echo("No scroll found matching: #{query}")
      exit
    end

    if stacker_container
      DRCI.get_item?(target['name'], stacker_container)
    else
      DRCI.stow_item?(target['name'])
    end
    fput("flip my #{target['name']}")
    fput("open my #{target['name']}")

    slot = target['contents'].find_index { |data| data.first =~ /#{query}/i }

    DRC.bput("turn #{DRC.get_noun(target['name'])} to #{query}", /^You turn/)

    case DRC.bput("pull my #{target['name']}", 'This was the last copy', 'Carefully')
    when /This was the last/i
      target['contents'][slot] = []
    when /Carefully/i
      data = target['contents'][slot]
      data[1] = data[1] - 1
    end

    if stacker_container
      DRCI.put_away_item?(target['name'], stacker_container)
    else
      DRCI.put_away_item?(target['name'])
    end
    fput('look my scroll')
  end

  def normalize_stacker_data
    temp = []
    UserVars.stackers.each do |stacker|
      stacker['contents'].each_with_index { |data, index| temp << [data.first, data.last, stacker['name'], index + 1] }
    end
    temp.reject { |data| data.first.nil? }.sort_by(&:first)
  end

  def populate_stackers(stackers, stacker_container)
    UserVars.stackers = []
    stackers.each do |stacker|
      new_stacker = { 'name' => stacker, 'contents' => [] }
      if stacker_container
        DRCI.get_item?(stacker, stacker_container)
      else
        DRCI.get_item?(stacker)
      end
      fput("flip my #{stacker}")
      pause
      while (line = get?)
        case line
        when /The (.*) section has (\d+)/
          new_stacker['contents'] << [Regexp.last_match(1), Regexp.last_match(2).to_i]
        when /Section \d+/
          new_stacker['contents'] << []
        end
      end
      UserVars.stackers << new_stacker
      fput("open my #{stacker}")
      if stacker_container
        DRCI.put_away_item?(stacker, stacker_container)
      else
        DRCI.put_away_item?(stacker)
      end
    end
  end

  def search_container(container, stacker_container)
    @excess_scrolls = []
    DRCI.get_scroll_list_in_container(container).each do |scroll|
      stack_scrolls(container, scroll, stacker_container)
    end

    return if @excess_scrolls.empty?

    respond("  No room for: #{@excess_scrolls.join(', ')}")
  end

  private

  def stack_scrolls(container, scroll, stacker_container)
    unless DRCI.get_item?(scroll, container)
      DRC.message("Could not get scroll: #{scroll} from #{container}. Exiting.")
      exit
    end
    case DRC.bput("look my #{scroll}", 'It is labeled ".*\."', '.* of the \w*\s*\w* spell.', 'three-dimensional shapes cover much of the', 'You see nothing unusual.', 'I could not find what you were referring to')
    when 'three-dimensional shapes cover much of the'
      /of the (.*) spell/ =~ DRC.bput("read my #{scroll}", 'The .* contains a complete description of the .* spell')
      spell_name = Regexp.last_match(1)
    when /It is labeled "(.*)\."/i
      spell_name = Regexp.last_match(1)
    end
    waitrt?

    if @discard_scrolls.find { |discard| spell_name == discard } || (@keep_scrolls.any? && !@keep_scrolls.any?(/#{spell_name}/i))
      DRC.message("Scroll in discards, or not in keep list.")
      DRC.message("Scroll is #{spell_name}")
      DRCI.dispose_trash(scroll, @worn_trashcan, @worn_trashcan_verb)
    elsif (target = UserVars.stackers.find { |stacker| stacker['contents'].find { |data| data.first == spell_name } })
      stack_existing_scroll(target, scroll, spell_name, stacker_container)
    elsif (target = UserVars.stackers.find { |stacker| stacker['contents'].find(&:empty?) })
      stack_new_scroll(target, scroll, spell_name, stacker_container)
    end

    return unless checkleft || checkright

    DRCI.put_away_item?(scroll)
    @excess_scrolls << spell_name
  end

  def stack_new_scroll(target, scroll, spell_name, stacker_container)
    if stacker_container
      DRCI.get_item?(target['name'], stacker_container)
    else
      DRCI.get_item?(target['name'])
    end
    case DRC.bput("push my #{target['name']} with my #{scroll}", 'Not finding a match', 'you realize there')
    when /you realize/i
      echo('Unexpected, please report error')
      exit
    when /not finding/i
      slot = target['contents'].index([])
      target['contents'][slot] = [spell_name, 1]
      if stacker_container
        DRCI.put_away_item?(target['name'], stacker_container)
      else
        DRCI.put_away_item?(target['name'])
      end
    end
  end

  def stack_existing_scroll(target, scroll, spell_name, stacker_container)
    if stacker_container
      DRCI.get_item?(target['name'], stacker_container)
    else
      DRCI.get_item?(target['name'])
    end
    case DRC.bput("push my #{target['name']} with my #{scroll}", 'you find room', 'you realize there')
    when /you realize/i
      # todo
    when /you find room/i
      target['contents'].each_with_index do |data, index|
        if data.first == spell_name
          target['contents'][index] = [data.first, data.last + 1]
          break
        end
      end
    end

    if stacker_container
      DRCI.put_away_item?(target['name'], stacker_container)
    else
      DRCI.put_away_item?(target['name'])
    end
  end
end

ScrollStack.new

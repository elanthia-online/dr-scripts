=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#pattern_hues
=end

custom_require.call(%w(common))
no_pause_all

class PatternHues
  include DRC

  def initialize
    arg_definitions = [
    [
      { name: 'timing', regex: /now/i, optional: true, description: 'Run now or continual.' },
    ]
    ]

    args = parse_args(arg_definitions)
    @settings = get_settings
    now = Time.now
    duration = @settings.pattern_hues['duration']

    adj = @settings.pattern_hues['pattern_hues_styles']['pattern'] ||
      adj = ['bright', 'crystalline', 'gleaming', 'glimmering', 'glistening',\
      'hazy', 'iridescent', 'lucent', 'opalescent', 'phosphorescent', 'relucent',\
      'scintillating', 'shadowy', 'shimmering', 'sparkling', 'translucent']

    color = @settings.pattern_hues['pattern_hues_styles']['hue'] ||
      color = ['alabaster', 'white', 'amber', 'aqua', 'ash grey', 'azure',\
      'blizzard', 'blue-white', 'beige', 'blue', 'bone white', 'brackish brown',\
      'burgundy', 'charcoal black', 'chartreuse', 'chrome', 'cobalt blue',\
      'crimson', 'cyan', 'deep sable', 'dirt brown', 'emerald green',\
      'flame red', 'fog white', 'fuschia', 'gold-flecked', 'grey',\
      'indigo', 'jade', 'lavender', 'lurid green', 'lustrous golden',\
      'magenta', 'magma red', 'maroon', 'mauve', 'moss-green',\
      'obsidian black', 'ochre', 'olive', 'orange', 'peach', 'pink', 'puce',\
      'pumpkin orange', 'purple', 'red', 'ruby red', 'ruddy sanguine',\
      'russet', 'rust red', 'sea-green', 'seafoam green', 'seaweed green',\
      'silver', 'silver-flecked', 'sky blue', 'slate grey', 'snowflake white',\
      'soot black', 'steel grey', 'storm grey', 'sunfire gold', 'taupe', 'topaz yellow',\
      'turquoise', 'umber', 'violet', 'wheat gold', 'white', 'white-gold', 'yellow']

    if args.timing
      cast_pattern_hues
      exit
    else
      loop do
        if now < (Time.now - duration)
          cast_pattern_hues
        end
        now = Time.now
        sleep 60
      end
    end
  end

  def cast_pattern_hues
    pause_scripts
    bput("prep cantrip pattern hues", "You are now prepared to cast the Pattern Hues cantrip.","You already have")
    if @settings.pattern_hues['gesture'] == "random"
      bput("gesture #{adj.sample} #{color.sample}", "You trace the complex sigils of the Pattern Hues cantrip around yourself.", "You already have")
    else
      bput("gesture #{@settings.pattern_hues['gesture']}", "You trace the complex sigils of the Pattern Hues cantrip around yourself.", "You already have")
    end
    unpause_scripts
  end

  def pause_scripts
    Script.running.find_all { |s| not s.paused? and not s.no_pause_all }.each { |s| s.pause; did_something  = true }
  end

  def unpause_scripts
    Script.running.find_all { |s| s.paused? and not s.no_pause_all }.each { |s| s.unpause; did_something = true }
  end

end
PatternHues.new
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#first-aid
  Advanced Options:  https://github.com/rpherbig/dr-scripts/wiki/First-Aid-Strategy
=end

custom_require.call(%w[common common-travel drinfomon equipmanager])

class FirstAid
  def initialize
    arg_definitions = [
      [
        { name: 'skill_focus', regex: /scholarship|both/i, optional: true, description: 'Skill to focus on OTHER than first aid, which is the default. Specify "scholarship" or "both" to train otherwise.' },
        { name: 'script_summary', optional: true, description: 'Trains the First Aid skill by reading compendiums or textbooks.' }
      ]
    ]

    args = parse_args(arg_definitions)

    @skill_focus = args.skill_focus || 'First Aid'

    @settings = get_settings
    @chart_data = get_data('anatomy-charts').first_aid_charts
    @performance_pause = @settings.performance_pause
    @num_charts = @settings.number_of_firstaid_charts

    echo "Skill focus is: #{@skill_focus}"

    if @settings.bleed_bot
      DRCT.walk_to(@settings.bleed_bot_room)
      start_script('tendother', [@settings.bleed_bot])
      pause 10
      stop_script('tendother')
      return
    end

    if @settings.textbook
      @booktype = @settings.textbook_type
      textbook_charts
    else
      @booktype = @settings.compendium_type
      compendium_charts
    end
  end

  def compendium_charts
    unless @settings.instrument
      pause @performance_pause # to give performance time to complete before_dying if stopped from the previous script
      start_script('performance', ['noclean']) unless Script.running?('performance')
    end
    unless DRCI.get_item_if_not_held?(@booktype)
      DRC.message("Could not get #{@booktype}, exiting.")
      exit
    end
    DRC.bput("look my #{@booktype}", /^The \w+ lies open to the section on .* physiology/)
    pause
    compendium_charts = reget(40).grep(/^   .+$/).map(&:strip)
    charts_to_read = @chart_data.select { |name, _info| compendium_charts.include?(name) }
    study_charts(charts_to_read)
  end

  def textbook_charts
    unless @settings.instrument
      pause @performance_pause # to give performance time to complete before_dying if stopped from the previous script
      start_script('performance', ['noclean']) unless Script.running?('performance')
    end
    unless DRCI.get_item_if_not_held?(@booktype)
      DRC.message("Could not get #{@booktype}, exiting.")
      exit
    end
    DRC.bput("open my #{@booktype}", 'You open your', 'That is already open')
    study_charts(@chart_data)
  end

  def study_charts(charts_to_read)
    charts_to_read
      .map { |_name, info| info }
      .select { |info| info['scholarship'] <= effective_scholarship }
      .sort_by { |info| info['scholarship'] }
      .reverse
      .take(@num_charts)
      .each do |info|
        case DRC.bput("turn my #{@booktype} to #{info['index']}", 'You turn', 'That section does not exist', 'Turn what?', 'almost impossible to do')
        when 'You turn'
          case DRC.bput("study my #{@booktype}", 'You attempt to study', 'find it almost impossible to do', 'gradually absorbing', 'difficult time comprehending the advanced text', 'suddenly makes sense to you', '^Why ', 'You need to be holding', 'discerned all you can')
          when 'gradually absorbing'
            3.times { result = DRC.bput("study my #{@booktype}", /Roundtime/, /makes sense/, /discerned all you can/); break if (result == 'makes sense' || result == 'discerned all you can') }
          when 'You need to be holding'
            DRC.bput("get my #{@booktype}", 'You get', 'You are already holding')
          end
          waitrt?

          unless @skill_focus == 'both'
            break if DRSkill.getxp("#{@skill_focus.split.map(&:capitalize).join(' ')}") >= 32
          else
            break if DRSkill.getxp('First Aid') >= 32 && DRSkill.getxp('Scholarship') >= 32
          end
        end
      end
  end

  def effective_scholarship
    if @settings.firstaid_scholarship_modifier
      skill = DRSkill.getrank('Scholarship') - @settings.firstaid_scholarship_modifier
    elsif DRSkill.getrank('Scholarship') <= 100
      skill = DRSkill.getrank('Scholarship')
    else
      skill = DRSkill.getrank('Scholarship') / 1.6
    end
    skill
  end
end

before_dying do
  EquipmentManager.new.empty_hands
  stop_script('performance') if Script.running?('performance')
end

# Call this last to avoid the need for forward declarations
FirstAid.new

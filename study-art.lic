=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#study-art
=end

custom_require.call(%w[common common-travel])

class StudyArt
  def initialize
    arg_definitions = [
      [
        { name: 'skill', options: %w[appraisal scholarship], description: 'skill to stop on' }
      ],
      []
    ]

    args = parse_args(arg_definitions)

    @stop_skill = args.skill || 'scholarship'
    performance_pause = get_settings.performance_pause

    art_options = get_data('art').art_options
    pause performance_pause unless Script.running?('crossing-training') # to give performance time to complete before_dying if stopped from the previous script
    start_script('performance', ['noclean']) unless Script.running?('performance') || Script.running?('crossing-training')
    study_art(art_options)
  end

  def study_art(art_options)
    art_options.each do |data|
      break unless study?(data['room'], data['targets'])
    end
  end

  def study?(room, targets)
    DRCT.walk_to(room)
    targets.each do |target|
      DRC.bput("study #{target}", 'Roundtime:')
      # wait to finish studying
      waitrt?
      # give other background scripts (e.g. performance, sanowret)
      # a chance to do their thing (e.g. restart song, gaze crystal)
      pause 2
      if @stop_skill == 'appraisal' && DRSkill.getxp('Appraisal') >= 30 ||
         @stop_skill == 'scholarship' && DRSkill.getxp('Scholarship') >= 30
        return false
      end
    end
    true
  end
end

before_dying do
  stop_script('performance') if Script.running?('performance')
end

StudyArt.new

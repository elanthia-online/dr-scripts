=begin
Empathy training loop:
- Walk to plant room (plant_drop_room if provided, otherwise hometown NPC Empath)
- Ensure EV, touch plant up to X times
- Go to healing room (plant_healing_room or safe_room) and run `healme`
- Then walk to @castroom and cast EV again for others (using @ev_mana), then exit
- Repeat until Empathy >= plant_empathy_threshold unless plant_heal_past_ML is true

YAML Settings:
  plant_total_touch_count: 3
  plant_drop_room:<room> room it will go to when it starts prepping your spells and EV to heal it!
  plant_healing_room:<room> also same room as where you prep the spells in!
  plant_empathy_threshold: 24
  plant_prep_room:<room> room you will prep spells in.
  plant_heal_past_ML: false
  cast_room: <room> where you will cast the final EV plant for others to use!

Optional ritual focus for EV:
  ritual_focus_item: "<ritual focus>" What is your focus item?
  ritual_focus_container: "backpack" Where are you storing it?
  ritual_focus_hand: "right" What hand will it be in?
  ritual_focus_invoke_cmd: "invoke my focus" Self-explanatory, right?
  ritual_focus_stow_after: true
  ritual_ev_mana: 600 Use discern EV, if you honestly don't know.
  ritual_ev_extra_wait: 15 How much time to wait after the RT ends to cast? Default is 15 can set to what you need it to be!
=end

class PlantHeal
  unless DRStats.empath?
    DRC.message('***Must be an Empath with the Embrace of the Vela\'Tohr spell to run this!***')
    exit
  end

  def initialize
    settings = get_settings

    @healpastML = %w[true 1 yes y].include?(settings.plant_heal_past_ML.to_s.strip.downcase)
    DRC.message("*** Missing setting: plant_heal_past_ML (default=false)") if settings.plant_heal_past_ML.nil?

    @threshold = settings.plant_empathy_threshold.to_i
    DRC.message("*** Missing setting: plant_empathy_threshold (default=24)") if settings.plant_empathy_threshold.nil?

    @touch_total = (settings.plant_total_touch_count.to_i.nonzero? || 3)
    DRC.message("*** Missing setting: plant_total_touch_count (default=3)") if settings.plant_total_touch_count.nil?

    @droproom = settings.plant_drop_room.to_i
    DRC.message("*** Missing setting: plant_drop_room (default=0)") if settings.plant_drop_room.nil?

    @healingroom = (settings.plant_healing_room.to_i.nonzero? || settings.safe_room.to_i)
    DRC.message("*** Missing setting: plant_healing_room (default=safe_room)") if settings.plant_healing_room.nil?

    @preproom = settings.plant_prep_room.to_i
    DRC.message("*** Missing setting: plant_prep_room (default=0)") if settings.plant_prep_room.nil?

    @castroom = settings.cast_room.to_i
    DRC.message("*** Missing setting: cast_room (default=0)") if settings.cast_room.nil?

    @focus_item = settings.ritual_focus_item.to_s.strip
    DRC.message("*** Missing setting: ritual_focus_item (default='')") if settings.ritual_focus_item.nil?

    @focus_container = settings.ritual_focus_container.to_s.strip
    DRC.message("*** Missing setting: ritual_focus_container (default='')") if settings.ritual_focus_container.nil?

    @focus_invoke = settings.ritual_focus_invoke_cmd.to_s.strip
    DRC.message("*** Missing setting: ritual_focus_invoke_cmd (default='')") if settings.ritual_focus_invoke_cmd.nil?

    @focus_stow = %w[true 1 yes y].include?(settings.ritual_focus_stow_after.to_s.strip.downcase)
    DRC.message("*** Missing setting: ritual_focus_stow_after (default=false)") if settings.ritual_focus_stow_after.nil?

    @ev_mana = (settings.ritual_ev_mana.to_i.nonzero? || 600) # used for cast_for_others
    DRC.message("*** Missing setting: ritual_ev_mana (default=600)") if settings.ritual_ev_mana.nil?

    @ev_extra_wait = (settings.ritual_ev_extra_wait.to_i.nonzero? || 15)
    DRC.message("*** Missing setting: ritual_ev_extra_wait (default=15)") if settings.ritual_ev_extra_wait.nil?

    town_data = get_data('town')
    hometown = settings.force_healer_town ? town_data[settings.force_healer_town] : town_data[settings.hometown]

    if @droproom.nonzero?
      @plantroom = @droproom
    elsif hometown && hometown['npc_empath'] && hometown['npc_empath']['id']
      @plantroom = hometown['npc_empath']['id'].to_i
    else
      DRC.message("Couldn't resolve NPC healer room from hometown settings. Set plant_drop_room.")
      exit
    end

    DRCI.stow_hands
    check_plant
  end

  # Start at preproom, light EV prep, then main loop
  def check_plant
    echo "Checking plant!"
    DRCT.walk_to(@preproom.nonzero? ? @droproom : @plantroom)
    heal_ev
    healplant
  end

  # Check mindstate
  def healplant
    loop do
      mindstate_check
      prep_waggles_if_needed
      touchplant
    end
  end

  def prep_waggles_if_needed
    if @preproom.nonzero?
      DRCT.walk_to(@preproom)
      ensure_ev(prep_ok: false)
    else
      ensure_ev(prep_ok: false)
    end
  end

  def plant_noun_in_room
    obj = DRRoom.room_objs.grep(/vela'tohr (plant|thicket|bush|briar|shrub|thornbush)/i).first
    return nil unless obj
    m = obj.match(/vela'tohr (\w+)/i)
    m && m[1].downcase
  end

  def get_focus
    return if @focus_item.empty?
    if !@focus_container.empty?
      DRC.bput("get #{@focus_item} from #{@focus_container}",
               'You get', 'You are already holding', 'What were you referring')
    else
      DRC.bput("get #{@focus_item}",
               'You get', 'You are already holding', 'What were you referring')
    end
  end

  def stow_focus
    return unless @focus_stow
    return if @focus_item.empty?
    if !@focus_container.empty?
      fput("stow #{@focus_item} in #{@focus_container}")
    else
      fput("stow #{@focus_item}")
    end
  end

  def invoke_focus
    return if @focus_item.empty? || @focus_invoke.empty?
    res = DRC.bput(@focus_invoke,
                   'Roundtime',
                   'You focus your will',
                   'You begin attuning',
                   'is already prepared',
                   'need a ritual focus',
                   'You must be holding',
                   'You are not holding',
                   'Invoke what?')
    if res =~ /(need a ritual focus|must be holding|are not holding|Invoke what\?)/i
      get_focus
      res = DRC.bput(@focus_invoke,
                     'Roundtime', 'You focus your will', 'You begin attuning', 'is already prepared')
    end
    res
  end

  # Plant healing phase, casting here we go!
  def heal_ev
    echo "starting healing of plant now"
    sleep(1)
    get_focus unless @focus_item.empty?

    DRC.bput("prepare EV 20",
             'You begin to prepare',
             'With rigid movements you prepare your body',
             'You feel intense strain',
             'You are already preparing',
             'You are already preparing the Embrace of the Vela\'Tohr spell!')

    invoke_focus unless @focus_item.empty?

    waitrt?
    sleep @ev_extra_wait

    DRC.bput('cast',
             'You gesture',
             'You strain, but are too mentally fatigued',
             'You aren\'t harnessing any mana',
             'You lose your concentration',
             'Roundtime')

    stow_focus
  end

  # Keep EV up during loop
  def ensure_ev(prep_ok: true)
    return if DRSpells.active_spells.include?("Embrace of the Vela'Tohr")

    DRCT.walk_to(@preproom) if @preproom.nonzero? && prep_ok

    get_focus unless @focus_item.empty?

    DRC.bput("prepare EV 20",
             'You begin to prepare',
             'With rigid movements you prepare your body',
             'You feel intense strain',
             'You are already preparing',
             'You are already preparing the Embrace of the Vela\'Tohr spell!')

    invoke_focus unless @focus_item.empty?

    waitrt?
    sleep @ev_extra_wait

    DRC.bput('cast',
             'You gesture',
             'You strain, but are too mentally fatigued',
             'You aren\'t harnessing any mana',
             'You lose your concentration',
             'Roundtime')

    stow_focus
    touchplantdone
  end

  # Cast @castroom for others to utilize the ev, then move on to exit
  def cast_for_others
    return exit unless @castroom.nonzero?
    DRCT.walk_to(@castroom)

    get_focus unless @focus_item.empty?

    DRC.bput("prepare EV #{@ev_mana}",
             'You begin to prepare',
             'With rigid movements you prepare your body',
             'You feel intense strain',
             'You are already preparing',
             'You are already preparing the Embrace of the Vela\'Tohr spell!')

    invoke_focus unless @focus_item.empty?

    waitrt?
    sleep @ev_extra_wait

    DRC.bput('cast',
             'You gesture',
             'You strain, but are too mentally fatigued',
             'You aren\'t harnessing any mana',
             'You lose your concentration',
             'Roundtime')

    stow_focus
    DRC.message("Cast EV in cast_room for others, exiting script.")
    exit
  end

  # plant touching, up to @touch_total
  def touchplant
    noun = plant_noun_in_room || "plant"
    need_no_heal = /indicating your vela'tohr (plant|thicket|bush|briar|shrub|thornbush) has no need of healing\./i

    touches = 0
    loop do
      result = DRC.bput("touch #{noun}", # you can use hug or whatever here rather than touch!
                        'Roundtime',
                        need_no_heal,
                        'has no need of healing.',
                        'you have no empathic bond',
                        'Touch what?')

      case result
      when need_no_heal, /has no need of healing\./i
        return planthealed
      when /you have no empathic bond/i
        return planthealed
      when /Touch what\?/i
        return planthealed
      when 'Roundtime'
        touches += 1
        break if touches >= @touch_total
        sleep 0.6
        next
      else
        # Unknown line; proceed to self-heal conservatively
        return planthealed
      end
    end

    planthealed
  end

  # Single touch path after ensure_ev
  def touchplantdone
    noun = plant_noun_in_room || "plant"
    need_no_heal = /indicating your vela'tohr (plant|thicket|bush|briar|shrub|thornbush) has no need of healing\./i

    result = DRC.bput("touch #{noun}",
                      'Roundtime',
                      need_no_heal,
                      'has no need of healing.',
                      'you have no empathic bond',
                      'Touch what?')

    case result
    when need_no_heal, /has no need of healing\./i
      wrapup
    when /you have no empathic bond/i
      ensure_ev
    when 'Roundtime'
      wrapup
    when /Touch what\?/i
      ensure_ev
    else
      wrapup
    end
  end

  def wrapup
    DRCT.walk_to(@healingroom)
    DRC.wait_for_script_to_complete('healme')
    cast_for_others
  end

  def planthealed
    DRCT.walk_to(@healingroom)
    DRC.wait_for_script_to_complete('healme')
    DRC.message("Plant was fully healed")
    fput "release ev"
    cast_for_others
  end

  def mindstate_check
    echo "checking mindstate!"
    return if @healpastML
    if DRSkill.getxp('Empathy') >= @threshold
      DRC.message("Mind State at target, exiting script!")
      exit
    end
  end
end

PlantHeal.new

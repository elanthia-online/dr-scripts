=begin
Empathy training loop:
- Walk to plant room (plant_drop_room if provided, otherwise hometown NPC Empath)
- Ensure EV, touch plant up to X times
- Go to healing room (plant_healing_room or safe_room) and run `healme`
- Then walk to @castroom and cast EV again for others (using @ev_mana), then exit
- Repeat until Empathy >= plant_empathy_threshold unless plant_heal_past_ML is true

YAML Settings:
  plant_total_touch_count: 3
  plant_drop_room: <room> # where you drop the plant the first time and start healing it
  plant_empathy_threshold: 24
  plant_heal_past_ML: false
  cast_room: <room>

Optional ritual focus for EV:
  ritual_focus_item: "<ritual focus>"
  ritual_focus_container: "backpack"
  ritual_focus_invoke_cmd: "invoke my <focus>"
=end

class PlantHeal
  unless DRStats.empath?
    DRC.message('***Must be an Empath with the EV spell to run this!***')
    exit
  end

  def select_plant_waggle(settings)
    return nil unless settings.respond_to?(:waggle_sets) && settings.waggle_sets.is_a?(Hash)
    if settings.waggle_sets.key?('plant_heal')
      'plant_heal'
    elsif settings.waggle_sets.key?('default')
      DRC.message("Note: using waggle set 'default' (no 'plant_heal' set found).")
      'default'
    else
      DRC.message("No waggle sets defined for plant healing; skipping ;buff and using direct EV.")
      nil
    end
  end

  def prep_ev!(mana)
    DRC.bput("prepare EV #{mana}",
             'You begin to prepare',
             'With rigid movements you prepare your body',
             'You are already preparing',
             "You are already preparing the Embrace of the Vela'Tohr spell!",
             'You feel intense strain')
  end

  def initialize
	if (scr = Script.running.find { |s| s.name =~ /sanowret-crystal/i })
    scr.pause
    end

    settings = get_settings
    @healpastML  = %w[true 1 yes y].include?(settings.plant_heal_past_ML.to_s.strip.downcase)
    DRC.message("*** Missing setting: plant_heal_past_ML (default=false)") if settings.plant_heal_past_ML.nil?

    @threshold   = (settings.plant_empathy_threshold.to_i.nonzero? || 24)
    DRC.message("*** Missing setting: plant_empathy_threshold (default=24)") if settings.plant_empathy_threshold.nil?

    @touch_total = (settings.plant_total_touch_count.to_i.nonzero? || 3)
    DRC.message("*** Missing setting: plant_total_touch_count (default=3)") if settings.plant_total_touch_count.nil?

    @droproom    = settings.plant_drop_room.to_i
    DRC.message("*** Missing setting: plant_drop_room (default=0)") if settings.plant_drop_room.nil?

    @castroom    = settings.cast_room.to_i
    DRC.message("*** Missing setting: cast_room (default=0)") if settings.cast_room.nil?

    @focus_item  = settings.ritual_focus_item.to_s.strip
    DRC.message("*** Missing setting: ritual_focus_item (default='')") if settings.ritual_focus_item.nil?

    @focus_container = settings.ritual_focus_container.to_s.strip
    DRC.message("*** Missing setting: ritual_focus_container (default='')") if settings.ritual_focus_container.nil?

    @focus_invoke = settings.ritual_focus_invoke_cmd.to_s.strip
    DRC.message("*** Missing setting: ritual_focus_invoke_cmd (default='')") if settings.ritual_focus_invoke_cmd.nil?

    @focus_stow = true

    @ev_mana = 600 #set based on discern ev in game.
    @ev_mana_low   = 300 # 300 is minimum
    @ev_extra_wait = 15 # You can set this to what you need

    if settings.respond_to?(:waggle_sets) && settings.waggle_sets.is_a?(Hash)
      if settings.waggle_sets.key?('plant_heal')
        @plant_waggle = 'plant_heal'
      else
        DRC.message("No waggle sets named 'plant_heal' or 'default'; will skip ;buff and prep EV directly.")
        @plant_waggle = nil
      end
    else
      DRC.message("No waggle_sets defined in settings; will skip ;buff and prep EV directly.")
      @plant_waggle = nil
    end

    town_data = get_data('town')
    hometown  = settings.force_healer_town ? town_data[settings.force_healer_town] : town_data[settings.hometown]

    if @droproom.nonzero?
      @droproom= @droproom
    elsif hometown && hometown['npc_empath'] && hometown['npc_empath']['id']
      @plantroom = hometown['npc_empath']['id'].to_i
    else
      DRC.message("Couldn't resolve NPC healer room from hometown settings. Set plant_drop_room.")
      exit
    end

    DRCI.stow_hands
    check_plant
  end

  # Start at preproom, light EV prep, then main loop
  def check_plant
    echo "Prepping and casting EV plant"
    DRCT.walk_to(@droproom)
    heal_ev
    healplant
  end

  def healplant
    loop do
      mindstate_check
      prep_waggles_if_needed
      touchplant
    end
  end

  def prep_waggles_if_needed
    DRCT.walk_to(@preproom) if @preproom.nonzero?
    ensure_ev(prep_ok: false)
  end

  def plant_noun_in_room
    obj = DRRoom.room_objs.grep(/vela'tohr (plant|thicket|bush|briar|shrub|thornbush)/i).first
    return nil unless obj
    m = obj.match(/vela'tohr (\w+)/i)
    m && m[1].downcase
  end

  def get_focus
    return if @focus_item.empty?
    if !@focus_container.empty?
      DRC.bput("get #{@focus_item} from #{@focus_container}",
               'You get', 'You are already holding', 'What were you referring')
    else
      DRC.bput("get #{@focus_item}",
               'You get', 'You are already holding', 'What were you referring')
    end
  end

  def stow_focus
    return unless @focus_stow
    return if @focus_item.empty?
    if !@focus_container.empty?
      fput("stow #{@focus_item} in #{@focus_container}")
    else
      fput("stow #{@focus_item}")
    end
  end

  def invoke_focus
    return if @focus_item.empty? || @focus_invoke.empty?
    res = DRC.bput(@focus_invoke,
                   'Roundtime',
                   'You focus your will',
                   'You begin attuning',
                   'is already prepared',
                   'need a ritual focus',
                   'You must be holding',
                   'You are not holding',
                   'Invoke what?',
                   'You must begin preparing a ritual spell')
    if res =~ /(need a ritual focus|must be holding|are not holding|Invoke what\?)/i
      get_focus
      res = DRC.bput(@focus_invoke,
                     'Roundtime', 'You focus your will', 'You begin attuning', 'is already prepared')
    end
    res
  end

  def heal_ev
    echo "starting healing of plant now"
    sleep(1)
    get_focus unless @focus_item.empty?

    prep_ev!(@ev_mana_low)
    invoke_focus

    waitrt?
    sleep @ev_extra_wait

    cast_res = DRC.bput('cast',
                        'You gesture',
                        'You strain, but are too mentally fatigued',
                        'You aren\'t harnessing any mana',
                        'You lose your concentration',
                        'Roundtime')

    if cast_res =~ /aren't harnessing any mana/i
      DRC.message("No mana harnessed; re-prepping EV #{@ev_mana_low} and retrying.")
      prep_ev!(@ev_mana_low)
      waitrt?
      sleep @ev_extra_wait
      DRC.bput('cast',
               'You gesture',
               'You strain, but are too mentally fatigued',
               'You aren\'t harnessing any mana',
               'You lose your concentration',
               'Roundtime')
    end
    stow_focus
  end

  # Keep EV up during loop
  def ensure_ev(prep_ok: true)
    return if DRSpells.active_spells.include?("Embrace of the Vela'Tohr")

    DRCT.walk_to(@preproom) if @preproom.nonzero? && prep_ok

    if @plant_waggle
      # Let ;buff handle EV completely; do NOT invoke or cast again here.
      DRC.wait_for_script_to_complete('buff', [@plant_waggle])
      return
    end

    # Fallback path without ;buff: one prep + (optional) invoke + one cast (single retry on no-harness)
    get_focus unless @focus_item.empty?
    prep_ev!(@ev_mana_low)
    invoke_focus unless @focus_item.empty?

    waitrt?
    sleep @ev_extra_wait

    cast_res = DRC.bput('cast',
                        'You gesture',
                        'You strain, but are too mentally fatigued',
                        'You aren\'t harnessing any mana',
                        'You lose your concentration',
                        'Roundtime')

    if cast_res =~ /aren't harnessing any mana/i
      DRC.message("No mana harnessed on ensure; preparing again and retrying once.")
      prep_ev!(@ev_mana_low)
      waitrt?
      sleep @ev_extra_wait
      DRC.bput('cast',
               'You gesture',
               'You strain, but are too mentally fatigued',
               'You aren\'t harnessing any mana',
               'You lose your concentration',
               'Roundtime')
    end

    stow_focus
  end

  def cast_for_others
    DRCT.walk_to(@castroom)

    if @plant_waggle

      DRC.wait_for_script_to_complete('buff', [@plant_waggle])

    end

    DRC.message("Your new EV plant is up! Exiting now.")
    exit
  end

  # plant touching, up to @touch_total
  def touchplant
    echo "plant healing!"
    noun = plant_noun_in_room || "plant"
    need_no_heal = /indicating your vela'tohr (plant|thicket|bush|briar|shrub|thornbush) has no need of healing\./i

    touches = 0
    loop do
      result = DRC.bput("touch #{noun}",
                        'Roundtime',
                        'plant looks healthier',
                        need_no_heal,
                        'has no need of healing.',
                        'you have no empathic bond',
                        'Touch what?')

      case result
      when /plant looks healthier/i
        touches += 1
        break if touches >= @touch_total
        waitrt?
        sleep 0.6
		checkheal
        next
      when need_no_heal, /has no need of healing\./i
        return wrapup
      when /you have no empathic bond/i
        ensure_ev
        noun = plant_noun_in_room || noun
        next
      when /Touch what\?/i
        return ensure_ev
      when 'Roundtime'
        touches += 1
        break if touches >= @touch_total
        sleep 0.6
		checkheal
        next
      else
        # Unknown line; proceed to self-heal conservatively
        return planthealed
      end
    end
  end

  def checkheal
    DRC.wait_for_script_to_complete('healme')
    touchplant
  end

  def wrapup
    echo "Wrapping up"
    DRCT.walk_to(@castroom)
    fput "release ev"
    mindstate_check
    sleep(8)
    cast_for_others
  end

  def planthealed
    DRC.wait_for_script_to_complete('healme')
    echo "plant was healed up"
    DRCT.walk_to(@castroom)
    DRC.message("Plant was fully healed")
    fput "release ev"
    wrapup
  end

  def mindstate_check
    echo "checking mindstate!"
    return if @healpastML
    if DRSkill.getxp('Empathy') >= @threshold
      DRC.message("Mind State at target, exiting script!")
      exit
    end
  end
end

PlantHeal.new

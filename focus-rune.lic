=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#focus-rune
=end

custom_require.call(%w[common-travel common common-items common-arcana spellmonitor])

class Runestone
  include DRC
  include DRCT
  include DRCI
  include DRCA

  def initialize
    arg_definitions = [
      [
        { name: 'spell',
          regex: /^[A-z\s\-']+$/i,
          variable: true,
          description: "Specify spell to cast from runestone. Spells are: 'Eagle's Cry'
                'Protection from Evil' Refresh 'Glythtide's Gift' Shadows 'Arc Light'
                Geyser Bless 'Fire Shards' Althleticism Calm Zephyr Compost
                'Clear Vision.' Use double quotes." },

        { name: 'debug',
          regex: /debug/i,
          optional: true }
      ]
    ]

    args = parse_args(arg_definitions)
    spell = args.spell
    @debug = args.debug
    settings = get_settings
    @runestone_storage = settings.runestone_storage
    @harness = settings.runestone_harness
    runestone_purchase = settings.runestone_purchase

    echo spell if @debug
    echo @harness if debug
    @rune = spell_name(spell)
    echo @rune if @debug

    ### Because Protection from Evil has a lowercase letter for the middle word
    ### this work around is required.
    if spell == "protection from evil"
      temp = "Protection from Evil"
    else
      temp = spell.split(/ |\_|\-/).map(&:capitalize).join(" ")
    end
    echo temp if @debug
    until DRSpells.active_spells.include?(temp)
      pause 1 while mana < 40
      if DRCI.exists?("#{@rune} runestone in #{@runestone_storage}")
        runestone_cast
      elsif runestone_purchase
        buy_runestone
      else
        DRC.message("*** Out of #{@rune} runestones! ***") unless runestone_purchase
        beep
        exit
      end
    end
  end

  def spell_name(rune)
    runestone_map = { "eagle's cry" => 'electrum', 'protection from evil' => 'topaz',
        'refresh' => 'quartz', "glythtide's gift" => 'axinite',
        'shadows' => 'azurite', 'arc Light' => 'calavarite',
        'geyser' => 'celestite', 'bless' => 'elbaite',
        'fire shards' => 'rhodonite', 'athleticism' => 'selenite',
        'calm' => 'xibaryl', 'zephyr' => 'imnera',
        'compost' => 'asketine', "clear vision" => 'avaes' }
    runestone_map[rune] ? runestone_map[rune] : rune
  end

  def runestone_cast
    DRCI.get_item("#{@rune} runestone", @runestone_storage)
    if reget(3, "You get a useless #{@rune} runestone")
      DRCI.dispose_trash("#{@rune} runestone")
      return
    end
    case bput('invoke my rune', 'Closing your eyes', 'Well, that was fun', 'backfire', 'The spell pattern resists')
    when 'Well, that was fun'
      waitrt?
      DRCI.dispose_trash("#{@rune} runestone")
      runestone_cast
    when 'backfire','The spell pattern resists'
      return
    end
    waitcastrt?
    bput("harn #{@harness}", 'You tap into the mana')
    waitrt?
    bput('cast', 'You')
    waitrt?
    DRCI.put_away_item?("#{@rune} runestone", @runestone_storage)
  end

  def buy_runestone
    current_room = Room.current.id
    DRC.wait_for_script_to_complete('restock')
    DRCT.walk_to(current_room)
  end

  before_dying do

  end
end

Runestone.new
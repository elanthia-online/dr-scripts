=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#tinker
=end

custom_require.call(%w[common common-arcana common-crafting common-items])

class Tinker
  def initialize
    @settings = get_settings
    @hometown = @settings.force_crafting_town || @settings.hometown
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.engineering_belt
    @cube = @settings.cube_armor_piece
    @engineering_belt = @settings.engineering_belt
    @stamp = @settings.mark_crafted_goods
    @adjustable_tongs = @settings.adjustable_tongs

    arg_definitions = [
      [
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s\-']+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'material', regex: /\w+/i, variable: true, description: 'Type of material.' },
        { name: 'noun', regex: /\w+/i, variable: true },
        { name: 'skip', regex: /skip/i, optional: true, description: 'Optional setting to skip restocking consumables if low (glue/stain)' },
        { name: 'mechanism', regex: /\w+/i, variable: true, optional: true, description: 'What metal mechanism to use -brass-oravir-etc. Optional.' }
      ],
      [
        { name: 'instructions', regex: /instructions/i, description: 'Instructions if using instructions' },
        { name: 'material', regex: /\w+/i, variable: true, description: 'Type of material to use.' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item being crafted' },
        { name: 'skip', regex: /skip/i, optional: true, description: 'Optional setting to skip restocking consumables if low (glue/stain)' }
      ],
      [
        { name: 'resume', regex: /resume/i, variable: true, description: 'Attempts to resume work on an ongoing project, must be holding the item' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'NOUN of the item you wish to resume.' },
        { name: 'skip', regex: /skip/i, optional: true, description: 'Optional setting to skip restocking consumables if low (glue/stain)' }
      ],
      [
        { name: 'recipe_name', display: 'enhancement', options: %w[laminate lighten cable], description: 'Enhancements to crafted bows' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item being enhanced.' },
        { name: 'skip', regex: /skip/i, optional: true, description: 'Optional setting to skip restocking consumables if low (glue/stain)' }
      ],
      [
        { name: 'mechanisms', regex: /mechanisms/i, description: 'Walk to an open gear press and make a single stack of mechanisms from an existing ingot.' },
        { name: 'material', regex: /\w+/i, variable: true, description: 'What type of metal ingot to use' },
        { name: 'number', regex: /\d+/i, optional: true, variable: true, description: 'How many sets of mechanisms to make (optional)' }
      ]
    ]
    echo
    args = parse_args(arg_definitions)
    @chapter = args.chapter
    @material = args.material
    @mechanism = args.mechanism
    @chapter = args.chapter ? args.chapter.to_i : 8
    @noun = args.noun
    @info = get_data('crafting')['shaping'][@hometown]
    args.number = args.number.to_i || 1
    @training_spells = @settings.crafting_training_spells
    args.recipe_name.sub!("lighten", "crossbow lightening")
    args.recipe_name.sub!("laminate", "crossbow lamination")
    args.recipe_name.sub!("cable", "crossbow cable-backing")
    @recipe_name = args.recipe_name

    DRC.wait_for_script_to_complete('buff', ['tinker'])
    Flags.add('tinkering-assembly', /with.*(backer) material/, /You need another bone, wood or horn (backing) material/, /another finished bow (string)/, /another finished (long|short) wooden (pole)/, /another .* leather (strip|cord)/, /need another (lenses)/, /another finished (mechanism)/, /You must assemble the (strips)/, /^You need another (.* boltheads)/, /You need another (bolt flights)/)
    Flags.add('tinker-done', /Applying the final touches/, /the successful (lamination|lightening|cable-backing) process/)

    if args.resume
      check_hand(@noun) unless DRCI.in_left_hand?(@noun)
      work("analyze my #{@noun}")
    elsif args.mechanisms
      DRCC.get_adjust_tongs?('reset shovel', @bag, @bag_items, @belt, true) if @settings.adjustable_tongs
      mechanisms(args)
    else
      DRCC.check_consumables('stain', @info['tool-room'], @info['stain-number'], @bag, @bag_items, @belt) unless args.skip
      DRCC.check_consumables('glue', @info['tool-room'], @info['glue-number'], @bag, @bag_items, @belt) unless args.skip
      work(prep)
    end
  end

  def check_hand(item)
    if DRCI.in_left_hand?(item)
      return
    elsif DRCI.in_right_hand?(item)
      DRC.bput('swap', 'You move', 'You have nothing')
    else
      DRC.message('***Please hold the item or material you wish to work on.***')
      magic_cleanup
      exit
    end
  end

  def swap_tool(next_tool, skip = false)
    next_tool = @settings.tinkering_tools.find { |tool| tool =~ /#{next_tool}/i } || next_tool
    return if DRCI.in_hands?(next_tool)

    if next_tool.include?('shovel') && @adjustable_tongs
      DRCC.get_adjust_tongs?('shovel', @bag, @bag_items, @belt, @adjustable_tongs)
    else
      DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
      DRCC.get_crafting_item(next_tool, @bag, @bag_items, @belt, skip)
    end
  end

  def prep
    DRCA.crafting_magic_routine(@settings)
    if @instruction
      DRCC.get_crafting_item("#{@noun} instructions", @bag, @bag_items, @belt)
      if /again/ =~ DRC.bput('study my instructions', 'Roundtime', 'Study them again')
        DRC.bput('study my instructions', 'Roundtime', 'Study them again')
      end
    else
      if @settings.master_crafting_book
        DRCC.find_recipe2(@chapter, @recipe_name, @settings.master_crafting_book, "tinkering")
      else
        DRCC.get_crafting_item("tinkering book", @bag, @bag_items, @belt)
        echo('*** You will need to upgrade to a journeyman or master book before 176 ranks! ***') if DRSkill.getrank('Engineering') == 175
        DRCC.find_recipe2(@chapter, @recipe_name)
        DRCC.stow_crafting_item("tinkering book", @bag, @belt)
      end
    end
    if @chapter == 8
      @stamp = false
      check_hand(@noun) unless DRCI.in_left_hand?(@noun)
      swap_tool('clamps')
      return "push my #{@noun} with my clamp"
    elsif @chapter == 7
      @stamp = false
      swap_tool('shaper')
      DRCC.get_crafting_item("bolt #{@material}", @bag, @bag_items, @belt)
      check_hand unless DRCI.in_left_hand?('shafts')
      return 'shape my shafts with my shaper'
    else
      swap_tool('drawknife')
      DRCC.get_crafting_item("#{@material} lumber", @bag, @bag_items, @belt)
      check_hand('lumber') unless DRCI.in_left_hand?('lumber')
      return 'scrape my lumber with my drawknife'
    end
  end

  def mechanisms(args)
    DRCC.find_shaping_room(@hometown)
    fput("turn press to 4")
    count = args.number
    count.times do
      DRCC.get_crafting_item("#{args.material} ingot", @bag, @bag_items, @belt)
      check_hand("#{args.material} ingot")
      swap_tool("shovel")
      DRC.bput("push fuel with my #{DRC.right_hand}", /^Roundtime/)
      swap_tool("pliers")
      @noun = "mechanisms"
      work('push my ingot with press')
      if args.number > 1 && count < args.number
        DRCC.get_crafting_item('mechanisms', @bag, @bag_items, @belt, true)
        fput('combine')
      end
      DRCC.stow_crafting_item('mechanisms', @bag, nil)
      count -= 1
    end
    DRCC.get_crafting_item("#{args.material} ingot", nil, nil, nil, true)
    DRCC.stow_crafting_item("#{args.material} ingot", @bag, nil) if DRC.right_hand
  end

  def assemble_part
    return unless Flags['tinkering-assembly']

    part = Flags['tinkering-assembly'].to_a[1..-1].join(' ')
    part.sub!("backing", "backer")
    part.sub!("mechanism", "#{@mechanism} #{part}")
    swap_tool(part)
    if part.include?("mechanism")
      until /is not required to continue crafting/ =~ DRC.bput("assemble my mechanism with my #{@noun}", /^You place your mechanisms/, /is not required to continue crafting/)
        pause 0.05
      end
    else
      DRC.bput("assemble my #{@noun} with my #{part}",
               'affix it securely in place', 'loop both ends', 'loop the string',
               'carefully mark where it will attach when you continue crafting',
               'add several marks indicating optimal locations')
    end
    Flags.reset('tinkering-assembly')
  end

  def work(command)
    DRC.bput("touch my #{@cube}", /^Warm vapor swirls around your head in a misty halo/, /^A thin cloud of vapor manifests with no particular effect./, /^Touch what/) if @cube
    loop do
      waitrt?
      DRCA.crafting_magic_routine(@settings)
      result = DRC.bput(command,
                        /a wood shaper is needed/, /haping with a wood shaper/, /^Using slow strokes you scrape/,
                        /continued knife carving/, /carv(ed|ing) with a knife/, /with a carving knife/, /trimmed with a carving knife/,
                        /rubbed out with a rasp/, /^A cluster of small knots/,
                        /^That tool does not seem suitable for that task/, /^You cannot figure out/, /doesn't appear suitable for working/,
                        /while it is inside of something/, /^You fumble around but/,
                        /^Glue should now be applied/, /glue to fasten it/, /application of glue/, /glue applied/,
                        /ready to be clamped/, /with clamps/,
                        /^Some wood stain/, /application of stain/,
                        /adjust(ing|ed) with some tinker's tools/,
                        /mechanisms must be affixed/, /pulling them into place/,
                        /pulling on the gear press/, /you are left with several complete mechanisms/,
                        /^You need at least/, /Roundtime/)
      case result
      when /a wood shaper is needed/, /haping with a wood shaper/, /Using slow strokes you scrape/, /Roundtime/
        waitrt?
        tool = 'shaper'
        command = "shape my #{@noun} with my shaper"
      when /continued knife carving/, /carv(ed|ing) with a knife/, /with a carving knife/, /trimmed with a carving knife/
        waitrt?
        tool = 'carving knife'
        command = "carve my #{@noun} with my knife"
      when /rubbed out with a rasp/, /A cluster of small knots/
        waitrt?
        tool = 'rasp'
        command = "scrape my #{@noun} with my rasp"
      when /ready to be clamped/, /with clamps/
        waitrt?
        tool = 'clamp'
        command = "push my #{@noun} with my clamp"
      when /Glue should now be applied/, /glue to fasten it/, /application of glue/, /glue applied/
        waitrt?
        tool = 'glue'
        command = "apply my glue to my #{@noun}"
      when /adjust(ing|ed) with some tinker's tools/
        waitrt?
        tool = 'tinker tools'
        command = "adjust my #{@noun} with my tinker tools"
      when /Some wood stain/, /application of stain/
        waitrt?
        tool = 'stain'
        command = "apply my stain to my #{@noun}"
      when /mechanisms must be affixed/, /pulling them into place/
        tool = 'pliers'
        command = "pull my #{@noun} with my pliers"
      when /while it is inside of something/, /You fumble around but/
        echo '*** ERROR TRYING TO CRAFT, EXITING ***'
        DRCI.stow_hands
        exit
      when /pulling on the gear press/
        command = "pull my #{@noun} with press"
      when /you are left with several complete mechanisms/
        DRCC.stow_crafting_item(DRC.right_hand, @bag, nil)
        return
      when /That tool does not seem suitable for that task/, /You cannot figure out/, /doesn't appear suitable for working/
        command = "analyze my #{@noun}"
      when /You need at least/
        echo '*** NOT ENOUGH MATERIAL, EXITING ***'
        exit
      end
      finish if Flags['tinker-done']
      assemble_part
      swap_tool(tool)
    end
  end

  def magic_cleanup
    return if @training_spells.empty?

    DRC.bput('prepare symbiosis', /^You recall the exact details of the/, /^But you've already prepared/, /^Please don't do that here/)
    DRC.bput('release symbiosis', /^You release/, /^But you haven't prepared/)
    DRC.bput('release spell', /^You let your concentration lapse/, /^You aren't preparing a spell/)
    DRC.bput('release mana', /^You release all/, /^You aren't harnessing any mana/)
  end

  def stamp
    return unless @stamp

    swap_tool('stamp')
    DRC.bput("mark my #{@noun} with my stamp", 'carefully hammer the stamp', 'You cannot figure out how to do that', 'too badly damaged')
  end

  def finish
    stamp
    DRCC.stow_crafting_item(DRC.right_hand, @bag, nil)
    DRC.message("#{@noun} complete!")
    if /You pick up/ =~ DRC.bput("lift", /^You pick up/, /^There are no/)
      DRCI.put_away_item?(DRC.right_hand, @bag)
    end
    magic_cleanup
    exit
  end
end

before_dying do
  Flags.delete('tinkering-assembly')
end

Tinker.new

=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#carve
=end

custom_require.call(%w[common common-arcana events common-crafting])

class Carve
  def initialize
    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.engineering_belt
    @stamp = @settings.mark_crafted_goods

    arg_definitions = [
      [
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s\-]+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'material', regex: /\w+/i, variable: true, description: 'Type of stone/bone to use.' },
        { name: 'type', options: %w[stack rock stone pebble boulder deed], description: 'What material noun you are using.' },
        { name: 'noun', regex: /\w+/i, variable: true }
      ],
      [
        { name: 'resume', regex: /resume/i },
        { name: 'type', options: %w[bone stone], description: 'Which material type the item is.' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to resume.' }
      ]
    ]

    args = parse_args(arg_definitions)

    @chapter = args.chapter
    @recipe_name = args.recipe_name
    @material = args.material
    @type = args.type
    @noun = args.noun
    @training_spells = @settings.crafting_training_spells

    @main_tool = if @type == 'stack' || @type == 'bone'
                   @settings.carving_tools.find { |item| /\bsaw/i =~ item }
                 else
                   @settings.carving_tools.find { |item| /\bchisel/i =~ item }
                 end

    DRC.wait_for_script_to_complete('buff', ['carve'])
    Flags.add('carve-assembly', 'another finished wooden (hilt|haft)', 'another finished (long|short) wooden (pole)', 'another finished (long|short) leather (cord)')

    if args.resume
      resume
    else
      carve_item
    end
  end

  def turn_to(section)
    unless section
      echo('Failed to find recipe in book, buy a better book?')
      DRCC.stow_crafting_item('book', @bag, @belt)
      magic_cleanup
      exit
    end
    DRC.bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def carve_item
    DRCA.crafting_magic_routine(@settings)

    if @settings.master_crafting_book
      DRCC.find_recipe2(@chapter, @recipe_name, @settings.master_crafting_book, 'carving')
    else
      DRCC.get_crafting_item('carving book', @bag, @bag_items, @belt)
      echo('*** You will need to upgrade to a journeyman or master book before 176 ranks! ***') if DRSkill.getrank('Engineering') == 175
      DRCC.find_recipe2(@chapter, @recipe_name)
      DRCC.stow_crafting_item('book', @bag, @belt)
    end
    DRCC.get_crafting_item(@main_tool, @bag, @bag_items, @belt)
    if @type != 'boulder'
      case DRC.bput("get my #{@material} #{@type}", '^You get', '^You are already', '^What do you', '^What were you', 'You pick up', "can't quite lift it")
      when 'What do you', 'What were you'
        DRC.beep
        echo("You seem to be missing: #{@material} #{@type}")
        exit
      when /can\'t quite lift it/
        @my = ''
      when /^You get|You pick up|^You are already/
        @my = 'my '
      end
      if @type == 'deed'
        /(\w+) onto/ =~ DRC.bput('tap deed', '\w+ onto a sled')
        @type = checkleft || Regexp.last_match(1)
        @my = '' unless checkleft
      end
    else
      @my = ''
    end
    carve("cut #{@my}#{@type} with my #{@main_tool}")
  end

  def assemble_part
    return unless Flags['carve-assembly']

    tool = DRC.right_hand
    DRCC.stow_crafting_item(tool, @bag, @belt)
    part = Flags['carve-assembly'].to_a[1..-1].join('.')
    Flags.reset('carve-assembly')
    DRCC.get_crafting_item(part, @bag, @bag_items, @belt)
    DRC.bput("assemble #{@my}#{@noun} with my #{part}", 'affix it securely in place', 'carefully mark where it will attach when you continue crafting', 'add several marks indicating optimal locations')
    DRCC.get_crafting_item(tool, @bag, @bag_items, @belt)
  end

  def carve(command)
    waitrt?
    DRCA.crafting_magic_routine(@settings)
    assemble_part
    case DRC.bput(command,
                  'rough, jagged',
                  'determine',
                  'developed an uneven texture along its surface',
                  'You cannot figure out how to do that.',
                  'you see some discolored areas',
                  'Roundtime')
    when 'rough, jagged'
      waitrt?
      DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
      DRCC.get_crafting_item('rifflers', @bag, @bag_items, @belt)
      command = "rub #{@my}#{@noun} with my rifflers"
    when 'determine', 'developed an uneven texture along its surface'
      waitrt?
      DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
      DRCC.get_crafting_item('rasp', @bag, @bag_items, @belt)
      command = "rub #{@my}#{@noun} with my rasp"
    when 'you see some discolored areas'
      waitrt?
      DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
      DRCC.get_crafting_item('polish', @bag, @bag_items, @belt)
      command = "apply my polish to #{@my}#{@noun}"
    when 'You cannot figure out how to do that.'
      finish
    else
      waitrt?
      unless DRC.right_hand =~ /#{@main_tool}/i
        DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
        DRCC.get_crafting_item(@main_tool, @bag, @bag_items, @belt)
      end
      command = "cut #{@my}#{@noun} with my #{@main_tool}"
    end
    waitrt?
    DRCA.crafting_magic_routine(@settings)
    carve(command)
  end

  def resume
    waitrt?

    case DRC.bput("get #{@noun}", /You get/, /You are already holding/, /You pick up/, /You are not strong enough/, /What were you referring to/)
    when /You get/, /You are already holding/, /You pick up/
      @my = 'my '
      DRC.bput('swap', /to your left hand/) unless DRC.left_hand.include?(@noun)
    when /You are not strong enough/
      @my = ''
    else
      echo '*** ITEM NOT FOUND ***'
      exit
    end

    DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt) if DRC.right_hand

    case DRC.bput("analyze my #{@noun}",
                  /You do not see anything that would (prevent|obstruct) carving/,
                  /free of defects that would impede further carving/,
                  /ready for further carving/,
                  /corrected by rubbing the .* with a riffler set/,
                  /corrected by scraping the .* with a rasp/,
                  'angle of cut will improve if scraped with a rasp',
                  'by applying some polish to',
                  'This appears to be a type of finished',
                  'Roundtime')
    when /You do not see anything that would (prevent|obstruct) carving|free of defects that would impede further carving|ready for further carving/
      waitrt?
      DRCC.get_crafting_item(@main_tool, @bag, @bag_items, @belt)
      command = "cut #{@my}#{@noun} with my #{@main_tool}"
    when /corrected by rubbing the .* with a riffler set/
      waitrt?
      DRCC.get_crafting_item('rifflers', @bag, @bag_items, @belt)
      command = "rub #{@my}#{@noun} with my rifflers"
    when /corrected by scraping the .* with a rasp/, 'angle of cut will improve if scraped with a rasp'
      waitrt?
      DRCC.get_crafting_item('rasp', @bag, @bag_items, @belt)
      command = "rub #{@my}#{@noun} with my rasp"
    when 'by applying some polish to'
      waitrt?
      DRCC.get_crafting_item('polish', @bag, @bag_items, @belt)
      command = "apply my polish to #{@my}#{@noun}"
    when 'This appears to be a type of finished'
      echo '*** THIS ITEM IS ALREADY FINISHED ***'
      exit
    else
      echo '*** UNKNOWN NEXT COMMAND WHEN TRYING TO RESUME ***'
      exit
    end
    carve(command)
  end

  def magic_cleanup
    return if @training_spells.empty?

    DRC.bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
    DRC.bput('release mana', 'You release all', "You aren't harnessing any mana")
    DRC.bput('release symb', "But you haven't", 'You release', 'Repeat this command')
  end

  def finish
    DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
    if @stamp
      DRCC.get_crafting_item('stamp', @bag, @bag_items, @belt)
      DRC.bput("mark my #{@noun} with my stamp", 'carefully hammer the stamp', 'You cannot figure out how to do that', 'too badly damaged')
      DRCC.stow_crafting_item('stamp', @bag, @belt)
    end
    waitrt?
    magic_cleanup
    fput "get #{@noun}" unless DRC.left_hand =~ /#{@noun}/i || DRC.right_hand =~ /#{@noun}/i
    exit
  end
end

before_dying do
  Flags.delete('carve-assembly')
end

Carve.new

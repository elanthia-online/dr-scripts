=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#carve
=end

custom_require.call(%w[common events common-crafting])

class Carve
  include DRC
  include DRCC

  def initialize
    settings = get_settings
    @bag = settings.crafting_container
    @bag_items = settings.crafting_items_in_container
    @belt = settings.engineering_belt
    @stamp = settings.mark_crafted_goods

    arg_definitions = [
      [
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s\-]+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'material', regex: /\w+/i, variable: true, description: 'Type of stone/bone to use.' },
        { name: 'type', options: %w[stack rock stone pebble boulder deed], description: 'What material noun you are using.' },
        { name: 'noun', regex: /\w+/i, variable: true }
      ]
    ]

    args = parse_args(arg_definitions)

    @chapter = args.chapter
    @recipe_name = args.recipe_name
    @material = args.material
    @type = args.type
    @noun = args.noun

    @main_tool = if @type == 'stack'
                   'saw'
                 else
                   'chisel'
                 end

    wait_for_script_to_complete('buff', ['carve'])
    Flags.add('carve-assembly', 'another finished wooden (hilt|haft)', 'another finished (long|short) wooden (pole)')

    carve_item
  end

  def get_item(name)
    get_crafting_item(name, @bag, @bag_items, @belt)
  end

  def stow_item(name)
    stow_crafting_item(name, @bag, @belt)
  end

  def turn_to(section)
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def carve_item
    get_item('carving book')
    turn_to("chapter #{@chapter}")
    turn_to("page #{find_recipe(@chapter, @recipe_name)}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    get_item(@main_tool)
    if @type != 'boulder'
      get_item("#{@material} #{@type}")
      @my = 'my'
      if @type == 'deed'
        /(\w+) onto/ =~ bput('tap deed', '\w+ onto a sled')
        @type = checkleft || Regexp.last_match(1)
        @my = '' unless checkleft
      end
    else
      @my = ''
    end
    carve("cut #{@my} #{@type} with my #{@main_tool}")
  end

  def assemble_part
    return unless Flags['carve-assembly']

    tool = right_hand
    stow_item(tool)
    part = Flags['carve-assembly'][1..-1].join('.')
    Flags.reset('carve-assembly')
    get_item(part)
    bput("assemble #{@my} #{@noun} with my #{part}", 'affix it securely in place', 'carefully mark where it will attach when you continue crafting', 'add several marks indicating optimal locations')
    get_item(tool)
  end

  def carve(command)
    waitrt?
    assemble_part
    case bput(command,
              'rough, jagged',
              'determine',
              'developed an uneven texture along its surface',
              'You cannot figure out how to do that.',
              'you see some discolored areas',
              'Roundtime')
    when 'rough, jagged'
      waitrt?
      stow_item(right_hand)
      get_item('rifflers')
      command = "rub #{@my} #{@noun} with my rifflers"
    when 'determine', 'developed an uneven texture along its surface'
      waitrt?
      stow_item(right_hand)
      get_item('rasp')
      command = "rub #{@my} #{@noun} with my rasp"
    when 'you see some discolored areas'
      waitrt?
      stow_item(right_hand)
      get_item('polish')
      command = "apply my polish to #{@my} #{@noun}"
    when 'You cannot figure out how to do that.'
      finish
    else
      waitrt?
      unless right_hand =~ /#{@main_tool}/i
        stow_item(right_hand)
        get_item(@main_tool)
      end
      command = "cut #{@my} #{@noun} with my #{@main_tool}"
    end
    waitrt?
    carve(command)
  end

  def finish
    stow_item(right_hand)
    if @stamp
      get_item('stamp')
      fput("mark #{@my} #{@noun} with my stamp")
      pause
      waitrt?
      stow_item('stamp')
    end
    waitrt?
    exit
  end
end

Carve.new

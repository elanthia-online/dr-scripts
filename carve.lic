=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#carve
=end

custom_require.call(%w[common common-arcana common-crafting common-items events])

class Carve

  def initialize
    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.engineering_belt
    @stamp = @settings.mark_crafted_goods
    @cube = @settings.cube_armor_piece

    arg_definitions = [
      [
        { name: 'chapter', regex: /\d+/i, description: 'Chapter containing the item.' },
        { name: 'recipe_name', regex: /^[A-z\s\-]+$/i, display: 'Recipe Name', variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'material', regex: /\w+/i, variable: true, description: 'Name of material to be used' },
        { name: 'noun', regex: /\w+/i, variable: true },
        { name: 'skip', regex: /skip/i, optional: true, description: 'Optional setting to skip restocking consumables if low (oil)'}
      ],
      [
        { name: 'instructions', regex: /instructions/i },
        { name: 'material', regex: /\w+/i, display: 'Material', regex: /\w+/i, description: 'Name of material to be used'},
        { name: 'noun', regex: /\w+/i, description: 'Noun of item to resume.' },
        { name: 'skip', regex: /skip/i, optional: true, description: 'Optional setting to skip restocking consumables if low (oil)'}
      ],
      [
        { name: 'resume', regex: /resume/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to resume.' },
        { name: 'skip', regex: /skip/i, optional: true, description: 'Optional setting to skip restocking consumables if low (oil)'}
      ]
    ]

    args = parse_args(arg_definitions)

    @chapter = args.chapter
    @recipe_name = args.recipe_name
    @material = args.material
    @noun = args.noun
    @crafting_data = get_data('crafting')['carving'][@settings.hometown]
    @training_spells = @settings.crafting_training_spells
    @stone = ['alabaster', 'granite', 'marble', 'limestone', 'pumice', 'soapstone', 'sandstone', 'quartzite', 'andesite', 'basalt', 'breccia', 'dolomite', 'gabbro', 'jade', 'obsidian', 'onyx', 'schist', 'serpentine', 'travertine', 'senci', 'diamondique', 'felstone', 'fulginode', 'blackwater', 'xenomite', 'belzune', 'anjisis']
    DRC.wait_for_script_to_complete('buff', ['carve'])
    Flags.add('carve-assembly', 'another finished wooden (hilt|haft)', 'another finished (long|short) wooden (pole)', 'another finished (long|short) leather (cord)')
    Flags.add('carve-done', /Applying the final touches/)
    
    DRCC.check_consumables('polish', @crafting_data['polish-room'], @crafting_data['polish-number'], @bag, @bag_items, @belt) unless args.skip

    carve(prep)
  end

  def prep
    DRCA.crafting_magic_routine(@settings)
    if @instruction
      DRCC.get_crafting_item("#{@noun} instructions", @bag, @bag_items, @belt)
      if /again/ =~ DRC.bput('study my instructions', 'Roundtime', 'Study them again')
        DRC.bput('study my instructions', 'Roundtime', 'Study them again')
      end
    elsif @recipe_name
      if @settings.master_crafting_book
        DRC.bput("turn my #{@settings.master_crafting_book} to discipline carving", 'You turn the')
        DRC.bput("turn my #{@settings.master_crafting_book} to page #{DRCC.find_recipe(@chapter, @recipe_name, @settings.master_crafting_book)}", 'You turn your', 'The .* is already')
        DRC.bput("study my #{@settings.master_crafting_book}", 'Roundtime')
      else
        DRCC.get_crafting_item("carving book", @bag, @bag_items, @belt)
        echo('*** You will need to upgrade to a journeyman or master book before 176 ranks! ***') if DRSkill.getrank('Engineering') == 175
        DRC.bput("turn my book to page #{DRCC.find_recipe(@chapter, @recipe_name)}", 'You turn your', 'The book is already')
        DRC.bput('study my book', 'Roundtime')
      end
    end
    if @material && @stone.any? { |mat| mat =~ /#{@material}/i } #stone
      @home_tool = 'chisels'
      swap_tool('chisels')
      # Some deeds are <material> deed, some are <size> deed, eg boulder deed
      result = DRC.bput("get #{@material} deed from my #{@bag}", /^You get a.*#{@material} deed/, /^You get a.*#{@material} (pebble|rock|boulder|stone) from/, /^What were you referring to/)
      echo result
      case result
      when /(pebble|rock|boulder|stone) deed/, /(pebble|rock|boulder|stone) from/
        size = Regexp.last_match(1)
        fput("tap my deed")
        return "cut #{size} with my #{DRC.right_hand}"
      when /alabaster deed/ # Alabaster seems bugged in that it doesn't show the volume, so we don't get to find out what size it is until we redeem it
        /(pebble|rock|boulder|stone)/ =~ DRC.bput("tap my deed", /The workers carefully load.* (pebble|rock|boulder|stone) onto a sled/)
        size = Regexp.last_match(1)
        return "cut #{size} with my #{DRC.right_hand}"
      else # Deeds that are <size> deed are handled here, which appear to be everything the society sells
        /(pebble|rock|boulder|stone)/ =~ DRC.bput("get deed from my #{@bag}", /^You get a.*#{@material} (pebble|rock|boulder|stone)/, /^What were you referring to/)
        size = Regexp.last_match(1)
        fput("tap my deed")
        return "cut #{size} with my #{DRC.right_hand}"
      end
    elsif @material #bone
      @home_tool = 'saw'
      swap_tool('saw')
      DRCC.get_crafting_item("#{@material} stack", @bag, @bag_items, @belt)
      check_hand unless DRCI.in_left_hand?('stack')
      return "cut my stack with my #{DRC.right_hand}"
    else # resume
      @cube = false # skipping the cube speed boost if doing resume
      if DRCI.in_hands?(@noun) # covers held items
        check_hand(@noun) unless DRCI.in_left_hand?(@noun)
        /You tap (.*) that you are holding/ =~ DRC.bput("tap my #{@noun}", /^You tap (.*) that you are holding/, /^What were you referring to/, /^I could not find/)
        long_name = Regexp.last_match(1)
        @home_tool = @stone.any? { |mat| long_name.include?(mat) } ? 'chisels' : 'saw'
        return "analyze #{@noun}"
      elsif /You tap (.*) on the ground/ =~ DRC.bput("tap #{@noun}", /^You tap (.*) on the ground/, /^What were you referring to/, /^I could not find/)  # tap to find it.
        long_name = Regexp.last_match(1)
        @home_tool = @stone.any? { |mat| long_name.include?(mat) } ? 'chisels' : 'saw'
        return "analyze #{@noun}"
      else
        DRC.message("#{@noun} not found")
        exit
      end
    end
  end

  def check_hand(x)
    if DRCI.in_right_hand?(x)
      DRC.bput('swap', 'You move', 'You have nothing')
    else
      DRC.message('***Please hold the item or material you wish to work on.***')
      magic_cleanup
      exit
    end
  end

  def swap_tool(next_tool, skip = false)
    unless DRC.right_hand.include?(next_tool)
      DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
      # This searches your tools listing in the yaml for the specified tool, and grabs it by the adjective/noun pair listed there.
      # If it doesn't find a tool matching the string, it just uses the string. All of your tools should be listed under carving_tools.
      tool = @settings.carving_tools.find { |t| t =~ /#{next_tool}/i } || next_tool # Or next_tool captures consumables, as well.
      DRCC.get_crafting_item(tool, @bag, @bag_items, @belt, skip)
    end
  end

  def assemble_part
    return unless Flags['carve-assembly']

    tool = DRC.right_hand
    DRCC.stow_crafting_item(tool, @bag, @belt)
    part = Flags['carve-assembly'].to_a[1..-1].join('.')
    Flags.reset('carve-assembly')
    DRCC.get_crafting_item(part, @bag, @bag_items, @belt)
    DRC.bput("assemble #{@noun} with my #{part}", 'affix it securely in place', 'carefully mark where it will attach when you continue crafting', 'add several marks indicating optimal locations')
    swap_tool(tool)
  end

  def carve(command)
    leaveit = false
    DRC.bput("touch my #{@cube}", /Warm vapor swirls around your head in a misty halo/, /A thin cloud of vapor manifests with no particular effect./, /Touch what/) if @cube
    loop do
      waitrt?
      DRCA.crafting_magic_routine(@settings)
      assemble_part
      command = DRCI.in_left_hand?(@noun) ? command.sub(@noun, "my #{@noun}") : command
      result = DRC.bput(command,
                /rough, jagged/, /developed an uneven texture along its surface/, /determine it is no longer level/, /determine.*is uneven/,
                /You cannot figure out how to do that/, /you see some discolored areas/, /Roundtime/,
                /You do not see anything that would (prevent|obstruct) carving/, /free of defects that would impede further carving/,
                /ready for further carving/, /corrected by rubbing the .* with a riffler set/, /corrected by scraping the .* with a rasp/,
                /angle of cut will improve if scraped with a rasp/, /by applying some polish to/, /This appears to be a type of finished/,
                /I could not find what/, # missing polish
                /\[Ingredients can be added/, #missed assemble
                /^Roundtime/)
      echo(result)
      case result
      when /rough, jagged/, /corrected by rubbing the .* with a riffler set/
        waitrt?
        swap_tool('rifflers')
        command = "rub #{@noun} with my rifflers"
      when /developed an uneven texture along its surface/, /angle of cut will improve if scraped with a rasp/, /corrected by scraping the .* with a rasp/, /determine it is no longer level/, /determine.*is uneven/
        waitrt?
        swap_tool('rasp')
        command = "rub #{@noun} with my rasp"
      when /you see some discolored areas/, /by applying some polish to/
        waitrt?
        swap_tool('polish', true)
        command = "apply my polish to #{@noun}"
      when /You cannot figure out how to do that/, /This appears to be a type of finished/
        finish
      when /I could not find what/
        DRCC.check_consumables('polish', @crafting_data['polish-room'], @crafting_data['polish-number'], @bag, @bag_items, @belt)
        swap_tool('polish', true)
      when /\[Ingredients can be added/
        next
      else
        finish if Flags['carve-done']
        swap_tool(@home_tool)
        command = "cut #{@noun} with my #{@home_tool}"
      end
      DRC.bput("lift #{@noun}", /^You pick up/, /can\'t quite lift it/, /^You are not strong enough to pick that up/, /^You are already/, /^What did you want to try and lift/) unless DRCI.in_left_hand?(@noun) || leaveit
      leaveit = true
    end
  end

  def magic_cleanup
    return if @training_spells.empty?
    DRC.bput('prepare symbiosis', /^You recall the exact details of the/, /^But you've already prepared/, /^Please don't do that here/)
    DRC.bput('release symbiosis', /^You release/, /^But you haven't prepared/)
    DRC.bput('release spell', /^You let your concentration lapse/, /^You aren't preparing a spell/)
    DRC.bput('release mana', /^You release all/, /^You aren't harnessing any mana/)
  end

  def finish
    DRC.bput("get #{@noun}", /^You pick up/) unless DRCI.in_left_hand?(@noun)
    DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt) #stows any tools we're holding, item should be in our left hand always.
    if @stamp
      swap_tool('stamp')
      DRC.bput("mark my #{@noun} with my stamp", 'carefully hammer the stamp', 'You cannot figure out how to do that', 'too badly damaged')
      DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
    end
    if @home_tool == 'saw'
      if /You pick up/ =~ DRC.bput("lift stack", /^You pick up/, /^What did you want to try and lift/)
        DRCC.stow_crafting_item('stack', @bag, @belt)
      end
    else
      2.times do fput("empty feet") end
    end
    magic_cleanup
    exit
  end
end

before_dying do
  Flags.delete('carve-assembly')
  Flags.delete('carve-done')
end

Carve.new

=begin
        Alternative trainer script which kicks off sub-scripts based on
        current mindstates.  See Leustyin-setup and Chuno-setup for examples
        This script uses the `training_list` key to define the skills to train
        and thresholds in which the scrips should be started
=end

custom_require.call(%w[common drinfomon common-travel equipmanager])

class T2
  include DRC
  include DRCT

  def initialize
    fput('avoid !join')
    fput('avoid !hold')
    fput('avoid !drag')

    @counter = 0
    @settings = get_settings
    @repair_timer = @settings.repair_timer
    UserVars.repair_timer_snap ||= Time.now

    loop do
      trainables = @settings['training_list']
      EquipmentManager.new.empty_hands

      trainables.each do |trainable|
        if trainable['skill'].is_a? Array
          next if trainable['skill'].each.reject { |skill| DRSkill.getxp(skill) >= trainable['start'] }.empty?
        elsif DRSkill.getxp(trainable['skill']) >= trainable['start']
          next
        end

        # At this point we know that we need to train the skill
        echo "***STATUS*** Starting #{trainable['skill']}"
        execute_actions(trainable['scripts'])
        break
      end
    end
  end

  def execute_actions(actions)
    echo 'Action'
    actions.each do |action|
      echo "***STATUS*** EXECUTE #{action}"
      action_parts = action.split(' ')
      script_name = action_parts.shift
      wait_for_script_to_complete(script_name, action_parts)
    end
  end
end

before_dying do
  scripts = ['magic', 'hunting-buddy', 'performance', 'athletics', 'first-aid', 'steal', 'outdoorsmanship', 'mech-lore', 'pick', 'foragetask']
  scripts.each do |script_name|
    stop_script(script_name) if Script.running?(script_name)
  end
  fput('release cyclic')
end

T2.new

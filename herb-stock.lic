#   Documentation: https://elanthipedia.play.net/Lich_script_repository#herb-stock

custom_require.call(%w[common common-items common-travel common-money])

class HerbStock
  def initialize
    arg_definitions = [
      [
        { name: 'town', regex: $HOMETOWN_REGEX, optional: true, description: 'Town to restock in' }
      ]
    ]
    args = parse_args(arg_definitions)

    @settings = get_settings
    @hometown = DRC.get_town_name(args.town || @settings.hometown)
    amount, denom = @settings.sell_loot_money_on_hand.split(' ')
    @keep_copper = DRCM.convert_to_copper(amount, denom)
    @remedy_container = @settings.remedy_container
    herbs_override_herbstock = @settings.herbs_override_herbstock
    user_herbs = @settings.herbs

    if @hometown == 'Riverhaven' && DRSkill.getrank('Athletics') > 140
      @hometown = 'Crossing'
    end

    if (@hometown != 'Crossing' && @hometown != 'Shard') && !(herbs_override_herbstock && user_herbs)
      echo 'Only Crossing, Riverhaven (with over 140 Athletics), and Shard hometowns supported. You may provide Crossing or Shard as an argument to override your hometown.'
      echo 'Alternatively, define custom herbs in your yaml\'s herbs setting and set herbs_override_herbstock to true.'
      exit
    end

    @settings.storage_containers.each { |container| fput("open my #{container}") }

    herbs = []

    if herbs_override_herbstock
      herbs = parse_user_herbs(user_herbs)
    else
      base_herbs = get_data('healingherbs').herb_stocks[@hometown]

      extra_herbs = parse_user_herbs(user_herbs)

      herbs = (base_herbs + extra_herbs).uniq
    end

    herbs_with_locations = herbs.select { |k| k['location'] } # find any herbs that have a specific location defined

    herbs -= herbs_with_locations

    restock_items(herbs, @hometown) # restock herbs that do not have a specific location

    herbs_with_locations.group_by { |v| v['location'] }
                        .each do |location, herb_to_stock|
      if location != 'Crossing' && UserVars.subscription == 'F2P'
        next
      end

      if location == 'Riverhaven' && DRSkill.getrank('Athletics') < 150
        next
      end

      restock_items(herb_to_stock, location)
    end
  end

  def restock_items(item_list, town)
    items_to_restock = []
    coin_needed = 0

    item_list.each do |item|
      remaining = DRCI.count_item_parts(item['name'])
      next unless remaining < item['quantity']

      num_needed = item['quantity'] - remaining
      buy_num = (num_needed / item['size'].to_f).ceil
      coin_needed += buy_num * item['price']
      item['buy_num'] = buy_num
      items_to_restock.push(item)
    end

    if items_to_restock.length == 0
      echo "*** No Herbs Needed from #{town} ***"
      return
    end

    DRCM.ensure_copper_on_hand(coin_needed, @settings, town)

    items_to_restock.each do |item|
      item['buy_num'].times do
        DRCI.stow_hands
        DRCI.get_item?(item['name'], @remedy_container) if item['stackable']
        DRCT.buy_item(item['room'], item['name'])
        split_name = item['name'].split(' ')
        DRC.bput("combine #{split_name.last} with #{split_name.last}", 'You combine', 'You must be holding') if item['stackable']
        [DRC.left_hand, DRC.right_hand].compact.each { DRCI.put_away_item?(item['name'], @remedy_container) }
      end
    end

    DRCM.deposit_coins(@keep_copper, @settings, town)
  end

  # The original impementation of herb-stock / HerbUser setup the herb list as a hash, but there's no need to treat it this way.
  # Checking for hashes to maintain backwards compatibility.
  def parse_user_herbs(herbs)
    extra_herbs = []

    return extra_herbs unless herbs.kind_of?(Array) || herbs.kind_of?(Hash)

    if herbs.kind_of?(Array)
      herbs.each { |herb| extra_herbs.push(herb) if valid_item_data?(herb) }
    elsif herbs.kind_of?(Hash)
      extra_herbs = process_herb_hash(herbs)
    end
    extra_herbs
  end

  def process_herb_hash(herbs)
    extra_herbs = []

    herbs.each { |_key, value| extra_herbs.push(value) if valid_item_data?(value) }

    extra_herbs
  end

  def valid_item_data?(item_data)
    echo "Validating custom item data: #{item_data}" if @debug

    %w[name size room price stackable quantity].all? { |x| item_data.key?(x) }
  end
end

HerbStock.new

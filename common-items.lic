# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_development#common-items
=end

custom_require.call(%w(common common-travel))

module DRCI
  module_function

  def buy_item(room, item)
    DRCT.walk_to(room)

    case DRC.bput("buy #{item}", /prepared to offer it to you for (.*) kronars/, /Let me but ask the humble sum of (.*) coins/, /for a mere (.*) kronars/, 'You decide to purchase', 'Buy what')
    when /prepared to offer it to you for (.*) kronars/
      amount = Regexp.last_match(1)
    when /Let me but ask the humble sum of (.*) coins/
      amount = Regexp.last_match(1)
    when /for a mere (.*) kronars/
      amount = Regexp.last_match(1)
    end

    fput("offer #{amount}") if amount
  end

  def order_item(room, item_number)
    DRCT.walk_to(room)

    fput("order #{item_number}")
    fput("order #{item_number}")
    pause
  end

  def dispose(item, trash_room = nil)
    DRCT.walk_to(trash_room) unless trash_room.nil?
    DRC.bput("get my #{item}", 'You get')
    dispose_trash(item)
  end

  def dispose_trash(item)
    return if item.nil?
    trashcans = DRRoom.room_objs
                      .map { |long_name| DRC.get_noun(long_name) }
                      .select { |obj| $TRASH_STORAGE.include?(obj) }

    trashcans.each do |trashcan|
      if trashcan == 'gloop'
        trashcan = 'bucket' if DRRoom.room_objs.include? 'bucket of viscous gloop'
        trashcan = 'cauldron' if DRRoom.room_objs.include? 'small bubbling cauldron of viscous gloop'
      end

      unless /What were you/ =~ DRC.bput("put my #{item} in #{trashcan}", '^You drop', '^You put', 'What were you referring to')
        return
      end
    end
    fput "drop my #{item}"
  end

  def search?(item)
    /Your .* is in/ =~ DRC.bput("inv search #{item}", 'You can\'t seem to find anything that looks like that', 'Your .* is in')
  end

  def wearing?(description)
    result = DRC.bput("tap my #{description}", 'You tap .*', 'I could not find')
    result =~ /wearing/
  end

  def inside?(description, container)
    result = DRC.bput("tap my #{description} in my #{container}", 'You tap .*', 'I could not find')
    result =~ /inside/
  end

  def exists?(description)
    result = DRC.bput("tap my #{description}", 'You tap .*', 'I could not find')
    result =~ /You tap/
  end

  def refill_lockpick_ring(type, _hometown = '')
    # _hometown coming soon
    app_result = DRC.bput('app my lockpick ring', 'and it appears to be full', 'and it might hold an additional \d+', '\d+ lockpicks would probably fit')
    waitrt?
    return unless app_result =~ /(\d+)/

    count = Regexp.last_match(1).to_i
    count.times do
      buy_item(19_125, "#{type} lockpick")
      DRC.bput('put my lockpick on my lockpick ring', 'You put')
    end

    # Be polite to Thieves, who need the room to be empty
    move('out')
  end

  def stow_hands
    pause 1
    stow_hand('right') if DRC.right_hand
    stow_hand('left') if DRC.left_hand
  end

  def stow_hand(hand)
    braid_regex = /The braided (.+) is too long/
    result = DRC.bput("stow #{hand}", 'You put', braid_regex)
    dispose_trash(DRC.get_noun(Regexp.last_match(1))) if braid_regex.match(result)
  end
end

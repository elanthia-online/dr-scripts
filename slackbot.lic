=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#slackbot
=end

class SlackBot
  def initialize
    @api_url = 'https://slack.com/api/'
    @lnet = (Script.running + Script.hidden).find { |val| val.name == 'lnet' }
    @token = UserVars.slack_token ? UserVars.slack_token : set_token
    @dm_channel = get_dm_channel(get_settings.slack_username)
    echo "Init complete"
  end

  def auth_test(token)
    echo "testing token #{token}"
    res = HTTP.post("#{@api_url}/auth.test", params: { token: token })
    if res.code == 200
      echo "Authed Successfully"
      @token = UserVars.slack_token = token
      @dm_channel = get_dm_channel(get_settings.slack_username)
      direct_message("Connected! I will notify you of any messages")
      return true
    else
      return false
    end
  end

  def request_token(lichbot)
    ttl = 10
    send_time = Time.now
    @lnet.unique_buffer.push("chat to #{lichbot} RequestSlackToken")
    loop do
      line = get
      pause 0.05
      return false if Time.now - send_time > ttl
      case line
      when /\[Private\]-.*:#{lichbot}: "slack_token: (.*)"/
        msg = Regexp.last_match(1)
        return msg != "Not Found" ? msg : false
      when /[server]: "no user .*/
        return false
      end
    end
  end

  def set_token
    lichbots = %w(Theano Roobeelitch)
    echo "Requesting token"
    for bot in lichbots
      token = request_token(bot)
      authed = auth_test(token) if token
      break if authed
    end
  end

  def direct_message(message)
    return unless @dm_channel

    HTTP.post("#{@api_url}/chat.postMessage", params: { token: @token, channel: @dm_channel, text: message, as_user: true })
  end

  def get_dm_channel(username)
    res = HTTP.post("#{@api_url}/users.list", params: { token: @token })
    users_list = JSON.parse(res.body)
    user = users_list['members'].find { |u| u['name'] == username }
    user['id']
  end
end

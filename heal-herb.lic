# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#heal-remedy
=end

custom_require.call(%w[common common-healing common-items])

arg_definitions = [
  [
    { name: 'debug', regex: /debug/i, optional: true },
    { name: 'nohands', regex: /nohands/i, optional: true, description: 'Skip herbs which must be held to use' },
    { name: 'noscars', regex: /noscars/i, optional: true, description: 'Skip scar healing herbs' },
    { name: 'quick', regex: /quick/i, optional: true, description: 'Skip delay between wound and scar herbs' },
    { name: 'level', regex: /\d+/i, optional: true, description: 'Healing level desired.' },
  ]
]

args = parse_args(arg_definitions)
$debug_mode_hr = args.debug
$nohands_mode = args.nohands
$noscars_mode = args.noscars
$quick_mode = args.quick
if args.level
  $heal_level = args.level.to_i
else
  $heal_level = 0
end

$remedies = get_data('herbs')

def wounds
  wounds = DRCH.check_health['wounds']
  pause 1
  echo wounds if $debug_mode_hr
  hurt = wounds.select { |level, _| level >= $heal_level }.values.flatten
  wound_grouping = { 'right arm' => 'limbs', 'left arm' => 'limbs', 'left leg' => 'limbs', 'right leg' => 'limbs', 'right hand' => 'limbs', 'left hand' => 'limbs', 'right eye' => 'eyes', 'left eye' => 'eyes' }
  scar_grouping = { 'right arm' => 'limbs', 'left arm' => 'limbs', 'left leg' => 'limbs', 'right leg' => 'limbs', 'right hand' => 'limbs', 'left hand' => 'limbs', 'head' => 'face', 'neck' => 'body', 'eyes' => 'face', 'chest' => 'body', 'abdomen' => 'body', 'back' => 'body' }
  hurt = hurt.map { |raw| wound_grouping[raw] || raw }.uniq
  scar = hurt.map { |raw| scar_grouping[raw] || raw }.uniq


  if $debug_mode_hr
    echo 'Wounds: '
    hurt.each do |key|
      echo key
    end

    echo

    echo 'Scars: '
    scar.each do |key|
      echo key
    end
  end
  hurt.each do |key|
    echo key if $debug_mode_hr
    echo('In hurt loop') if $debug_mode_hr
    apply_wounds(key)
  end;
  if !$quick_mode and hurt.length > 0
    pause 180 # pause 3 minutes before using scar remedies
  end
  scar.each do |key| 
    echo key if $debug_mode_hr
    echo('In scar loop') if $debug_mode_hr
    apply_scars(key) unless $noscars_mode
  end
end

def apply_wounds(key)
  echo("In apply_wounds function and key is #{key}") if $debug_mode_hr
  rem_wounds = $remedies['remedies']['external'][key]
  echo(rem_wounds) if $debug_mode_hr
  rem_wounds.each do |key|
    loop_debug
     case key
     when /salve/, /sap/
       DRC.bput("get #{key}", 'You get', 'referring to?') unless $nohands_mode
       DRC.bput("rub my #{key}", 'You', 'Rub what?') unless $nohands_mode
       DRC.bput("stow #{key}", 'You', 'Stow what?') unless $nohands_mode
     when /ungent/, /poultices/, /ointment/
       DRC.bput("rub my #{key}", 'You', 'Rub what?')
     when /potion/, /tonic/, /elixir/, /draught/
       DRC.bput("drink my #{key}", 'You', 'Drink what?')
     when /flower/, /root/, /leaf/, /grass/
       DRC.bput("eat my #{key}", 'You', 'you referring to?')
     end
  end
end

def apply_scars(key)
  echo("In apply_scar function and key is #{key}") if $debug_mode_hr
  rem_scars = $remedies['remedies']['scars'][key]
  echo(rem_scars) if $debug_mode_hr
  rem_scars.each do |key|
    loop_debug
     case key
     when /genich/
       DRC.bput("get #{key}", 'You get', 'referring to?') unless $nohands_mode
       DRC.bput("inhale my #{key}", 'You') unless $nohands_mode
       DRC.bput("stow #{key}", 'You', 'Stow what?') unless $nohands_mode
     when /salve/, /ungent/, /poultices/, /ointment/, /sap/
       DRC.bput("rub my #{key}", 'You', 'Rub what?')
     when /tonic/, /draught/, /qun/
       DRC.bput("drink my #{key}", 'You', 'Drink what?')
     when /flower/, /root/, /leaf/, /grass/, /potion/, /nuloe/, /elixir/, /jadice/
       DRC.bput("eat my #{key}", 'You', 'you referring to?')
     end
  end
end

def loop_debug
  echo('In apply loop') if $debug_mode_hr
end

wounds


=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#rezz
=end

custom_require.call(%w[common common-arcana events drinfomon spellmonitor])

class Rezz
  include DRC
  include DRCA
  
  def initialize
    unless DRStats.cleric?
      echo '*** Nice try, heathen! ***'
      exit
    end
    
    bput('rel rezz', 'The supernatural sight granted to you fades, returning your vision to normal') if DRSpells.active_spells['Resurrection']
    
    arg_definitions = [
      [
        { name: 'player', regex: /\w+/, optional: true, description: 'Name of the player to rezz' }
      ]
    ]
    
    args = parse_args(arg_definitions)
    @settings = get_settings
    args.player ? @target = DRRoom.pcs.find { |name| /^#{args.player}/i =~ name }.to_a : find_dead
    unless @target
      echo '*** No bodies! ***'
      exit
    end
    
    @rezz = if @settings.waggle_sets['rezz']['Resurrection']
              @settings.waggle_sets['rezz']['Resurrection']
            else
              echo "Using default values for REZZ, make a 'rezz'=>Resurrection waggle set to avoid this."
              get_data('spells').spell_data['Resurrection']
            end
    
    @rejuv = if @settings.waggle_sets['rezz']['Rejuvenation']
               @settings.waggle_sets['rezz']['Rejuvenation']
             else
               echo "Using default values for REJUV, make a 'rezz'=>Rejuvenation waggle set to avoid this."
               get_data('spells').spell_data['Rejuvenation']
             end
    
    Flags.add('no-favor', /has no favor with h.. god!/)
    Flags.add('rejuv-silver', 'A thin silver nimbus surrounds', 'As you concentrate, a thin silver nimbus flickers into view around')
    Flags.add('dead', 'body will decay')
    Flags.add('necro', 'has no protection from the gods. judgment')
    
    @target.each do |name|
      @rejuv['cast'] = "cast #{name}"
      rejuv_process(name)
      unless Flags['dead']
        echo "*** #{name} is already alive, dumbass! ***"
        next
      end
      Flags['no-favor'] ? echo("*** #{name} has no favors! ***") : rezz_process(name)
    end
  end
  
  def find_dead
    /You take a moment to look for everybody in the area and see (.*)/ =~ bput('look people', "You look around and notice that you're the only one in the area", /You take a moment to look for everybody in the area and see (.*)/)
    @target = Regexp.last_match(1).sub(/ and /, ', ').scan(/the body of (.+?(?=who))/i).flatten.map { |obj| obj.split.last }
    @target = nil if @target.empty?
  end
  
  def rejuv(player, quick = false)
    if quick
      @rejuv['cambrinth'] = []
      @rejuv['prep_time'] = 5
      @rejuv['mana'] = 10
    end
    until Flags['rejuv-silver'] || Flags['necro']
      pause 5 while DRStats.mana < 40
      cast_spell(@rejuv, @settings)
    end
  end
  
  def find_soul(player)
    10.times do
      pause 5 while DRStats.mana < 40
      @settings.osrel_no_harness ? nil : harness_mana([@rezz['mana']])
      match = bput("infuse rezz #{@rezz['mana']}", 'You sense a spirit nearby, but you are unable to make it out clearly', /spirit of #{player}/)
      @infuse_attempts += 1
      return true if match.eql? "spirit of #{player}"
    end
      return false
  end
  
  def keep_going
    respond("*** Not found after #{@infuse_attempts} infuses so far. Do you want to continue? ***")
    respond("*** To continue: ;send yes ***")
    respond("*** To give up: ;send no ***")
    
    line = get until line.strip =~ /^(yes|no)$/i
    case line
    when /^yes$/i
      return true
    when /^no$/i
      respond("*** Exiting script!  QUITTER!! ***")
      bput('rel rezz', 'The supernatural sight granted to you fades, returning your vision to normal')
      return false
    end
  end
  
  def rejuv_process(player)
    Flags.reset('rejuv-silver')
    Flags.reset('dead')
    Flags.reset('no-favor')
    Flags.reset('necro')
    bput("perc #{player}", /#{player} has (.*) favors* with (his|her) god/, /has no favor with h.. god!/)
    (!Flags['rejuv-silver'] && Flags['dead']) ? rejuv(player) : nil
  end
  
  def rezz_process(player)
    cast_spell(@rezz, @settings)
    bput('cast', get_data('spells').cast_messages) until DRSpells.active_spells['Resurrection']
    waitfor('You prepare to look for the lost spirits of the dead')
    
    until find_soul(player)
      unless keep_going
      bput("whisper #{player} I can't find your soul.  You need more favors!", 'You whisper', 'Who are you trying to whisper to?')
      return
      end
    end
    
    cast_spell({ 'abbrev' => 'SB', 'prep_time' => 2, 'cast' => "cast #{player}", 'mana' => 3 }, @settings)
    rejuv(player, true)
    
    case bput("gesture #{player}", 'Roundtime', 'gift of life to a body that badly broken')
    when 'gift of life to a body that badly broken'
      fput("'#{player} still needs healing.")
      return
    end
    echo "*** It took #{@infuse_attempts*@rezz['mana']} infused mana to find #{player}'s soul. ***"
  end
end

start_time = Time.now.to_f
Rezz.new
echo "runtime: #{((Time.now.to_f - start_time) / 60.00).as_time}"

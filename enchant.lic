=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#enchant
=end

custom_require.call(%w[common common-arcana events common-crafting])

class Enchant
  include DRC
  include DRCC
  include DRCA

  def initialize
    @settings = get_settings
    @book_type = "artificing"
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.enchanting_belt
    arg_definitions = [
      [
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe', display: 'recipe name', regex: /^[A-z\s\-']+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'noun', regex: /\w+/i, variable: true }
      ]
    ]
    #/'  Fix my syntax highlighting
    
    @brazier = "my brazier"
    @use_own_brazier=true
    DRRoom.room_objs.each do | obj |
      if obj.include?("enchanter's brazier")
        @brazier = "enchanter's brazier" 
        @use_own_brazier = false
      end
    end
    
    args = parse_args(arg_definitions)

    @item = args.noun
    @chapter = args.chapter
    @recipe = args.recipe
    @primary_sigils = []
    @secondary_sigils = []
    
    @equipment_manager = EquipmentManager.new
    @equipment_manager.empty_hands

    if @use_own_brazier
      DRCT.walk_to(@settings.enchanting_room) if @settings.enchanting_room
    end

    start
    
    imbue
    
    get_item('burin')
    scribe
  end

  def start
    bput("get my #{@book_type} book","You get","You are already")
    turn_to("page #{find_recipe(@chapter, @recipe)}")
    bput("study my #{@book_type} book","You scan")

    @equipment_manager.empty_hands
    get_item(@brazier) if @use_own_brazier
    cleanbrazier
    bput("get my #{@item}",'You get a')
    2.times do
      bput("put my #{@item} on #{@brazier}","You glance down","With a flick")
    end
    waitrt?
    
    get_item('fount')
    bput("wave fount at #{@item}",'You slowly wave')
  end
  
  def imbue
    get_item('imbue rod')
    
    case bput("wave rod at #{@item}",'Roundtime',/You need another ([\w ]*)(primary|secondary) sigil to continue the enchanting process/)
    when /You need another ([\w ]*)(primary|secondary) sigil to continue the enchanting process/
      sigil_type = Regexp.last_match(1)
      sigil_type = 'induction' if sigil_type == 'all'
      waitrt?
      stow_item('imbue rod')
      trace_sigil(sigil_type)
    end
    stow_item('imbue rod') if left_hand.include?('rod')
  end
  
  def cleanbrazier
    case bput("clean #{@brazier}","You prepare to clean","The brazier is not currently lit","There is nothing")
    when "You prepare to clean"
      bput("clean #{@brazier}","As you reach for")
    end
  end
  
  def trace_sigil(sigil)
    bput("get #{sigil} sigil","You get")
    bput("study #{sigil} sigil","You study")
    waitrt?
    bput("trace #{@item} on #{@brazier}",'you trace')
  end
  
  def meditate
    case bput('meditate fount','Roundtime','Once finished you sense an imbue spell will be required to continue enchanting',/You need another ([\w ]*)(primary|secondary) sigil to continue the enchanting process/)
    when 'Once finished you sense an imbue spell will be required to continue enchanting'
      waitrt?
      stow_item('burin')
      imbue
      cleanup
    when /You need another ([\w ]*)(primary|secondary) sigil to continue the enchanting process/
      sigil_type = Regexp.last_match(1)
      sigil_type = 'induction' if sigil_type == ''
      stow_item('burin')
      trace_sigil(sigil_type)
      get_item('burin')
      meditate
    end
  end
  
  def scribe
    case bput("scribe #{@item} with my burin",'Roundtime','The traced sigil pattern blurs before your eyes','You notice many of the scribed sigils are slowly merging back','Once finished you sense an imbue spell will be required to continue enchanting','material struggles to accept the sigil scribing',/You need another ([\w ]*)(primary|secondary) sigil to continue the enchanting process/)
    when 'Roundtime'
      waitrt?
      scribe
    when 'You notice many of the scribed sigils are slowly merging back'
      push
      scribe
    when 'The traced sigil pattern blurs before your eyes'
      meditate
      scribe
    when 'material struggles to accept the sigil scribing'
      case bput("focus #{@item}",'Once finished you sense an imbue spell will be required to continue enchanting.','Roundtime')
      when 'Once finished you sense an imbue spell will be required to continue enchanting'
        waitrt?
        stow_item('burin')
        imbue
        cleanup
      when 'Roundtime'
        waitrt?
        scribe
      end
    when 'Once finished you sense an imbue spell will be required to continue enchanting'
      stow_item('burin')
      imbue
      cleanup
    when /You need another ([\w ]*)(primary|secondary) sigil to continue the enchanting process/
      sigil_type = Regexp.last_match(1)
      sigil_type = 'induction' if sigil_type == ''
      stow_item('burin')
      trace_sigil(sigil_type)
      get_item('burin')
      scribe
    end
  end
  
  def analyze
    stow_item('burin')
    get_item('aug loop')
    bput("analyze #{@item} with my aug loop",)
  end
  
  def push
    stow_item('burin') if left_hand.include?('burin')
    get_item('aug loop')
    case bput("push #{@item} with my aug loop",'You wave the loop near',/You need another ([\w ]*)(primary|secondary) sigil to continue the enchanting process/,'Once finished you sense an imbue spell will be required to continue enchanting.')
    when /You need another ([\w ]*)(primary|secondary) sigil to continue the enchanting process/
      sigil_type = Regexp.last_match(1)
      sigil_type = 'induction' if sigil_type == ''
      stow_item('aug loop')
      trace_sigil(sigil_type)
      push
    when 'Once finished you sense an imbue spell will be required to continue enchanting.'
      stow_item('aug loop')
      imbue
      cleanup
    end
    waitrt?
    stow_item('aug loop') if left_hand.include?('loop')
    get_item('burin')
  end
  
  def cleanup
    @equipment_manager.empty_hands
    bput('stow fount','You put your')
    bput("get #{@item}","You pick up")
    exit
  end
  
  def get_item(name)
    get_crafting_item(name, @bag, @bag_items, @belt)
  end
  
  def stow_item(name)
    stow_crafting_item(name, @bag, @belt)
  end
  
  def turn_to(section)
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end
  
end

Enchant.new
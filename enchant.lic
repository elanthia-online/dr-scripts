=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#enchant
=end

custom_require.call(%w[common common-arcana events common-crafting events])

class Enchant
  include DRC
  include DRCC
  include DRCA

  def initialize
    @settings = get_settings
    @book_type = "artificing"
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.enchanting_belt
    arg_definitions = [
      [
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe', display: 'recipe name', regex: /^[A-z\s\-']+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'noun', regex: /\w+/i, variable: true }
      ]
    ]
    #/'  Fix my syntax highlighting
    
    Flags.add('enchant-focus', 'material struggles to accept the sigil scribing')
    Flags.add('enchant-meditate', 'The traced sigil pattern blurs before your eyes')
    Flags.add('enchant-imbue', 'Once finished you sense an imbue spell will be required to continue enchanting')
    Flags.add('enchant-push', 'You notice many of the scribed sigils are slowly merging back')
    Flags.add('enchant-sigil', /You need another ([\w ]*)(primary|secondary) sigil to continue the enchanting process/)
    Flags.add('enchant-complete', 'With the enchanting process completed, you believe it is safe to collect your things once more.')
    
    @brazier = "brazier"
    @use_own_brazier=true
    DRRoom.room_objs.each do | obj |
      if obj.include?("enchanter's brazier")
        @brazier = "enchanter's brazier" 
        @use_own_brazier = false
      end
    end
    
    args = parse_args(arg_definitions)

    @item = args.noun
    @chapter = args.chapter
    @recipe = args.recipe
    @primary_sigils = []
    @secondary_sigils = []
    
    @equipment_manager = EquipmentManager.new
    @equipment_manager.empty_hands

    if @use_own_brazier
      DRCT.walk_to(@settings.enchanting_room) if @settings.enchanting_room
    end

    study_recpie

    get_item('fount')
    bput("wave fount at #{@item} on #{@brazier}",'You slowly wave')
    
    imbue
    
    get_item('burin')
    scribe
  end

  def study_recpie
    get_item("#{@book_type} book")
    turn_to("page #{find_recipe(@chapter, @recipe)}")
    bput("study my #{@book_type} book","You scan")

    @equipment_manager.empty_hands
    get_item(@brazier) if @use_own_brazier
    cleanbrazier
    bput("get my #{@item}",'You get a')
    2.times do
      bput("put my #{@item} on #{@brazier}","You glance down","With a flick")
    end
    waitrt?
  end
  
  def imbue
    get_item('imbue rod')
    bput("wave rod at #{@item} on #{@brazier}",'Roundtime')
    stow_item('imbue rod') if left_hand.include?('rod')
    Flags.reset('enchant-imbue')
  end
  
  def cleanbrazier
    case bput("clean #{@brazier}","You prepare to clean","The brazier is not currently lit","There is nothing")
    when "You prepare to clean"
      bput("clean #{@brazier}","As you reach for")
    end
  end
  
  def trace_sigil(sigil)
    bput("get #{sigil} sigil","You get")
    bput("study #{sigil} sigil","You study")
    waitrt?
    bput("trace #{@item} on #{@brazier}",'you trace')
  end
  
  def scribe
    if Flags['enchant-focus']
      Flags.reset('enchant-focus')
      bput("focus #{@item} on #{@brazier}",'Once finished you sense an imbue spell will be required to continue enchanting.','Roundtime')
      waitrt?
      scribe
    elsif Flags['enchant-meditate']
      Flags.reset('enchant-meditate')
      bput('meditate fount','Roundtime')
      waitrt?
      scribe
    elsif Flags['enchant-push']
      Flags.reset('enchant-push')
      stow_item('burin') if left_hand.include?('burin')
      get_item('aug loop')
      bput("push #{@item} on #{@brazier} with my aug loop",'Roundtime')
      waitrt?
      stow_item('aug loop')
      get_item('burin')
      scribe
    elsif Flags['enchant-imbue']
      Flags.reset('enchant-imbue')
      stow_item('burin') if left_hand.include?('burin')
      imbue
      get_item('burin')
      scribe
    elsif Flags['enchant-sigil']
      sigil_type = Flags['enchant-sigil'][1]
      Flags.reset('enchant-sigil')
      sigil_type = 'induction' if sigil_type == ''
      stow_item('burin')
      trace_sigil(sigil_type)
      get_item('burin')
      scribe
    elsif Flags['enchant-complete']
      stow_item(right_hand) if right_hand
      stow_item(left_hand) if left_hand
      cleanup
    else
      bput("scribe #{@item} on #{@brazier} with my burin",'Roundtime')
      scribe
    end
  end
  
  def cleanup
    stow_item(right_hand) if right_hand
    stow_item(left_hand) if left_hand
    get_item('fount')
    stow_item('fount')
    get_item(@item)
    exit
  end
  
  def get_item(name)
    get_crafting_item(name, @bag, @bag_items, @belt)
  end
  
  def stow_item(name)
    stow_crafting_item(name, @bag, @belt)
  end
  
  def turn_to(section)
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end
  
end

Enchant.new

before_dying do
  [ 'enchant-focus', 'enchant-imbue', 'enchant-meditate', 'enchant-push', 'enchant-sigil', 'enchant-complete' ].each { |flag| Flags.delete(flag) }
end

# quiet
=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts

  **********
  For first time setup, see the Getting Started section of the repository README: https://github.com/rpherbig/dr-scripts/blob/master/README.md
  **********

  You'll want to remove any of our scripts that you replace with this from the auto start so they aren't getting run twice.

  Useful helpers:
  get_script('name')   #fetch the script and start tracking it
  get_yaml('filename') #download the specified yaml file to your profiles directory
  list_autostarts      #show all scripts that are started automatically
  autostart(script)     #add a script to the autostart list
  remove_autostart(script)    #remove a script from the autostart list
  list_tracked_scripts

  You can turn on debug mode by passing 'debug' as an argument with ;dependency debug
=end

require 'json'
require 'net/http'
require 'base64'
require 'yaml'
require 'ostruct'

toggle_unique

class ArgParser
  def parse_args(data, flex_args = false)
    raw_args = variable.first
    baselist = variable.drop(1).dup

    unless baselist.size == 1 && baselist.grep(/^help$|^\?$|^h$/).any?

      result = data.map { |definition| check_match(definition, baselist.dup, flex_args) }.compact

      return result.first if result.length == 1

      if result.empty?
        respond "***INVALID ARGUMENTS DON'T MATCH ANY PATTERN***"
        respond "Args: #{raw_args}"
      elsif result.length > 1
        respond '***INVALID ARGUMENTS MATCH MULTIPLE PATTERNS***'
        respond "Args: #{raw_args}"
      end

    end

    display_args(data)
    exit
  end

  def display_args(data)
    data.each do |def_set|
      respond ''
      respond "  ;#{Script.current.name} " + def_set.map { |x| format_item(x) }.join(' ')
      def_set.each { |x| next unless x[:description]; respond "   #{(x[:display] || x[:name]).ljust(12)} #{x[:description]} #{x[:options] ? '[' + x[:options].join(', ') + ']' : ''}"; }
    end
  end

  private

  def matches_def(definition, item)
    if definition[:regex] && definition[:regex] =~ item
      return true
    elsif definition[:options] && definition[:options].find { |option| item =~ /^#{option}#{'$' if definition[:option_exact]}/i }
      return true
    end
    false
  end

  def check_match(defs, vars, flex)
    args = OpenStruct.new

    defs.select { |x| x[:optional] }.each do |definition|
      if match = vars.find { |x| matches_def(definition, x) }
        args[definition[:name]] = match.downcase
        vars.delete(match)
      end
    end

    defs.select { |x| !x[:optional] }.each do |definition|
      if matches_def(definition, vars.first)
        args[definition[:name]] = vars.first.downcase
        vars.shift
      else
        return nil
      end
    end

    if flex
      args.flex = vars
    else
      return nil unless vars.empty?
    end
    args
  end

  def format_item(definition)
    item = definition[:display] || definition[:name]
    if definition[:optional]
      item = "[#{item}]"
    elsif definition[:variable] || definition[:options]
      item = "<#{item}>"
    end
    item
  end
end

def parse_args(defn, flex_args = false)
  ArgParser.new.parse_args(defn, flex_args)
end

def display_args(defn)
  ArgParser.new.display_args(defn)
end

arg_definitions = [
  [
    { name: 'debug', regex: /debug/i, optional: true },
    { name: 'install', regex: /install/i, optional: true }
  ]
]

args = parse_args(arg_definitions)

debug = args.debug
install = args.install

class OpenStruct
  def new_ostruct_member(name)
    name = name.to_sym
    unless respond_to?(name)
      define_singleton_method(name) { |*_a| @table[name] }
      define_singleton_method("#{name}=") { |x| modifiable[name] = x }
    end
    name
  end
  protected :new_ostruct_member

  def method_missing(mid, *args)
    mname = mid.id2name
    len = args.length
    if mname.chomp!('=')
      if len != 1
        raise ArgumentError, "wrong number of arguments (#{len} for 1)", caller(1)
      end
      modifiable[new_ostruct_member(mname)] = args[0]
    elsif len == 0
      @table[mid]
    elsif len == 1
      echo("Failed to find yaml setting #{mid}, using default:#{args[0]}")
      args[0]
    else
      raise NoMethodError, "undefined method `#{mid}' for #{self}", caller(1)
    end
  end
end

class ScriptManager
  def initialize(debug)
    @debug = debug
    @git_token = '4491b4c6' + '20864db1575' + '3542a5d8729cf362acd1c'
    @paste_bin_token = 'dca351a27a8af501a8d3123e29af7981'
    @paste_bin_url = 'http://pastebin.com/api/api_post.php'
    @status_url = 'https://api.github.com/repos/rpherbig/dr-scripts/git/trees/master'
    @item_url = 'https://api.github.com/repos/rpherbig/dr-scripts/git/blobs/'
    UserVars.autostart_scripts ||= []
    UserVars.autostart_scripts.uniq!
    Settings['autostart'] ||= []
    Settings['autostart'].uniq!

    Settings['base_versions'] ||= {}

    @developer = Settings['dependency-developer'] || false
    @add_autos = []
    @remove_autos = []
    update_autostarts
    @self_updated = false
  end

  def updated_dependency?
    @self_updated
  end

  def update_autostarts
    @autostarts = UserVars.autostart_scripts + Settings['autostart']
  end

  def toggle_developer
    @developer = !@developer
  end

  attr_reader :autostarts

  def add_global_auto(script)
    @add_autos << script
  end

  def remove_global_auto(script)
    @remove_autos << script
  end

  def get_versions
    if File.exist?('script_versions.dat')
      Marshal.load(File.open('script_versions.dat', 'rb'))
    else
      {}
    end
  end

  def set_version(filename, sha)
    data = get_versions
    data[filename] = sha
    File.open('script_versions.dat', 'wb') { |file| Marshal.dump(data, file) }
  end

  def remove_script(filename)
    data = get_versions
    data.delete(filename)
    File.open('script_versions.dat', 'wb') { |file| Marshal.dump(data, file) }
  end

  def autos_proccessed?
    @add_autos.empty? && @remove_autos.empty?
  end

  def run_queue
    Settings['dependency-developer'] = @developer
    update = false

    unless @add_autos.empty?
      update = true
      @add_autos.each { |script| Settings['autostart'] << script }
      @add_autos = []
    end
    unless @remove_autos.empty?
      update = true
      @remove_autos.each { |script| Settings['autostart'].delete(script) }
      @remove_autos = []
    end
    update_autostarts if update
  end

  def load_script(filename, force = false)
    return if filename.nil? || filename.empty?
    get_script(filename, force)
    run_script(filename)
  end

  def get_script(filename, force = false)
    filename = filename.dup
    echo("checking:#{filename} force:#{force}") if @debug
    download_script(filename, force) if get_versions[filename].nil? || force
  end

  def repo_scripts
    $manager.get_status['tree'].map { |element| element['path'] }.select { |file| file.include?('.lic') && !file.include?('-setup') }
  end

  def start_scripts(force = false)
    repo_scripts.each { |name, _| get_script(name, force) }
    autostarts.each { |name| run_script(name) }
  end

  def download_script(filename, force = false)
    return if filename.nil? || filename.empty?
    echo("downloading:#{filename}") if @debug
    info = get_file_status(filename)
    return unless info
    if @developer
      set_version(filename, info['sha'])
      return
    end
    return if get_versions[filename] == info['sha'] && !force

    if File.exist?("./scripts/#{filename}") && !get_versions[filename]
      new_name = "#{filename}#{Time.now.to_i}.bak"
      echo "Renaming existing script #{filename} to #{new_name}"
      File.rename("./scripts/#{filename}", "./scripts/#{new_name}")
    end

    echo("info:#{info}") if @debug
    blob = make_request(info['url'])
    File.open("./scripts/#{filename}", 'w') { |file| file.print(Base64.decode64(blob['content'])) }
    set_version(filename, blob['sha'])

    @self_updated = true if filename == 'dependency.lic'
  end

  def verify_or_make_dir(path)
    Dir.mkdir(path) unless Dir.exist?(path)
  end

  def setup_profiles
    verify_or_make_dir './scripts/profiles'
    profile_tree_url = get_status['tree'].find { |element| element['path'] == 'profiles' }['url']
    make_request(profile_tree_url)['tree'].each do |setup_file|
      echo("downloading #{setup_file}") if @debug
      blob = make_request(setup_file['url'])
      File.open("./scripts/profiles/#{setup_file['path']}", 'w') { |file| file.print(Base64.decode64(blob['content'])) }
    end
  end

  def check_base_files
    verify_or_make_dir './scripts/profiles'
    profile_tree_url = get_status['tree'].find { |element| element['path'] == 'profiles' }['url']
    make_request(profile_tree_url)['tree'].select { |data| /^base.+yaml/ =~ data['path'] }.each do |setup_file|
      next if setup_file['sha'] == Settings['base_versions'][setup_file['path']]
      echo("downloading #{setup_file}") if @debug
      blob = make_request(setup_file['url'])
      File.open("./scripts/profiles/#{setup_file['path']}", 'w') { |file| file.print(Base64.decode64(blob['content'])) }
      Settings['base_versions'][setup_file['path']] = setup_file['sha']
    end
  end

  def get_yaml(filename)
    profile_tree_url = get_status['tree'].find { |element| element['path'] == 'profiles' }['url']
    setup_file = make_request(profile_tree_url)['tree'].find { |info| info['path'] =~ /#{filename}/i }
    unless setup_file
      echo("failed to find any files matching #{filename}")
      return
    end
    echo("downloading #{setup_file['path']}")
    blob = make_request(setup_file['url'])
    File.open("./scripts/profiles/#{setup_file['path']}", 'w') { |file| file.print(Base64.decode64(blob['content'])) }
  end

  def run_script(filename)
    filename.sub!(/\.lic$/, '')
    echo("refresh:#{filename}") if @debug
    stop_script(filename) if Script.running?(filename)
    pause 0.1 while Script.running?(filename)
    start_script(filename)
  end

  def file_outdated?(filename)
    echo("file_outdated?:#{filename}") if @debug
    local_version = get_versions[filename]
    echo("local:#{local_version}") if @debug
    info = get_file_status(filename)
    unless info
      echo("file not found in repository: #{filename}")
      return false
    end
    echo("remote:#{info['sha']}") if @debug
    info['sha'] != local_version
  end

  def get_file_status(filename)
    get_status['tree'].find { |element| element['path'] == filename }
  end

  def get_status
    return @status if @status && Time.now - @status_time <= 30 # prevent flooding
    @status_time = Time.now
    @status = make_request(@status_url)
  end

  def make_request(raw_uri)
    uri = URI.parse(raw_uri)
    args = { access_token: @git_token }
    uri.query = URI.encode_www_form(args)
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE

    request = Net::HTTP::Get.new(uri.request_uri)

    response = http.request(request)
    JSON.parse(response.body)
  end

  def submit_help_pastebin
    message_body = "Trusted Scripts: #{Script.list_trusted}"
    message_body += "\n"

    Dir['./scripts/profiles/*.yaml'].map { |item| File.path(item) }.select { |path| path.include?("#{checkname}-") }.each do |path|
      message_body += "\n****\n" * 3
      message_body += path.to_s
      message_body += "\n"
      message_body += File.read(path)
    end

    uri = URI.parse(@paste_bin_url)
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = false
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE

    request = Net::HTTP::Post.new(uri.request_uri)
    request.set_form_data(api_dev_key: @paste_bin_token, api_paste_code: message_body, api_paste_private: '0', api_option: 'paste')

    response = http.request(request)
    response.body.chomp
  end
end

class SetupFiles
  def initialize(debug)
    @debug = debug
    @load = true
    @save = false
    @latest = false
    @settings = {}
    @extras = []
  end

  def request_settings(options, single_file = false)
    @load = true
    @extras = options
    @single_file = single_file
    @settings = {}
  end

  def loaded?
    !@load
  end

  def run_queue
    load_settings if @load
    save_settings if @save
  end

  def save_character_settings(contents)
    @contents = contents
    @save = true
  end

  def save_settings
    profile = "./scripts/profiles/#{checkname}-setup.yaml"
    File.open(profile, 'wb') { |file| file.puts(@contents.to_yaml) }
    @save = false
  end

  attr_reader :settings

  def safe_load_yaml(path)
    YAML.load_file(path)
  rescue
    echo('*** ERROR OPENING YAML FILE ***')
    echo(path)
    return {}
  end

  def load_settings
    profile = "./scripts/profiles/#{checkname}-setup.yaml"
    if File.exist?(profile)
      settings = @single_file ? {} : safe_load_yaml('./scripts/profiles/base.yaml')
      settings.merge!(safe_load_yaml(profile) || {})
      @extras.each do |subfile|
        filepath = "./scripts/profiles/#{checkname}-#{subfile}.yaml"
        basepath = "./scripts/profiles/base-#{subfile}.yaml"
        if File.exist?(filepath)
          settings.merge!(safe_load_yaml(filepath))
        elsif File.exist?(basepath)
          settings.merge!(safe_load_yaml(basepath))
        else
          echo("Tried to request setting file that doesn't exist #{subfile}")
        end
      end
    end
    @settings = OpenStruct.new(settings)
    @settings.lootables = @settings.lootables + @settings.loot_additions - @settings.loot_subtractions
    @load = false
  end
end

$setupfiles = SetupFiles.new(debug)
$manager = ScriptManager.new(debug)

def get_settings(options = [])
  $setupfiles.request_settings(options)
  pause 0.1 until $setupfiles.loaded?
  $setupfiles.settings
end

def get_character_setting
  $setupfiles.request_settings([], true)
  pause 0.1 until $setupfiles.loaded?
  $setupfiles.settings
end

def save_character_profile(new_file_contents)
  $setupfiles.save_character_settings(new_file_contents)
end

def format_name(name)
  name =~ /\.lic$/ ? name : "#{name}.lic"
end

def format_yaml_name(name)
  name =~ /\.yaml$/ ? name : "#{name}.yaml"
end

def custom_require
  lambda do |script_names|
    script_names = [script_names] unless script_names.is_a?(Array)
    before = Script.running.find_all { |s| s.name =~ /bootstrap/ }.length
    echo("#{before}:#{script_names}") if UserVars.bootstrap_debug
    force_start_script('bootstrap', script_names)
    until before >= Script.running.find_all { |s| s.name =~ /bootstrap/ }.length
      pause 0.05
      echo("waiting #{before}:#{script_names}") if UserVars.bootstrap_debug
    end
    echo("done #{before}:#{script_names}") if UserVars.bootstrap_debug
  end
end

def verify_script(script_names)
  script_names = [script_names] unless script_names.is_a?(Array)
  state = true
  script_names.each do |name|
    next if Script.exists?(name)
    echo "*** Failed to find #{name} ***"
    echo '*** Please report this to Etreu, Torgro, or https://github.com/rpherbig/dr-scripts/issues  ***'
    state = false
  end
  state
end

def get_script(script_name)
  $manager.get_script(format_name(script_name), true)
end

def force_refresh_scripts
  $manager.start_scripts
end

def stop_updating_script(filename)
  $manager.remove_script(format_name(filename))
end

def list_tracked_scripts
  $manager.get_versions.sort
end

def full_install
  respond 'Removing lich autostarts for existing scripts...'
  remove_from_autostart(managed_scripts)
  respond 'Adding dependency.lic to lich autostart'
  add_self_to_autostart
  respond 'Creating a /profiles directory and downloading default profiles'
  setup_profiles
  respond 'Backing up existing scripts and replacing with latest versions'
  replace_all
  respond 'Finished install!'
end

def migrate_scripts
  remove_from_autostart(managed_scripts)
  add_self_to_autostart
  managed_scripts.each(&method(:get_script))
end

def replace_all
  managed_scripts.each do |script|
    next unless File.exist?("./scripts/#{script}")
    new_name = "#{script}#{Time.now.to_i}.bak"
    respond "Renaming existing script #{script} to #{new_name}"
    File.rename("./scripts/#{script}", "./scripts/#{new_name}")
  end

  respond 'Downloading all scripts'
  $manager.repo_scripts.each(&method(:get_script))
end

def managed_scripts
  local_scripts = Dir['./scripts/*.lic'].map { |item| File.basename(item) }
  $manager.repo_scripts & local_scripts
end

def list_autostarts
  $manager.autostarts
end

def autostart(script_names, global = true)
  script_names = [script_names] unless script_names.is_a?(Array)
  script_names.map!(&method(:format_name))
  if global
    script_names.each { |script| $manager.add_global_auto(script) }
  else
    script_names.each { |script| UserVars.autostart_scripts.push(script) unless UserVars.autostart_scripts.include?(script) }
  end
  script_names.each { |script| $manager.run_script(script) }
end

def stop_autostart(script)
  if UserVars.autostart_scripts.include?(script)
    UserVars.autostart_scripts.delete(script)
  else
    $manager.remove_global_auto(script)
  end
end

def toggle_developer_mode
  $manager.toggle_developer
end

def setup_profiles
  $manager.setup_profiles
end

def get_yaml(filename)
  $manager.get_yaml(format_yaml_name(filename))
end

def remove_from_autostart(scripts)
  scripts.each do |script|
    start_script('autostart', ['remove', '--global', File.basename(script, '.*')])
    pause 0.1 while Script.running?('autostart')
    start_script('autostart', ['remove', File.basename(script, '.*')])
    pause 0.1 while Script.running?('autostart')
  end
end

def add_self_to_autostart
  start_script('autostart', ['add', '--global', File.basename('dependency', '.*')])
  pause 0.1 while Script.running?('autostart')
end

def update_d
  echo('Restarting Dependency in 2 seconds')
  before_dying do
    sleep 2
    force_start_script('dependency')
  end
  stop_script('dependency')
end

def help_me(user = nil)
  if user
    LNet.send_message(attr = { 'type' => 'private', 'to' => user }, $manager.submit_help_pastebin)
  else
    LNet.send_message(attr = { 'type' => 'channel' }, $manager.submit_help_pastebin)
  end
end

full_install if install

$manager.check_base_files
if $manager.updated_dependency?
  echo('Update found for dependency.lic')
  update_d
end
$manager.start_scripts(true)

loop do
  $manager.run_queue
  $setupfiles.run_queue
  pause 0.1
end

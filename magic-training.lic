=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#magic-training
=end

custom_require.call(%w[common common-arcana common-healing common-moonmage drinfomon common-travel])

# Track how long we've been training and how many mindstates we increase at the end.
# These are defined with @@ so that they can be referenced in before_dying block.

class MagicTraining
  @@time_in = Time.now
  @@aug_in = DRSkill.getxp('Augmentation')
  @@ward_in = DRSkill.getxp('Warding')
  @@util_in = DRSkill.getxp('Utility')
  @@sorc_in = DRSkill.getxp('Sorcery')

  def self.time_in
    @@time_in
  end

  def self.aug_in
    @@aug_in
  end

  def self.ward_in
    @@ward_in
  end

  def self.util_in
    @@util_in
  end

  def self.sorc_in
    @@sorc_in
  end

  def initialize
    arg_definitions = [
      [
        { name: 'max_time', regex: /\d+/, optional: true, description: 'Max time, in minutes, spent training. (Optional)' },
        { name: 'training_skills', regex: /^((Augmentation|Warding|Utility|Sorcery)((\s*,\s*)(Augmentation|Warding|Utility|Sorcery))*)$/i, optional: true, description: 'Override which magic skills to train, as a comma-separated list. (Optional)' },
        { name: 'script_summary', optional: true, description: 'Trains magic skills defined in Yaml setting training_skills' }
      ]
    ]

    args = parse_args(arg_definitions)
    max_time = ((args.max_time || 60).to_i * 60) # convert to seconds
    training_skills = args.training_skills ? args.training_skills.split(',').map { |skill| skill.strip.downcase.capitalize } : %w[Utility Warding Augmentation Sorcery]

    echo "Max training time: #{max_time} seconds"
    echo "Training skills: #{training_skills}"

    loop do
      if (Time.now - @@time_in) > max_time
        echo "Max time alloted for Magic Training reached. Now exiting..."
        exit
      end
      unless train_magics?(training_skills)
        echo "Done training magics"
        exit
      end
    end
  end

  def train_magics?(training_skills)
    settings = get_settings
    DRCT.walk_to(settings.magic_training_room)
    settings.magic_exp_training_max_threshold.nil? ? exp_threshold = 32 : exp_threshold = settings.magic_exp_training_max_threshold
    force_cambrinth = settings.waggle_force_cambrinth
    training_spells = settings.training_spells.empty? ? settings.magic_training : settings.training_spells

    magic_skills = training_spells.keys
    skills_to_train = magic_skills
                      .select { |skill| training_skills.include?(skill) } # filter to skills you want to train
                      .select { |skill| DRCMM.update_astral_data(training_spells[skill]) } # filter to spells you can cast now
                      .reject { |skill| DRSkill.getxp(skill) > exp_threshold } # filter out skills you don't need to train
                      .sort_by do |skill|
      [
        DRSkill.getxp(skill),   # choose first by skills with lowest learning rate
        DRSkill.getrank(skill)  # then choose by skills with lowest ranks
      ]
    end

    # Attained desired learning threshold in all magic skills to train
    return false if skills_to_train.empty?

    skills_to_train.each do |skill|
      echo "Next skill to train: #{skill}"
      before_xp = DRSkill.getxp(skill)
      DRCA.check_discern(training_spells[skill], settings) if training_spells[skill]['use_auto_mana']
      DRCA.cast_spells({ spell_name: training_spells[skill] }, settings, force_cambrinth)
      echo("#{skill} gains: #{DRSkill.getxp(skill) - before_xp}")
      waitrt?
      check_health(settings.health_threshold, settings.saferoom_health_threshold)
    end

    return true
  end

  # Needed when training sorcery as you may experience sorcerous backlash
  def check_health(health, saferoom)
    pause 0.5 while stunned?
    health_data = DRCH.check_health
    if bleeding? || health_data['score'] >= saferoom || DRStats.health < [50, health].max || health_data['poisoned'] || health_data['diseased']
      DRC.message("You're injured! Stopping training")
      DRC.wait_for_script_to_complete('safe-room', ['force'])
      exit
    end
  end
end

before_dying do
  fput('release spell')
  fput('release mana')
  fput('release symbiosis')

  total_time = (Time.now - MagicTraining.time_in) / 60
  echo "Total time in Magic-Training: #{total_time.to_i} minutes"
  echo "Total xp gained in Augmentation: #{DRSkill.getxp('Augmentation') - MagicTraining.aug_in}"
  echo "Total xp gained in Warding: #{DRSkill.getxp('Warding') - MagicTraining.ward_in}"
  echo "Total xp gained in Utility: #{DRSkill.getxp('Utility') - MagicTraining.util_in}"
  echo "Total xp gained in Sorcery: #{DRSkill.getxp('Sorcery') - MagicTraining.sorc_in}"
end

MagicTraining.new

=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#magic-training
=end

custom_require.call(%w[common common-arcana common-healing common-moonmage common-travel drinfomon])

# Track how long we've been training and how many mindstates we increase at the end.
# These are defined with @@ so that they can be referenced in before_dying block.
@@time_in = Time.now
@@aug_in = DRSkill.getxp('Augmentation')
@@ward_in = DRSkill.getxp('Warding')
@@util_in = DRSkill.getxp('Utility')
@@sorc_in = DRSkill.getxp('Sorcery')

class MagicTraining

  def initialize
    arg_definitions = [
      [
        { name: 'max_time', regex: /\d+/, optional: true, description: 'Max time, in minutes, spent training. (Optional)' },
        { name: 'training_skills', regex: /^((Augmentation|Warding|Utility|Sorcery)((\s*,\s*)(Augmentation|Warding|Utility|Sorcery))*)$/i, optional: true, description: 'Override which magic skills to train, as a comma-separated list. (Optional)' }
      ]
    ]

    args = parse_args(arg_definitions)

    max_time = ((args.max_time || 60).to_i * 60) # convert to seconds
    training_skills = args.training_skills ? args.training_skills.split(',').map { |skill| skill.strip.downcase.capitalize } : nil
    training_skills ||= %w[Utility Warding Augmentation Sorcery]
    DRCT.walk_to(get_settings.magic_training_room) if get_settings.magic_training_room
    DRC.wait_for_script_to_complete('buff', ['mana'])

    DRC.message("Max training time: #{max_time} seconds")
    DRC.message("Training skills: #{training_skills}")

    loop do
      if (Time.now - @@time_in) > max_time
        DRC.message("Max time alloted for Magic Training reached. Now exiting...")
        exit
      end
      unless train_magics?(training_skills)
        DRC.message("Done training magics")
        exit
      end
    end
  end

  def train_magics?(training_skills)
    spells ||= []
    spell_to_skill ||= {}
    settings = get_settings
    exp_threshold = settings.magic_exp_training_max_threshold
    force_cambrinth = settings.waggle_force_cambrinth
    # get spells and settings, push a list of spell names into spells array
    # retains information in training_spells for later use
    training_spells = get_settings.training_spells.each { |k,v| spells << k }
    # take spells array and make it a hash, with keys for spells and corresponding skills for values.
    spells.each { |x| spell_to_skill.store(x, training_spells[x]['skill']) }

    
    spells_to_train = spells
      .select { |spell| DRCMM.update_astral_data(spell) } # filter to spells you can cast now
      .reject { |spell| DRSkill.getxp(spell_to_skill[spell]) > exp_threshold } # filter out skills you don't need to train
      .select { |spell| training_skills.include?(spell_to_skill[spell])}
      .sort_by { |spell|
        [
          DRSkill.getxp(spell_to_skill[spell]),   # choose first by skills with lowest learning rate
          DRSkill.getrank(spell_to_skill[spell])  # then choose by skills with lowest ranks
        ]
      }
    
    # Attained desired learning threshold in all magic skills to train
    return false if spells_to_train.empty?

    spells_to_train.each do |spell|
      DRC.message("Next skill to train: #{spell_to_skill[spell]}")
      before_xp = DRSkill.getxp(spell_to_skill[spell])
      DRCA.check_discern(training_spells[spell], settings) if training_spells[spell]['use_auto_mana']
      DRCA.cast_spells({ spell: training_spells[spell] }, settings, force_cambrinth)
      waitrt?
      check_health(settings.health_threshold, settings.saferoom_health_threshold)
    end

    return true
  end

  # Needed when training sorcery as you may experience sorcerous backlash
  def check_health(health, saferoom)
    pause 0.5 while stunned?
    health_data = DRCH.check_health
    if bleeding? || health_data['score'] >= saferoom || DRStats.health < [50, health].max || health_data['poisoned'] || health_data['diseased']
      DRC.message("You're injured! Stopping training")
      DRC.wait_for_script_to_complete('safe-room', ['force'])
      exit
    end
  end

end

before_dying do
  fput('release spell')
  fput('release mana')
  fput('release symbiosis')

  total_time = (Time.now - @@time_in) / 60
  echo "Total time in Magic-Training: #{total_time.to_i} minutes"
  echo "Total xp gained in Augmentation: #{DRSkill.getxp('Augmentation') - @@aug_in}"
  echo "Total xp gained in Warding: #{DRSkill.getxp('Warding') - @@ward_in}"
  echo "Total xp gained in Utility: #{DRSkill.getxp('Utility') - @@util_in}"
  echo "Total xp gained in Sorcery: #{DRSkill.getxp('Sorcery') - @@sorc_in}"
end

MagicTraining.new

=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#magic-training
=end

custom_require.call(%w[common common-arcana common-healing common-travel common-moonmage drinfomon])

class MagicTraining

  def initialize
    @@time_in = Time.now
    @@mindstate_gains = {}
    arg_definitions = [
      [
        { name: 'max_time', regex: /\d+/, optional: true, description: 'Max time, in minutes, spent training. (Optional)' },
        { name: 'training_skills', regex: /^((Augmentation|Warding|Utility|Sorcery)((\s*,\s*)(Augmentation|Warding|Utility|Sorcery))*)$/i, optional: true, description: 'Override which magic skills to train, as a comma-separated list. (Optional)' },
        { name: 'script_summary', optional: true, description:'Trains magic skills defined in Yaml setting training_skills' }
      ]
    ]
    args = parse_args(arg_definitions)
    max_time = ((args.max_time || 60).to_i * 60) # convert to seconds
    training_skills = args.training_skills ? args.training_skills.split(',').map { |skill| skill.strip.downcase.capitalize } : %w[Utility Warding Augmentation Sorcery]
    training_skills += ["Attunement", "Arcana"]
    training_skills.each { |skill| @@mindstate_gains.store(skill,0) }

    echo "Max training time: #{max_time} seconds"
    echo "Training skills: #{training_skills}"

    loop do
      if (Time.now - @@time_in) > max_time
        echo "Max time alloted for Magic Training reached. Now exiting..."
        exit
      end
      unless train_magics?(training_skills)
        echo "Done training magics"
        exit
      end
    end
  end

  def train_magics?(training_skills)
    settings = get_settings
    DRCT.walk_to(settings.magic_training_room)
    DRC.wait_for_script_to_complete('buff', ['mana'])
    exp_threshold = settings.magic_exp_training_max_threshold
    force_cambrinth = settings.waggle_force_cambrinth
    training_spells = settings.training_spells.empty? ? settings.magic_training : settings.training_spells

    magic_skills = training_spells.keys
    skills_to_train = magic_skills
      .select { |skill| training_skills.include?(skill) } # filter to skills you want to train
      .select { |skill| DRCMM.update_astral_data(training_spells[skill]) } # filter to spells you can cast now
      .reject { |skill| DRSkill.getxp(skill) > exp_threshold } # filter out skills you don't need to train
      .sort_by do |skill|
        [
          DRSkill.getxp(skill),   # choose first by skills with lowest learning rate
          DRSkill.getrank(skill)  # then choose by skills with lowest ranks
        ]
      end

    # Attained desired learning threshold in all magic skills to train
    return false if skills_to_train.empty?

    skills_to_train.each do |skill|
      echo "Next skill to train: #{skill}"
      spelldata = training_spells[skill]
      before_xp = {}
      gain = {}
      DRCA.check_discern(spelldata, settings) if spelldata['use_auto_mana']
      DRCA.prepare?(spelldata['abbrev'],spelldata['mana'],spelldata['symbiosis'],spelldata['prep'])
      DRCA.find_charge_invoke_stow(settings.cambrinth, settings.stored_cambrinth, settings.cambrinth_cap, settings.dedicated_camb_use, spelldata['cambrinth'], settings.cambrinth_invoke_exact_amount)
      DRC.bput('perceive', 'Roundtime') # added to eat a little time, since we're waiting anyways
      waitcastrt?
      training_skills.each { |s| before_xp.store(s,DRSkill.getxp(s)) } #snapshot of mindstates before casting
      DRCA.cast?(spelldata['cast'], spelldata['symbiosis']) # casting our spell
      training_skills.each { |s| gain.store(s,DRSkill.getxp(s) - before_xp[s]) && @@mindstate_gains[s] += gain[s] } # record the change in mindstates for all skills, to capture spell casts that train more than one
      gain.each { |k,v| echo("Gained #{v} mindstates in #{k}") if v > 0 } # display mindstates gained in each skill that got mindstates
      waitrt?
      check_health(settings.health_threshold, settings.saferoom_health_threshold)
    end

    return true
  end

  # Needed when training sorcery as you may experience sorcerous backlash
  def check_health(health, saferoom)
    pause 0.5 while stunned?
    health_data = DRCH.check_health
    if bleeding? || health_data['score'] >= saferoom || DRStats.health < [50, health].max || health_data['poisoned'] || health_data['diseased']
      DRC.message("You're injured! Stopping training")
      DRC.wait_for_script_to_complete('safe-room', ['force'])
      exit
    end
  end

  before_dying do
    DRC.bput('prepare symbiosis', 'You recall the exact details of the', 'But you\'ve already prepared', 'Please don\'t do that here')
    DRC.bput('release symbiosis', 'You release', 'But you haven\'t prepared')
    DRC.bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell") unless checkprep == 'None'
    DRC.bput('release mana', 'You release all', "You aren't harnessing any mana")

    total_time = (Time.now - @@time_in) / 60
    echo "Total time in Magic-Training: #{total_time.to_i} minutes"
    @@mindstate_gains.each do |k,v|
      echo("Total xp gained in #{k}: #{v}") if v > 0
    end
    exit
  end
end

MagicTraining.new

=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#sort-scrolls
=end

class ScrollSorter
  def initialize
    @all_spells = Array.new
    get_data('spells').spell_data.each do |k, v|
      next if v['skill'] == 'cantrip'

      v['guild'] = 'Analogous' if v['mana_type'] == 'ap'
      @all_spells.push([k, v['guild'], v['abbrev']])
    end
    @settings = get_settings
    @default_container = @settings.default_container
    @stacker = @settings.scroll_sorter['stacker']
    @stacker_container = @settings.scroll_sorter['stacker_container']
    @custom_nouns = @settings.scroll_sorter['scroll_nouns']
    @scroll_nouns = get_data('items').scroll_nouns + @custom_nouns
    @unleash_mana = @settings.scroll_sorter['unleash_mana']
    @unleash_harnesses = @settings.scroll_sorter['unleash_harnesses']
    @unleash_harnesses ||= 1

    arg_definitions =
      [
        [
          { name: 'container', regex: /\w+/, optional: true, description: 'The container to collect scrolls from.' }
        ],

        [
          { name: 'find', regex: /find/i, description: 'Find the specified spell scroll in your stackers.' },
          { name: 'spell', regex: /\w+/i, optional: false, description: 'Name of spell to find.  Use full name, enclose in double quotes if more than one word.' }
        ],
        [
          { name: 'unleash', regex: /unleash/i, description: 'Unleash the specified spell scroll in your stackers.' },
          { name: 'spell', regex: /\w+/i, optional: false, description: 'Name of spell to unleash.  Use full name, enclose in double quotes if more than one word.' }
        ]
      ]

    args = parse_args(arg_definitions)
    @default_container = args.container ? args.container : @default_container
    @cases = populate_cases

    if args.find
      find_spell(args.spell)
    elsif args.unleash
      find_spell(args.spell)
      unleash_spell
    else
      sort_scrolls
    end
    DRCI.close_container?(@stacker_container) if @settings.scroll_sorter['close_container']
  end

  def populate_cases
    c = Array.new
    DRCI.open_container?(@stacker_container)
    capture = Lich::Util.issue_command("inv #{@stacker_container}", /^Inside.+you see:/)
    capture.each do |line|
      case line
      when /^.*#{@stacker}.*labeled "(.*)"/
        c.push(Regexp.last_match(1))
      end
    end
    return c
  end

  def unknown(guild)
    if guild.nil?
      DRC.message("Spell not found.  Either a new spell was released and it hasn't been added to base-spells yet, or you misspelled the spell you're searching for.")
    else
      DRC.message("Analogous Pattern spells are not stored.")
    end
    exit
  end

  def get_scroll(scroll)
    unless DRCI.get_item_safe?(scroll, @default_container)
      DRC.message("#{Script.current.name}: Can't find #{scroll} in your #{@default_container}!")
      return false
    end
    return true
  end

  def find_guild(spell)
    return @all_spells.select { |s, _g| s.casecmp(spell) == 0 }.flatten[1]
  end

  def find_abbrev(spell)
    return @all_spells.select { |s, _g| s.casecmp(spell) == 0 }.flatten[2]
  end

  def find_full_spell_name(abbrev)
    return @all_spells.select { |_s, _g, a| a.casecmp(abbrev) == 0 }.flatten[0]
  end

  def check_scroll(scroll)
    case DRC.bput("look my #{scroll}", /It is labeled "(.*)\."/, /Illustrations of complex/)
    when /Illustrations of complex/
      DRC.message('Not labeled yet!')
      /of the (.*) spell/ =~ DRC.bput("read my #{scroll}", 'The .* contains a complete description of the .* spell')
      spell = Regexp.last_match(1)
      return find_guild(spell)
    when /It is labeled "(.*)\."/
      spell = Regexp.last_match(1)
      return find_guild(spell)
    end
    return nil
  end

  def find_case(guild)
    @cases.each { |c| return $ORDINALS[@cases.index(c)] if c.include?(guild) }
  end

  def stack_scroll(scroll, guild)
    if guild == 'Analogous'
      DRC.message("Analogous pattern scroll, discarding it.")
      DRCI.dispose_trash(scroll)
      return
    end
    ord = find_case(guild)
    DRCI.get_item_safe?("#{ord} #{@stacker}", @stacker_container)
    case DRC.bput("push my #{@stacker} with my #{scroll}", /you find room in a matching section/, /flip to an empty section/, /you realize there's no more room/, /you need to open the #{@stacker.split.last} first/)
    when /you find room in a matching section/, /flip to an empty section/
      stow_and_refactor_cases(guild)
    when /you need to open the #{@stacker.split.last} first/
      DRC.bput("open my #{@stacker}", /You open your #{@stacker.split.last} to the first section/)
      stow_and_refactor_cases(guild)
      stack_scroll(scroll, guild)
    when /you realize there's no more room/
      stow_and_refactor_cases(guild)
      stack_scroll(scroll, "Extras")
    end
  end

  def stow_and_refactor_cases(guild)
    DRC.bput("put my #{@stacker} in my #{@stacker_container}", /You put your/)
    @cases.delete(guild)
    @cases.unshift(guild)
  end

  def sort_scrolls
    scrolls = DRCI.get_scroll_list_in_container(@default_container)
    scrolls.each do |s|
      next unless get_scroll(s)

      guild = check_scroll(s)
      unknown(guild) if guild.nil?
      stack_scroll(s, guild)
    end
  end

  def find_spell(name, guild = nil)
    if guild.nil?
      guild = find_guild(name)
      if guild.nil?
        name = find_full_spell_name(name)
        guild = find_guild(name)
      end
      unknown(guild) if guild.nil? || guild == 'Analogous'
    end
    ord = find_case(guild)
    DRCI.get_item_safe?("#{ord} #{@stacker}", @stacker_container)
    spells = Array.new

    capture = Lich::Util.issue_command("flip my #{@stacker}", /^You flip through the #{@stacker.split.last}, checking each section before closing it.$/)
    capture.each do |line|
      case line
      when /The (.+) section/
        spells.push(Regexp.last_match(1))
      when /Section \d+ is empty/
        spells.push('BlankSection')
      end
    end

    num = spells.index { |i| i =~ /#{name}/i }
    if num.nil? && guild != 'Extras'
      stow_and_refactor_cases(guild)
      return find_spell(name, 'Extras')
    elsif num.nil?
      DRC.message("You have no copies of #{name}!")
    else
      DRC.bput("open my #{@stacker}", /You open your/, /is already open/)
      case DRC.bput("turn #{DRC.get_noun(@stacker)} to #{name}", /^You turn/, /^That spell does not seem to exist/)
      when /^That spell does not seem to exist/
        DRC.bput("turn #{DRC.get_noun(@stacker)} to #{find_abbrev(name)}", /^You turn/)
      end
      DRC.bput("pull my #{@stacker}", /This was the last copy/, /Carefully, you remove a copy/)
    end
    stow_and_refactor_cases(guild)
  end

  def unleash_spell
    DRC.wait_for_script_to_complete('buff', ['unleash'])
    if DRCA.spell_preparing?
      /You are preparing.*spell at (.*) mana/ =~ DRC.bput('per', /You are preparing.*spell at (.*) mana/)
      mana = DRC.text2num(Regexp.last_match(1).to_s)
      harn = calculate_harness_array((@unleash_mana - mana), @unleash_harnesses)
      pause 1 until DRCA.spell_prepared?
      DRCA.harness_mana(harn)
      DRCA.cast?
    else
      DRC.message('Unleash failed!')
    end
    stack_scroll('scroll', check_scroll('scroll'))
  end

  def calculate_harness_array(number, n)
    base_part = number / n
    remainder = number % n
    parts = Array.new(n, base_part)
    remainder.times { |i| parts[i] += 1 }
    parts
  end
end

ScrollSorter.new

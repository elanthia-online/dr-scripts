=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#shape
=end

custom_require.call(%w[common common-arcana common-crafting common-items events])

class Shape
  def initialize
    @settings = get_settings
    @hometown = @settings.force_crafting_town || @settings.hometown
    @worn_trashcan = @settings.worn_trashcan
    @worn_trashcan_verb = @settings.worn_trashcan_verb
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.engineering_belt
    @stamp = @settings.mark_crafted_goods

    arg_definitions = [
      [
        { name: 'finish', options: %w[hold log stow trash], description: 'What to do with the finished item.' },
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s\-']+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'material', regex: /\w+/i, variable: true, description: 'Type of material.' },
        { name: 'noun', regex: /\w+/i, variable: true },
        { name: 'skip', regex: /skip/i, optional: true, description: 'Optional setting to skip restocking consumables if low (glue/stain)' }
      ],
      [
        { name: 'finish', options: %w[hold stow], description: 'What to do with the finished item.' },
        { name: 'instructions', regex: /instructions/i, description: 'Instructions if using instructions' },
        { name: 'material', regex: /\w+/i, variable: true, description: 'Type of material to use.' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item being crafted' },
        { name: 'skip', regex: /skip/i, optional: true, description: 'Optional setting to skip restocking consumables if low (glue/stain)' }
      ],
      [
        { name: 'resume', regex: /resume/i, variable: true, description: 'Attempts to continue an ongoing project, must be holding the item' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'NOUN of the item you wish to continue.' }
      ],
      [
        { name: 'recipe_name', display: 'enhancement', options: %w[laminate lighten cable], description: 'Enhancements to crafted bows' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item being enhanced.' }
      ],
    ]

    args = parse_args(arg_definitions)

    @finish = args.finish
    args.recipe_name.sub!("lighten", "bow lightening")
    args.recipe_name.sub!("laminate", "bow lamination")
    args.recipe_name.sub!("cable", "bow cable-backing")
    @recipe_name = args.recipe_name
    @cube = @settings.cube_armor_piece
    @noun = args.noun
    @instruction = args.instructions
    @material = args.material
    @chapter = args.chapter == nil ? 6 : args.chapter.to_i
    @info = get_data('crafting')['shaping'][@hometown]

    DRC.wait_for_script_to_complete('buff', ['shape'])
    Flags.add('shaping-assembly', 'appears ready to be reinforced with some (backer)', 'appears ready to be strengthened with some leather (strips)', 'assembly with the (backing) material can begin', 'You need another bone, wood or horn (backing) material', 'another finished bow (string)', 'another finished (long|short) wooden (pole)', 'another finished (leather strips)', 'another .* (long|short) leather (cord)', 'You must assemble the (backer)', 'You must assemble the (strips)', 'another (arrow flights)', 'another (.* arrowheads)')
    Flags.add('shaping-done', 'Applying the final touches', 'from the successful (lamination|lightening|cable-backing) process')

    if args.resume
      check_hand(@noun) unless DRCI.in_left_hand?(@noun)
      work("analyze my #{@noun}")
    else
      if @chapter.between?(2, 4)
        DRCC.check_consumables('glue', @info['tool-room'], @info['glue-number'], @bag, @bag_items, @belt) unless args.skip
        DRCC.check_consumables('stain', @info['tool-room'], @info['stain-number'], @bag, @bag_items, @belt) unless args.skip
      elsif @chapter == 10
        DRCC.check_consumables('stain', @info['tool-room'], @info['stain-number'], @bag, @bag_items, @belt) unless args.skip
      elsif @chapter == 5
        DRCC.check_consumables('glue', @info['tool-room'], @info['glue-number'], @bag, @bag_items, @belt) unless args.skip
      end
      work(prep)
    end
  end

  def check_hand(item)
    if DRCI.in_right_hand?(item)
      DRC.bput('swap', 'You move', 'You have nothing')
    else
      DRC.message('***Please hold the item or material you wish to work on.***')
      magic_cleanup
      exit
    end
  end

  def prep
    DRCA.crafting_magic_routine(@settings)
    if @instruction
      DRCC.get_crafting_item("#{@noun} instructions", @bag, @bag_items, @belt)
      if /again/ =~ DRC.bput('study my instructions', 'Roundtime', 'Study them again')
        DRC.bput('study my instructions', 'Roundtime', 'Study them again')
      end
      swap_tool('drawknife')
      DRCC.get_crafting_item("#{@material} lumber", @bag, @bag_items, @belt)
      check_hand('lumber') unless DRCI.in_left_hand?('lumber')
      return 'scrape my lumber with my drawknife'
    else
      if @settings.master_crafting_book
        DRCC.find_recipe2(@chapter, @recipe_name, @settings.master_crafting_book, 'shaping')
      else
        DRCC.get_crafting_item("shaping book", @bag, @bag_items, @belt)
        echo('*** You will need to upgrade to a journeyman or master book before 176 ranks! ***') if DRSkill.getrank('Engineering') == 175
        DRCC.find_recipe2(@chapter, @recipe_name)
        DRCC.stow_crafting_item("shaping book", @bag, @belt)
      end
    end
    if @chapter == 6
      if @recipe_name.include?('burin')
        swap_tool('drawknife')
        DRCC.get_crafting_item("#{@material} lumber", @bag, @bag_items, @belt)
        check_hand('lumber') unless DRCI.in_left_hand?('lumber')
        return 'scrape my lumber with my drawknife'
      else
        @stamp = false
        check_hand(@noun) unless DRCI.in_left_hand?(@noun)
        swap_tool('clamps')
        return "push my #{@noun} with my clamp"
      end
    elsif @chapter == 5
      @stamp = false
      swap_tool('shaper')
      DRCC.get_crafting_item("arrow #{@material}", @bag, @bag_items, @belt)
      check_hand unless DRCI.in_left_hand?('shafts')
      return 'shape my shafts with my shaper'
    else
      swap_tool('drawknife')
      DRCC.get_crafting_item("#{@material} lumber", @bag, @bag_items, @belt)
      check_hand('lumber') unless DRCI.in_left_hand?('lumber')
      return 'scrape my lumber with my drawknife'
    end
  end

  def assemble_part
    return unless Flags['shaping-assembly']

    tool = DRC.right_hand
    DRCC.stow_crafting_item(tool, @bag, @belt)
    part = Flags['shaping-assembly'].to_a[1..-1].join(' ')
    part.sub!("backing", "backer")
    Flags.reset('shaping-assembly')
    DRCC.get_crafting_item(part, @bag, @bag_items, @belt)
    DRC.bput("assemble my #{@noun} with my #{part}", 'affix it securely in place', 'loop both ends', 'loop the string', 'carefully mark where it will attach when you continue crafting', 'add several marks indicating optimal locations')
    if ['long.pole', 'short.pole'].include?(part)
      3.times do
        DRCC.get_crafting_item(part, @bag, @bag_items, @belt)
        DRC.bput("assemble my #{@noun} with my #{part}", 'affix it securely in place', 'loop both ends', 'loop the string', 'carefully mark where it will attach when you continue crafting', 'add several marks indicating optimal locations')
      end
    end
    swap_tool(tool)
  end

  def work(command)
    DRC.bput("touch my #{@cube}", /^Warm vapor swirls around your head in a misty halo/, /^A thin cloud of vapor manifests with no particular effect./, /^Touch what/) if @cube
    loop do
      waitrt?
      DRCA.crafting_magic_routine(@settings)
      assemble_part
      result = DRC.bput(command,
                        'a wood shaper is needed', 'with a wood shaper',
                        'carved with a carving knife', 'further carving with a knife', 'continued knife carving', 'require carving with a knife', 'trimmed with a carving knife', 'carved with a knife',
                        'rubbed out with a rasp', 'A cluster of small knots',
                        'Applying the final touches', 'lamination process', 'lightening process', 'cable-backing process', 'to be a type of finished',
                        'That tool does not seem suitable for that task.', 'You cannot figure out', 'doesn\'t appear suitable for working',
                        'while it is inside of something',
                        'ready to be clamped', 'with clamps',
                        'Glue should now be applied', 'glue to fasten it', 'glue applied', 'appears ready to be reinforced', 'ready for an application of glue',
                        'Some wood stain', 'application of stain',
                        'You fumble around but', 'Roundtime', 'You need more pieces',
                        'ASSEMBLE Ingredient1', 'You need another', 'You must assemble',
                        'I could not find what you were')
      case result
      when 'carved with a carving knife', 'further carving with a knife', 'continued knife carving', 'require carving with a knife', 'trimmed with a carving knife', 'carved with a knife'
        waitrt?
        swap_tool('carving knife')
        command = "carve my #{@noun} with my knife"
      when 'rubbed out with a rasp', 'A cluster of small knots'
        waitrt?
        swap_tool('rasp')
        command = "scrape my #{@noun} with my rasp"
      when 'ready to be clamped', 'with clamps', 'appears ready to be reinforced'
        waitrt?
        swap_tool('clamps')
        command = "push my #{@noun} with my clamp"
      when 'Glue should now be applied', 'glue to fasten it', 'glue applied', 'ready for an application of glue'
        waitrt?
        swap_tool('glue', true)
        command = "apply my glue to my #{@noun}"
      when 'Some wood stain', 'application of stain'
        waitrt?
        swap_tool('stain', true)
        command = "apply my stain to my #{@noun}"
      when 'to be a type of finished'
        DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
        finish
      when 'I could not find what you were'
        DRC.bput('stow feet', 'You put', 'Stow what')
        if command.include?('glue')
          DRCC.check_consumables('glue', @info['tool-room'], @info['glue-number'], @bag, @bag_items, @belt)
          swap_tool('glue')
        elsif command.include?('stain')
          DRCC.check_consumables('stain', @info['tool-room'], @info['stain-number'], @bag, @bag_items, @belt)
          swap_tool('stain')
        end
      when 'You need more pieces'
        DRC.message("*** NOT ENOUGH MATERIAL TO CRAFT #{@NOUN} ***")
        DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
        exit
      when 'while it is inside of something', 'You fumble around but'
        DRC.message('*** ERROR TRYING TO CRAFT, EXITING ***')
        DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
        exit
      when 'That tool does not seem suitable for that task.', 'You cannot figure out', 'doesn\'t appear suitable for working'
        command = "analyze my #{@noun}"
      when 'ASSEMBLE Ingredient1', 'You need another', 'You must assemble'
        assemble_part
      when 'Roundtime', 'a wood shaper is needed', 'with a wood shaper'
        waitrt?
        finish if Flags['shaping-done']
        swap_tool('shaper')
        command = "shape my #{@noun} with my shaper"
      end
    end
  end

  def swap_tool(next_tool, skip = false)
    unless next_tool == DRC.right_hand_noun
      DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
      DRCC.get_crafting_item(next_tool, @bag, @bag_items, @belt, skip)
    end
  end

  def magic_cleanup
    return if @settings.crafting_training_spells.empty?

    DRC.bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
    DRC.bput('release mana', 'You release all', "You aren't harnessing any mana")
    DRC.bput('release symb', "But you haven't", 'You release', 'Repeat this command')
  end

  def finish
    DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt)
    if @stamp
      swap_tool('stamp')
      DRC.bput("mark my #{@noun} with my stamp", 'carefully hammer the stamp', 'You cannot figure out how to do that', 'too badly damaged')
      DRCC.stow_crafting_item('stamp', @bag, @belt)
    end

    case @finish
    when /log/
      DRCC.logbook_item('engineering', @noun, @bag)
    when /stow/
      DRCC.stow_crafting_item(@noun, @bag, @belt)
    when /trash/
      DRCI.dispose_trash(@noun, @worn_trashcan, @worn_trashcan_verb)
    else
      DRC.message("#{@noun} complete!")
    end
    DRC.bput('stow feet', 'You put', 'Stow what')
    magic_cleanup
    exit
  end
end

before_dying do
  Flags.delete('shaping-assembly')
  Flags.delete('shaping-done')
end

Shape.new

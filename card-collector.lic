custom_require.call(%w[common common-items])

class Cards
  def initialize
    arg_definitions = [
      [
        { name: 'script_summary', optional: true, description: 'Takes cards from a bag of freshly acquired cards and places them in your collector\'s cases' }
      ]
    ]
    parse_args(arg_definitions)
    settings = get_settings
    unless settings.card_bags
      DRC.message("No bags defined in your yaml, please run this script with argument 'help' for more information.")
      exit
    end
    @fresh = settings.card_bags['fresh']
    @duplicates = settings.card_bags['duplicates']

    DRCI.stow_hands

    fetch_case('first')
    cards_loop
  end

  def cards_loop
    while DRCI.get_item?('card', @fresh)
      ords = $ORDINALS.dup
      fetch_case(ords.shift) # grabs our first case unless we're holding one already
      next if add_card # if it fits, get another card

      while fetch_case(ords.shift, true) # if it doesn't fit in this case, get our nth case until we add it or run out of cases
        break if add_card
      end
      DRCI.put_away_item?(DRC.left_hand, @duplicates) if DRC.left_hand
      fetch_case('first')
    end
    DRCI.put_away_item?('collector case', @duplicates) if DRCI.in_hands?('collector case')
  end

  def add_card
    case DRC.bput('cards add', 'You slide', "You don't have room", "You can't do that while your case is closed")
    when /You don't have room/
      return false
    when /You can't do that while your case is closed/
      DRC.bput('open my case', "You open your collector's case")
      return add_card
    end
    true
  end

  def fetch_case(ord, new_case = false)
    return true unless new_case || !DRCI.in_hands?('collector case')

    DRCI.put_away_item?('collector case', @duplicates) if DRCI.in_hands?('collector case')
    DRCI.get_item?("#{ord} collector case", @duplicates)
  end
end

Cards.new

=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#locksmithing
=end

custom_require.call(%w[common common-items equipmanager])

class Locksmithing
  def initialize
    settings = get_settings
    @equipment_manager = EquipmentManager.new(settings)
    @daily_trainer = settings.have_training_box
    @daily_box = settings.picking_lockbox
    @daily_boxes = settings.picking_lockboxes
    @worn_lockbox = settings.picking_worn_lockbox
    @lockbox_quantity = settings.picking_lockbox_quantity.to_i
    @exp_max_threshold = settings.crossing_training_max_threshold
    @liveboxes = settings.pick_live_boxes
    @consumable_trainers = settings.consumable_lockboxes
    @consumable_container = settings.burgle_settings['loot_container']
    @use_lockpick_ring = settings.use_lockpick_ring
    @lockpick_container = settings.lockpick_container
    @sell_loot = settings.sell_loot
    @safe_room = settings.safe_room   
    @performance_pause = settings.performance_pause

    @lockbox_quantity = 1 if @lockbox_quantity < 1

    @equipment_manager.empty_hands

    return if DRSkill.getxp('Locksmithing') >= @exp_max_threshold

    if @daily_boxes.nil?
      @daily_boxes = Array.new
      @daily_boxes.push(@daily_box)
    end

    live_boxes if @liveboxes

    start_script('performance', ['noclean']) unless Script.running?('performance')
    pause @performance_pause # to give performance time to complete before_dying if stopped from the previous script

    DRCI.get_item_if_not_held?('lockpick', @lockpick_container) unless @use_lockpick_ring
    daily_lockbox if @daily_trainer
    consumable_lockbox if @consumable_trainers
    DRCI.put_away_item?('lockpick', @lockpick_container) unless @use_lockpick_ring
  end

  def box_loop(lockboxes, container, lockbox_quantity)
    lockboxes.each do |box|
      return if DRSkill.getxp('Locksmithing') >= @exp_max_threshold

      lockbox_quantity.times do |i|
        return if DRSkill.getxp('Locksmithing') >= @exp_max_threshold
        DRCI.get_item("#{$ORDINALS[i]} #{box}", container)
        pick_box(box)
        DRCI.stow_hand('right') if DRC.right_hand
      end
    end
  end

  def daily_lockbox
    return if DRSkill.getxp('Locksmithing') >= @exp_max_threshold

    if @worn_lockbox
      case DRC.bput("remove my #{@daily_box}", 'You take', 'Remove what', "You aren't wearing that", 'You sling', 'You remove', 'You detach')
      when 'Remove what', "You aren't wearing that"
        DRC.message('Lockbox is not worn but you declared it is in your yaml, exiting')
        return
      end
      DRC.bput("close my #{@daily_box}", 'You close', 'That is already', "You can't close that")
      pick_box(@daily_box)
      DRC.bput("pick my #{@daily_box}", 'not making any progress', 'it opens.', "isn't locked", 'The lock feels warm')
      DRC.bput("wear my #{@daily_box}", 'You put', 'You sling', 'You attach')
      DRC.bput("open my #{@daily_box}", 'You open', "You can't open that", 'It is locked')
    else
      box_loop(@daily_boxes, nil, @lockbox_quantity)      
    end
  end

  def consumable_lockbox
    return if DRSkill.getxp('Locksmithing') >= @exp_max_threshold

    box_loop(@consumable_trainers, @consumable_container, 1)
  end

  def live_boxes
    return if DRSkill.getxp('Locksmithing') >= @exp_max_threshold

    start_time = Time.now
    DRC.wait_for_script_to_complete('pick')
    if (Time.now - start_time > 15) && @sell_loot
      DRC.wait_for_script_to_complete('sell-loot')
      DRCT.walk_to @safe_room
    end
  end

  def pick_box(trainer)
    while (DRSkill.getxp('Locksmithing') < @exp_max_threshold && DRC.right_hand)

      pause @performance_pause # to give performance time to complete before_dying if stopped from the previous script
      start_script('performance', ['noclean']) unless Script.running?('performance')

      case DRC.bput("pick my #{trainer}", 'Maybe you should close', 'not making any progress', "why bother", "it opens.", "isn't locked", 'The lock feels warm', 'The lock looks weak', 'Pick what', 'You need some type of tool to pick', "But you aren't holding")
      when /You need some type of tool to pick/
        DRC.message('YOU HAVE NO LOCKPICKS ON YOUR LOCKPICK RING/BELT.')
        exit
      when /(you should close)|(it opens)|(isn't locked)/
        DRC.bput("close my #{trainer}", 'You close', 'already closed', "You can't close that")
        DRC.bput("lock my #{trainer}", 'You quickly lock', 'already locked')
      when /The lock feels warm/
        DRC.message('Charges used for the day, checking other settings')
        return
      when /The lock looks weak/
        case DRC.bput("study my #{trainer}", /0 more times/, /risk breaking the lock/, 'Study what')
        when /0 more times/
          DRC.bput("drop my #{trainer}", 'You drop')
          return
        end
      when /But you aren't holding/
        DRC.message("Description: '#{trainer}' may not be specific enough or is in a wrong container - something is interfering.")
        return
      when /why bother/
        DRC.message("The #{trainer} is not a valid option but shares a noun - move it out of your burgle bag to avoid hangups.")
        DRC.bput('stow', 'You')
        return
      when /Pick what/
        return
      end
    end
  end

  before_dying do
    kill_script('performance') if running?('performance')
  end
end

Locksmithing.new

=begin
  Documentation: https://elanthipedia.play.net/mediawiki/index.php/Lich_script_development#new-character
=end

custom_require.call(%w(common common-crafting common-items common-travel equipmanager))

class NewCharacter
  include DRC
  include DRCC
  include DRCI
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'store', regex: /store/i, optional: true, description: 'Set up reasonable \'store\' values' }
      ]
    ]

    args = parse_args(arg_definitions)
    @store = args.store

    @settings = get_settings

    check_default_store
    check_skinning
    check_gem_pouches
    check_locksmithing
    check_scholarship
    check_cambrinth
    check_engineering
    check_outfitting
    check_forging
    check_armor_and_weapons
    check_ammunition
    check_theurgy
    check_zills
  end

  def check_zills
    echo '***CHECKING ZILLS***'

    if exists?('zills')
      description = 'chamois cloth'
      buy_item(19_078, description) unless exists(description)
    else
      echo 'You need to buy some zills (or ask in LNet)'
    end
  end

  def check_default_store
    return unless @store

    fput('store default in my pack')
    fput('store default in my back')
  end

  def check_theurgy
    echo '***CHECKING THEURGY***'
    return unless @settings.crossing_training.include?('Theurgy')
    return unless DRStats.cleric?

    description = @settings.water_holder
    unless exists?(description)
      buy_item(19_073, description)

      if exists?(description)
        walk_to(1164)
        move('go shack')
        move('go hole')
        move('west')
        move('up')
        waitrt?
        fix_standing
        move('go path')
        bput("fill my #{description} with water from bowl", 'You fill')
        move('go path')
        move('go stump')
        waitrt?
        fix_standing
        move('east')
        move('go hole')
        move('out')

        if @settings.theurgy_supply_container
          bput("put my #{description} in my #{@settings.theurgy_supply_container}", 'You put')
        else
          bput("stow my #{description}", 'You put')
        end
      else
        echo "Failed to buy: #{description}"
      end
    end

    description = 'pilgrim\'s badge'
    unless exists?(description)
      walk_to(19_073)
      move('go storeroom')
      bput("buy #{description}", 'You decide')
      move('out')

      if exists?(description)
        bput("kiss my #{description}", 'making it your own')
        walk_to(5989)
        bput("push altar with my #{description}", 'You press')
        bput('wear my badge', 'You put')
      else
        echo "Failed to buy: #{description}"
      end
    end
  end

  def check_armor_and_weapons
    EquipmentManager.instance.refresh
    EquipmentManager.instance.empty_hands
    missing = EquipmentManager.instance.items

    echo '***CHECKING ARMOR***'
    missing.reject! { |item| exists?(item.short_name) }
    missing.each { |item| buy_armor(item) }

    echo '***CHECKING WEAPONS***'
    missing.reject! { |item| exists?(item.short_name) }
    missing.each { |item| buy_weapon(item) }

    missing
      .reject { |item| exists?(item.short_name) }
      .each { |item| echo "***Failed to purchase #{item.short_name}***" }
  end

  def check_ammunition
    echo '***CHECKING AMMUNITION***'

    trains_bow = @settings.weapon_training.keys.include?('Bow')
    trains_crossbow = @settings.weapon_training.keys.include?('Crossbow')
    trains_sling = @settings.weapon_training.keys.include?('Sling')
    return unless trains_bow || trains_crossbow || trains_sling

    description = 'quiver'
    unless exists?(description)
      buy_item(1543, description)
      bput("wear my #{description}", 'You attach')
      bput("open my #{description}", 'You open')
      bput("store ammunition in my #{description}", 'You will now') if @store
    end

    buy_ammunition(trains_bow, 'arrow')
    buy_ammunition(trains_crossbow, 'bolt')
    buy_ammunition(trains_sling, 'rock')
  end

  def buy_ammunition(train, description)
    return unless train
    return if exists?(description)

    5.times do
      buy_item(8263, description)
      bput("stow my #{description}", 'You put')
    end
  end

  def buy_weapon(item)
    buy_item(8263, item.short_name)

    if item.worn && !wear_item?(item)
      bput('swap', 'You move')
      buy_item(8264, 'weapon strap')
      bput("tie my weapon strap to my #{item.short_name}", 'You carefully tie')
    end

    EquipmentManager.instance.empty_hands
  end

  def buy_armor(item)
    buy_item(7904, item.short_name)
    EquipmentManager.instance.empty_hands
  end

  def wear_item?(item)
    "You can't" != bput("wear my #{item.short_name}", "You can't", 'You sling', 'You slide', 'You place', 'You strap')
  end

  def check_skinning
    echo '***CHECKING SKINNING***'
    return unless @settings.skinning
    return unless @settings.skinning['skin']

    description = 'skinning knife'
    unless exists?(description)
      buy_item(6206, description)
      bput("wear my #{description}", 'You attach')
    end

    description = 'bundling rope'
    unless exists?(description)
      walk_to(8266)
      bput("ask falken for #{description}", 'hands you')
      bput("stow my #{description}", 'You put')
    end
  end

  def check_gem_pouches
    echo '***CHECKING GEM POUCHES***'

    description = "#{@settings.gem_pouch_adjective} pouch"
    unless wearing?(description)
      walk_to(4652)
      bput("ask appraiser for #{description}", 'hands you')
      bput("wear my #{description}", 'You attach')

      bput("store gems in my #{description}", 'You will now') if @store
    end

    container = @settings.spare_gem_pouch_container
    return if container.nil?

    unless inside?(description, container)
      walk_to(4652)
      bput("ask appraiser for #{description}", 'hands you')
      bput("put my #{description} in my #{container}", 'You put')
    end
  end

  def check_locksmithing
    echo '***CHECKING LOCKSMITHING***'
    return unless @settings.crossing_training.include?('Locksmithing')

    fput("store boxes in my #{@settings.picking_box_source}") if @settings.picking_box_source && @store

    description = 'lockpick ring'
    if @settings.use_lockpick_ring && !exists?(description)
      buy_item(19_125, description)
      bput("wear my #{description}", 'You attach')
    end

    description = 'lockpick'
    if @settings.use_lockpick_ring
      refill_lockpick_ring(@settings.lockpick_type)
    elsif !exists(description)
      buy_item(19_125, "#{@settings.lockpick_type} #{description}")
      bput("stow my #{description}", 'You put')
    end
  end

  def check_scholarship
    echo '***CHECKING SCHOLARSHIP***'
    return unless @settings.crossing_training.include?('Scholarship')

    description = 'black book'
    unless exists?(description)
      order_item(8771, 1)
      bput("stow my #{description}", 'You put')
    end
  end

  def check_cambrinth
    echo '***CHECKING CAMBRINTH***'
    return if DRStats.barbarian? || DRStats.thief? || DRStats.commoner? || DRStats.trader?

    description = @settings.cambrinth
    return if description.nil?

    unless exists?(description)
      buy_item(19_152, description)

      if @settings.stored_cambrinth
        bput("stow my #{description}", 'You put')
      else
        bput("wear my #{description}", 'You ')
      end
    end
  end

  def stow_crafting(description)
    DRCC.stow_crafting_item(description, @settings.crafting_container, @settings.engineering_belt)
  end

  def order_crafting?(description, room, order_number)
    return false if exists?(description)

    order_item(room, order_number)
    stow_crafting(description)
    true
  end

  def check_engineering
    echo '***CHECKING ENGINEERING***'
    return unless @settings.crossing_training.include?('Engineering')

    # Uses Shaping
    order_crafting?('rasp', 8865, 3)
    order_crafting?('carving knife', 8865, 8)
    order_crafting?('wood shaper', 8865, 9)
    order_crafting?('drawknife', 8865, 10)
    order_crafting?('shaping book', 19_209, 4)

    order_logbook('engineering logbook', 19_209, 10)
  end

  def check_outfitting
    echo '***CHECKING OUTFITTING***'
    return unless @settings.crossing_training.include?('Outfitting')

    # Uses Tailoring
    order_crafting?('knitting needle', 16_668, 7)
    order_crafting?('tailoring book', 16_665, 1)

    if @settings.train_workorders.include?('Tailoring')
      order_logbook('outfitting logbook', 16_665, 4)
    end
  end

  def order_logbook(description, room, order_number)
    return unless order_crafting?(description, room, order_number)

    get_crafting_item(description)
    bput("rub my #{description}", 'You mark')
    stow_crafting(description)
  end

  def check_forging
    echo '***CHECKING FORGING***'
    return unless @settings.crossing_training.include?('Forging')

    # Uses Blacksmithing
    order_crafting?('diagonal-peen hammer', 8776, 1)
    order_crafting?('tongs', 8776, 2)
    order_crafting?('shovel', 8776, 3)
    order_crafting?('bellows', 8776, 5)
    order_crafting?('blacksmithing book', 8771, 1)

    if @settings.train_workorders.include?('Blacksmithing')
      order_logbook('forging logbook', 8771, 10)
    end
  end
end

NewCharacter.new

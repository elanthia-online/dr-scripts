=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#restock-shop
=end

custom_require.call(%w[common common-crafting common-items common-money common-travel])

class ShopRestock
  def initialize
    @settings = get_settings

    @shop_id = @settings.restock_shop['outside_room']
    @inner_id = @settings.restock_shop['inside_room']
    @entrance = @settings.restock_shop['entrance_noun']
    @item_list = @settings.restock_shop['items']
    @town = @settings.hometown
    @part_data = get_data('crafting')[:recipe_parts]
    @bag = @settings.crafting_container
    @belt = @settings.forging_belt || @settings.engineering_belt
    @worn_trashcan = @settings.worn_trashcan
    @worn_trashcan_verb = @settings.worn_trashcan_verb

    go_to_shop
    check_surfaces

    go_to_shop
  end

  def check_surfaces
    missing_items = []
    @item_list.map { |data| data['surface'] }.uniq.each do |surface|
      raw_list = DRC.bput("look #{surface}", "There's nothing", 'you see [^\.]*')
      raw_list = if raw_list == "There's nothing"
                   []
                 else
                   DRC.list_to_array(raw_list)
                 end
      missing_items += @item_list.select { |item| surface == item['surface'] }
                                 .reject { |item| raw_list.find { |raw_item| raw_item.match(item['full_name']) } }
    end

    return if missing_items.empty?

    respond 'Restocking'
    respond '------------'
    missing_items.each { |item| respond "- #{item['full_name']}" }

    all_recipes = get_data('recipes').crafting_recipes
    missing_recipes_re = Regexp.union(missing_items.map { |item| item['recipe'] })
    @recipes = all_recipes.select { |recipe| missing_recipes_re.match(recipe['name']) }

    DRCM.ensure_copper_on_hand(40_000, @settings)
    go_to_shop
    restock_surfaces(missing_items)
  end

  def restock_surfaces(missing_items)
    restock_steel(missing_items.select { |item| item['material'] == 'steel' })
    restock_burlap(missing_items.select { |item| item['material'] == 'heavy burlap' })
    restock_silk(missing_items.select { |item| item['material'] == 'heavy silk' })
    restock_linen(missing_items.select { |item| item['material'] == 'heavy linen' })
    restock_gryphon(missing_items.select { |item| item['material'] == 'gryphon' })
  end

  def restock_steel(missing_items)
    return if missing_items.empty?

    volume = ((total_volume_of(missing_items) * 1.25) / 10.0).ceil
    return if volume.zero?

    DRC.wait_for_script_to_complete('makesteel', [volume, 'refine'])

    missing_items.each do |item|
      DRC.wait_for_script_to_complete('smith', ['steel', item['recipe'], 'stamp', 'temper'])
      go_to_shop
      sell(item)
    end

    DRC.wait_for_script_to_complete('workorders', %w[blacksmithing repair])
    DRCT.walk_to(get_data('crafting')[:blacksmithing][@town]['trash-room'])
    DRCC.get_crafting_item('steel ingot', @bag, @belt, @belt)
    DRCI.dispose_trash('steel ingot', @worn_trashcan, @worn_trashcan_verb)
  end

  def restock_burlap(missing_items)
    return if missing_items.empty?

    volume = total_volume_of(missing_items)
    return if volume.zero?

    have = 0
    if DRC.bput('get burlap cloth', 'You get', 'What were') == 'You get'
      res = DRC.bput('count my cloth', 'You count out .*')
      have = res.scan(/\d+/).first.to_i
      DRCI.stow_hands
    end

    if have < volume
      multiples = ((volume - have) / 16.0).ceil
      multiples.times do
        DRC.wait_for_script_to_complete('spin', ['burlap'])
        DRC.wait_for_script_to_complete('spin', ['burlap'])
        DRC.wait_for_script_to_complete('weave-cloth')
      end
    end

    while DRC.bput("get burlap cloth from #{@bag}", 'You get', 'What were') == 'You get'
      fput('combine cloth')
    end
    DRCI.stow_hands

    missing_items.each do |item|
      move('out') if Room.current.id == @inner_id
      recipe_data = DRCC.recipe_lookup(@recipes, item['recipe'])
      recipe_data['part'] << 'large padding' # HACK: Reinforcing should be user specified
      recipe_data['part'].uniq.each do |part_name|
        recipe_data['part'].map { |part| part == part_name ? 1 : 0 }.reduce(0, :+).times { buy_part(part_name) }
      end

      DRC.wait_for_script_to_complete('sew', ['stow', 'sewing', recipe_data['chapter'], item['recipe'], item['noun'], 'burlap'])
      stamp(item)
      DRC.wait_for_script_to_complete('sew', ['reinforce'])
      fput("stow #{item['noun']}")
      go_to_shop
      fput("get my #{item['noun']} from my #{@bag}")
      sell(item)
    end
    DRC.wait_for_script_to_complete('workorders', %w[tailoring repair])
  end

  def restock_linen(missing_items)
    return if missing_items.empty?

    echo missing_items

    volume = total_volume_of(missing_items)
    return if volume.zero?

    have = 0
    if DRC.bput('get linen cloth', 'You get', 'What were') == 'You get'
      res = DRC.bput('count my cloth', 'You count out .*')
      have = res.scan(/\d+/).first.to_i
      DRCI.stow_hands
    end

    if have < volume
      multiples = ((volume - have) / 16.0).ceil
      multiples.times do
        DRC.wait_for_script_to_complete('spin', ['linen'])
        DRC.wait_for_script_to_complete('spin', ['linen'])
        DRC.wait_for_script_to_complete('weave-cloth')
      end
    end

    while DRC.bput("get linen cloth from #{@bag}", 'You get', 'What were') == 'You get'
      fput('combine cloth')
    end
    DRCI.stow_hands

    missing_items.each do |item|
      move('out') if Room.current.id == @inner_id
      recipe_data = DRCC.recipe_lookup(@recipes, item['recipe'])
      DRC.wait_for_script_to_complete('sew', ['stow', 'sewing', recipe_data['chapter'], item['recipe'], item['noun'], 'linen'])
      go_to_shop
      stamp(item)
      sell(item)
    end
  end

  def restock_silk(missing_items)
    return if missing_items.empty?

    volume = total_volume_of(missing_items)
    return if volume.zero?

    have = 0
    if DRC.bput("get silk cloth from my #{@bag}", 'You get', 'What were') == 'You get'
      res = DRC.bput('count my cloth', 'You count out .*')
      have = res.scan(/\d+/).first.to_i
      DRCI.stow_hands
    end

    if have < volume
      multiples = ((volume - have) / 16.0).ceil
      multiples.times do
        DRC.wait_for_script_to_complete('spin', ['silk'])
        DRC.wait_for_script_to_complete('spin', ['silk'])
        DRC.wait_for_script_to_complete('weave-cloth')
      end
    end

    while DRC.bput("get silk cloth from my #{@bag}", 'You get', 'What were') == 'You get'
      fput('combine cloth')
    end
    DRCI.stow_hands

    missing_items.each do |item|
      recipe_data = DRCC.recipe_lookup(@recipes, item['recipe'])
      move('out') if Room.current.id == @inner_id
      DRC.wait_for_script_to_complete('sew', ['stow', 'sewing', recipe_data['chapter'], item['recipe'], item['noun'], 'silk'])
      go_to_shop
      stamp(item)
      sell(item)
    end
  end

  def buy_part(name)
    part_data = @part_data[name][@town]
    if part_data['part-number']
      DRCT.order_item(part_data['part-room'], part_data['part-number'])
    else
      DRCT.buy_item(part_data['part-room'], name)
    end
    DRCI.stow_hands
  end

  def restock_gryphon(missing_items)
    return if missing_items.empty?

    missing_items.each do |item|
      recipe_data = DRCC.recipe_lookup(@recipes, item['recipe'])
      recipe_data['part'].each { |part| buy_part(part) }
      DRC.wait_for_script_to_complete('sew', ['stow', 'leather', recipe_data['chapter'], item['recipe'], item['noun'], item['material']])
      fput('stow leather')
      DRCC.get_crafting_item('shield', @bag, @belt, @belt)
      DRC.wait_for_script_to_complete('sew', ['seal'])
      go_to_shop
      stamp(item)
      sell(item)
    end
  end

  def go_to_shop
    return if Room.current.id == @inner_id

    DRCT.walk_to(@shop_id)
    if DRC.bput("open #{@entrance}",
                'You will need to contact the owner about that',
                'But your shop is already set up and ready for you to enter',
                'Your shop is ready') == 'You will need to contact the owner about that'
      echo '*****************'
      echo 'Your shop settings appear to be incorrect. Please check the script documentation and update your settings'
      echo '*****************'
      exit
    end
    pause 0.5
    move("go #{@entrance}")
  end

  def sell(item)
    fput("sell my #{item['noun']} #{item['surface']} for #{item['price']}")
  end

  def stamp(item)
    fput("get my #{item['noun']} from my #{@bag}")
    DRCC.get_crafting_item('stamp', @bag, @bag_items, @belt)
    DRC.bput("mark my #{noun} with my stamp", 'carefully hammer the stamp', 'You cannot figure out how to do that', 'too badly damaged')
    DRCC.stow_crafting_item('stamp', @bag, @belt)
  end

  def total_volume_of(items)
    return 0 if items.empty?

    items.map { |item| DRCC.recipe_lookup(@recipes.select { |recipe| recipe['noun'] == item['noun'] }, item['recipe'])['volume'] }
         .inject(&:+)
  end
end

ShopRestock.new

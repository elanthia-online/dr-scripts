
custom_require.call(%w(common common-money common-travel))

class ShopRestock
  include DRC
  include DRCM
  include DRCT

  def initialize
    @shop_id = 9099

    @item_list = [
      ['mask', 60_000, 2, 'in cabinet', 'heavy burlap'],
      ['hood', 100_000, 9, 'in cabinet', 'heavy burlap'],
      ['gloves', 60_000, 4, 'in cabinet', 'heavy burlap'],
      ['shirt', 220_000, 34, 'in cabinet', 'heavy burlap'],
      ['pants', 120_000, 10, 'in cabinet', 'heavy burlap'],
      ['backpack', 60_000, 5, 'on table', 'heavy burlap'],
      ['bag', 60_000, 6, 'on table', 'heavy burlap'],
      ['shield', 220_000, 8, 'in cabinet', 'gryphon'],
      ['sword', 140_000, 9, 'on rack', 'bastard sword', 'steel'],
      ['spear', 120_000, 7, 'on rack', 'light metal spear', 'steel'],
      ['mace', 140_000, 12, 'on rack', 'bar mace', 'steel'],
      ['cutlass', 120_000, 7, 'on rack', 'cutlass', 'steel'],
      ['bola', 120_000, 5, 'on rack', 'bola', 'steel'],
      ['hammer', 120_000, 10, 'on rack', 'throwing hammer', 'steel'],
      ['akabo', 120_000, 13, 'on rack', 'akabo', 'steel'],
      ['spike', 100_000, 4, 'on rack', 'throwing spike', 'steel'],
      ['nightstick', 120_000, 7, 'on rack', 'nightstick', 'steel'],
      ['greataxe', 120_000, 12, 'on rack', 'greataxe', 'steel'],
      ['carryall', 200_000, 5, 'on table', 'heavy silk'],
      ['haversack', 200_000, 6, 'on table', 'heavy silk']
    ]

    walk_to(@shop_id)

    check_surfaces
  end

  def check_surfaces
    missing_items = []
    @item_list.map { |x| x[3] }.uniq.each do |surface|
      raw_list = DRC.bput("look #{surface}", "There's nothing", 'you see [^\.]*')
      raw_list = if raw_list == "There's nothing"
                   []
                 else
                   DRC.list_to_nouns(raw_list)
                 end
      missing_items += @item_list.select { |data| surface == data[3] }.reject { |data| raw_list.include?(data.first) }
    end
    restock_surfaces(missing_items)
  end

  def restock_surfaces(missing_items)
    echo missing_items
    restock_steel(missing_items.select { |x| x.last == 'steel' })
  end

  def restock_steel(missing_items)
    return if missing_items.empty?
    echo missing_items
    volume = ((missing_items.map { |x| x[2] }.inject(&:+) * 1.25) / 10.0).ceil
    combine = volume > 6
    while volume > 0
      step = [6, volume].min
      wait_for_script_to_complete('makesteel', [step])
      fput('stow ingot')
      volume -= step
    end
    if combine
      until 'What were' == bput('get my steel ingot', 'You get', 'What were')
        fput('put ingot in cruc')
      end
      wait_for_script_to_complete('smelt')
      fput('stow ingot')
    end
    until 'What were' == bput('get my steel ingot', 'You get', 'What were')
      fput('put ingot in cruc')
    end
    wait_for_script_to_complete('smelt', ['refine'])
    fput('stow ingot')

    missing_items.each do |item|
      wait_for_script_to_complete('smith', ['steel', item[4], 'stamp', 'temper'])
      walk_to(@shop_id)
      fput("sell my #{item.first} #{item[3]} for #{item[1]}")
    end

    wait_for_script_to_complete('workorders', %w(blacksmithing repair))
    walk_to(8774)
    fput('get my steel ingot')
    fput('put ingot in bucket')
  end
end

ShopRestock.new

=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#mining-buddy
=end

custom_require.call(%w[common common-items common-crafting common-money common-travel drinfomon])

class MiningBuddy

  def initialize
    settings = get_settings
    @area_list = get_data('mining').mining_buddy_rooms
    @forging_belt = settings.forging_belt
    @bag = settings.crafting_container
    @bag_items = settings.crafting_items_in_container
    @areas = settings.mines_to_mine
    @skip_populated = settings.mining_skip_populated
    @mine_every_room = settings.mining_buddy_mine_every_room
    @vein_list = settings.mining_buddy_vein_list
    @mining_implement = settings.mining_implement
    @use_packet = settings.mine_use_packet
    @hometown = settings.hometown
    deeds_data = get_data('crafting').deeds[@hometown]
    @deeds_room = deeds_data['room']
    @deeds_number = deeds_data['medium_number']
    @mine_repair_own_tools = settings.mine_repair_own_tools
    @next_repair = Time.now #sets time check for tools repair, useful if you have Proper Forging Tool Repair.
    DRC.message("#{@areas}:#{@vein_list}") if UserVars.mining_debug
    
    #checks yaml settings against tools
    #corrects settings when tongs are wrongly set as adjustable, and/or when implement is tongs.
    unless settings.adjustable_tongs && DRCC.get_adjust_tongs?('reset shovel', @bag, @bag_items, @forging_belt)
      @mining_implement.sub!(/.* tongs/, "shovel") 
    end
    DRCC.stow_crafting_item(@mining_implement, @bag, @forging_belt) if DRCI.in_hands?(@mining_implement)
    
    DRCM.ensure_copper_on_hand(10_000, settings)

    if @use_packet
      buy_deed_packet unless DRCI.exists?('packet')
      buy_deed_packet unless DRCI.exists?('second packet')

      first = DRC.bput('look first packet', 'You count \d+').scan(/\d+/).first.to_i
      second = DRC.bput('look second packet', 'You count \d+').scan(/\d+/).first.to_i

      if second < first
        DRCC.get_crafting_item('second packet', @bag, @bag_items, @forging_belt)
        DRCC.stow_crafting_item('packet', @bag, @forging_belt)
      end
    end
    check_repair
    DRC.wait_for_script_to_complete('buff', ['mining-buddy'])
    DRC.bput('speculate luck', '^You focus your mind on the world around you', '^You are already focusing on the world around you.', '^Your pattern-matching skills are still exhausted') if DRStats.trader? && DRStats.circle >= 65
    @areas.each { |area_name| mine_rooms(@area_list[area_name]) }
  end

  def buy_deed_packet
    if @deeds_room && @deeds_number
      DRCT.order_item(@deeds_room, @deeds_number)
    else
      echo 'Your hometown is missing data for purchasing deeds!'
      exit
    end
    fput('stow my packet')
  end

  def check_repair
    return if @next_repair > Time.now #kicks back if you've repaired the tools yourself in the last 2 hours, and have the Proper Forging Tool Care tech, which makes them immune to damage for 2 hours.
    DRCC.get_crafting_item(@mining_implement, @bag, @bag_items, @forging_belt) unless DRCI.in_hands?(@mining_implement)

    if @mine_repair_own_tools && DRCI.exists?('wire brush') && DRCI.exists?('of oil') #can you repair your own tools(yaml setting), and do you have the required materials to do so?
      self_repair('wire brush')
      DRCC.stow_crafting_item(@mining_implement, @bag, @forging_belt)
      return
    elsif @mine_repair_own_tools
      DRC.message('Missing brush or oil, reverting to store repair.')
      @mine_repair_own_tools = false
    end

    result = DRC.bput("analyze my #{@mining_implement}", 'practically in mint', 'pristine condition', 'in good condition', 'crafting tool and it is rather scuffed up', 'Roundtime')
    waitrt?

    DRCC.stow_crafting_item(@mining_implement, @bag, @forging_belt)
    return unless /roundtime/i =~ result
    repair = get_data('town')[@hometown]['metal_repair']
    DRCT.walk_to(repair['id'])
    DRCC.get_crafting_item(@mining_implement, @bag, @bag_items, @forging_belt)
    DRC.bput("give #{repair['name']}", 'Just give it to me again', "If you agree, give it to me again", "You don't need to specify the object", "Please don't lose this ticket!", "You hand.*")
    DRC.bput("give #{repair['name']}", 'Just give it to me again', "If you agree, give it to me again", "You don't need to specify the object", "Please don't lose this ticket!", "You hand.*")
    pause 10 until DRC.bput('look at my ticket', 'should be ready by now', 'Looking at the') == 'should be ready by now'
    DRC.bput("give #{repair['name']}", 'You hand', 'takes your ticket')
    DRCC.stow_crafting_item(@mining_implement, @bag, @forging_belt)
  end

  def self_repair(repair_tool)
    DRCC.get_crafting_item(repair_tool, @bag, @bag_items, @forging_belt)
    command = repair_tool == 'wire brush' ? "rub #{@mining_implement} with my wire brush" : "pour my oil on my #{@mining_implement}"
    
      case DRC.bput(command, 'Roundtime', 'not damaged enough',                            
                             'You cannot do that while engaged!', 'cannot figure out how', 'Pour what?')
      when 'Roundtime'
          DRCC.stow_crafting_item(repair_tool, @bag, @forging_belt)
          return if repair_tool == "of oil"
          self_repair('of oil')
          if /You recall/i =~ DRC.bput('craft blacksmithing Proper Forging Tool Care', 'You recall that you know this technique', 'You know nothing about that technique')
            @next_repair = Time.now + 7200 #this tech makes repaired tools immune to damage for 2 hours (7200 seconds)
          end
          return
      when 'not damaged enough', 'You cannot do that while engaged!'
          DRCC.stow_crafting_item(repair_tool, @bag, @forging_belt)
          return
      when 'cannot figure out how', 'Pour what?'
          @mine_repair_own_tools = false
          DRC.message("Something went wrong, lets let the professionals handle repairs for today")
          check_repair
          return
      end
  end

  def mine_rooms(rooms)
    rooms.each do |room|
      DRC.wait_for_script_to_complete('safe-room') if bleeding?
      next unless mine?(room)
      check_repair
    end
  end

  def mine?(room)
    waitrt?
    DRCT.walk_to(room)
    unless DRRoom.pcs.empty?
      return false if @skip_populated

      fput('wave')
    end

    unless @mine_every_room
      DRC.bput('prospect', 'Roundtime')
      results = reget(20, 'can be mined here')

      waitrt?

      echo(results) if UserVars.mining_debug

      return false if results.nil?
      return false unless results
                          .each_with_object([]) { |line, array| array << line.match(/You are certain that (.*) can be mined here/i)[1] }
                          .reject(&:nil?)
                          .map(&:downcase)
                          .any? { |vein| @vein_list.map(&:downcase).include?(vein) }
    end

    waitrt?

    DRC.wait_for_script_to_complete('mine')
    DRC.wait_for_script_to_complete('buff', ['mining-buddy'])
    true
  end
end

MiningBuddy.new

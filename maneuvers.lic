=begin
    Maneuver manager script runs passively whilst pvping. Example yaml settings:

    maneuvers_reload: true # Whether to reload after a powershot. First load on startup by default, false means won't reload after a shot.
    maneuvers_tm_spell_and_mana: lb 15 # spell abbreviation/name and mana for targeted spell
    maneuvers_aoe_spell_and_mana: starcrash 31 # spell abbrev/name and mana for aoe (tremors, starcrash, etc)
    maneuvers_cyclic_spell_and_mana: ee 8 # spell abbrev/name and mana for cyclic (USOL, EE, etc)
    maneuvers_debil_spell_and_mana: df 6 # spell abbrev/name and mana for debil
    maneuvers_debil_prep_time: 2 # prep time for debil cast, 0 is snap cast, default is 5 seconds    
    maneuvers_bonded_thrown_skill: Heavy Thrown # Only if this is bonded, uses hurl
    maneuvers_bombo_list: # weapon skills for each maneuver
      default: Large Edged # Weapon you dance with, decent balance/damage
      impale: Polearms
      cleave: Large Edged
      crash: Small Blunt
      doublestrike: ["Large Edged", "Small Blunt"]
      twirl: Staves
      palmstrike:
      powershot: Crossbow
=end

custom_require.call(%w[drinfomon common common-items common-arcana equipmanager events])

class Maneuvers
    def initialize
        arg_definitions = [[
        { name: 'script_summary', optional: true, description: "Passive PVP helper script"}
        ]]
        args = parse_args(arg_definitions)
        @settings = get_settings
        @weapons = @settings.weapon_training
        @maneuver_weapons_skill = @settings.maneuvers_bombo_list
        @equip = EquipmentManager.new(@settings)
        @default_weapon_skill = @settings.maneuvers_default_weapon_skill || "Small Edged"
        @powershot_weapon_skill = @settings.maneuvers_powershot_weapon_skill || "Crossbow"
        @doublestrike_weapon_skills = @settings.maneuvers_doublestrike_skills || ["Large Edged", "Large Blunt"]
        @maneuvers_bonded_thrown_skill = @settings.maneuvers_bonded_thrown_skill
        @maneuvers_tm_spell_and_mana = @settings.maneuvers_tm_spell_and_mana
        @maneuvers_aoe_spell_and_mana = @settings.maneuvers_aoe_spell_and_mana
        @maneuvers_cyclic_spell_and_mana = @settings.maneuvers_cyclic_spell_and_mana
        @maneuvers_debil_spell_and_mana = @settings.maneuvers_debil_spell_and_mana
        @maneuvers_debil_prep_time = @settings.maneuvers_debil_prep_time || 5
        @maneuvers_bombo_list = @settings.maneuvers_bombo_list
        Flags.add("barbarian-cooldown", /With expert skill you end the attack and maneuver into a better position/)
        Flags.add("SK-used", /In one frozen moment, your thoughts shift to a dreamlike tableau/)
        UserVars.maneuver_cooldowns ||= {}
        @maneuver_list = []
        @maneuver_weapons_skill.each { |type,skill| @maneuver_list << type unless type == "default" }
        check_powershot if @settings.maneuvers_reload
        echo("***Send commands to this script via ;send <command>***")
        DRC.message("Available commands are as follows:\ncom : Displays this message\nsu : Perform maneuver SUPLEX (requires grappled, empty hands)\nim : Perform maneuver IMPALE\ncr : Perform maneuver CRASH\ncl :  : Perform maneuver CLEAVE\ntw : Perform maneuver TWIRL\npo : Perform maneuver POWERSHOT\nload : LOADs powershot weapon\npa : Perform maneuver PALMSTRIKE\nhu : HURL and invoke a bonded thrown weapon\ndo : Perform maneuver DOUBLESTRIKE\nde : Prepares debil spell, cast after #{@maneuvers_debil_prep_time} seconds\ntm : Prepares targeted spell, MUST BE CAST MANUALLY\naoe : Prepares AOE spell(eg Tremors), casts when ready\ncy : Prepares CYCLIC spell, casts when ready\nlist : Displays cooldown information\nbombo : Cycles through any maneuvers not on cooldown")
        ready("default")
        passive_loop
    end

    def passive_loop
        ready = @maneuver_list
        loop do
            if Flags["SK-used"]
                UserVars.maneuver_cooldowns.store("Syamelyo Kuniyo", Time.now + 605)
                Flags.reset("SK-used")
            end
            line = get until (line && !stunned?) || UserVars.maneuver_cooldowns.any? { |man,cd| cd <= Time.now } || !standing? || Flags["spell-prepped"]
            DRC.fix_standing unless standing?

            UserVars.maneuver_cooldowns.each { |man,cd| 
                next unless cd <= Time.now
                DRC.message("#{man.upcase} now off cooldown")
                ready << man
            }
            UserVars.maneuver_cooldowns.reject! { |man,cd| man if cd <= Time.now }
            if Flags["spell-prepped"]
                DRCA.cast?
                Flags["spell-prepped"] = false
            end
            case line
            when /^com.*/
                echo("***Send commands to this script via ;send <command>***")
                DRC.message("Available commands are as follows:\ncom : Displays this message\nsu : Perform maneuver SUPLEX (requires grappled, empty hands)\nim : Perform maneuver IMPALE\ncr : Perform maneuver CRASH\ncl :  : Perform maneuver CLEAVE\ntw : Perform maneuver TWIRL\npo : Perform maneuver POWERSHOT\nload : LOADs powershot weapon\npa : Perform maneuver PALMSTRIKE\nhu : HURL and invoke a bonded thrown weapon\ndo : Perform maneuver DOUBLESTRIKE\nde : Prepares debil spell, cast after #{@maneuvers_debil_prep_time} seconds\ntm : Prepares targeted spell, MUST BE CAST MANUALLY\naoe : Prepares AOE spell(eg Tremors), casts when ready\ncy : Prepares CYCLIC spell, casts when ready\nlist : Displays cooldown information\nbombo : Cycles through any maneuvers not on cooldown")
            when /^im.*/
                next if UserVars.maneuver_cooldowns['impale']
                impale
            when /^cr.*/
                next if UserVars.maneuver_cooldowns['crash']
                crash
            when /^cl.*/
                next if UserVars.maneuver_cooldowns['cleave']
                cleave
            when /^tw.*/
                next if UserVars.maneuver_cooldowns['twirl']
                twirl
            when /^po.*/
                next if UserVars.maneuver_cooldowns['powershot']
                powershot
            when /^pa.*/
                next if UserVars.maneuver_cooldowns['palmstrike']
                palmstrike
            when /^do.*/
                next if UserVars.maneuver_cooldowns['doublestrike']
                doublestrike
            when /^su.*/
                next if UserVars.maneuver_cooldowns['suplex']
                suplex
            when /^de.*/
                DRC.bput("Prepare #{@maneuvers_debil_spell_and_mana}", //)
                pause @maneuvers_debil_prep_time
                DRCA.cast?
            when /^hu.*/
                ready(@weapons[@maneuvers_bonded_thrown_skill])
                if /You hurl a/i =~ DRC.bput("hurl", /^You hurl a/, /^What are you trying to attack/, /^Face what?/)
                    DRC.bput('invoke', /^Roundtime/, /^You don't have any bonds to invoke/)
                end
                ready("default")
            when /^tm.*/
                DRC.bput("Target #{@maneuvers_tm_spell_and_mana}", //)
                DRC.message("Loaded, fire when ready with manual 'cast'")
            when /^aoe/
                DRC.bput("Prepare #{@maneuvers_aoe_spell_and_mana}", //)
                Flags.add("spell-prepped", /^You feel fully prepared to cast your spell/)
            when /^cy.*/
                DRC.bput("Prepare #{@maneuvers_cyclic_spell_and_mana}", //)
                Flags.add("spell-prepped", /^You feel fully prepared to cast your spell/)
            when /^load/
                @noload = false
                check_powershot
                ready("default")
            when /^list/
                UserVars.maneuver_cooldowns.each { |man,cd| 
                    ready -= [man]
                    DRC.message("Time remaining on #{man} : #{cd - Time.now}") if man }
                ready.each { |maneuver| DRC.message("#{maneuver} ready for use") }
            when /^bombo/
                @maneuvers_bombo_list.each do |type, skill|
                    next if UserVars.maneuver_cooldowns[type]
                    send(type, true)
                end
                ready("default")
            end
        end
    end

    def impale(bombo = false)
        ready("impale")
        maneuver('impale')
        ready("default") unless bombo
    end

    def crash(bombo = false)
        ready("crash")
        maneuver('crash')
        ready("default") unless bombo
    end

    def cleave(bombo = false)
        ready("cleave")
        maneuver('cleave')
        ready("default") unless bombo
    end

    def twirl(bombo = false)
        ready("twirl")
        maneuver('twirl')
        ready("default") unless bombo
    end

    def powershot(bombo = false)
        ready("powershot")
        maneuver('powershot')
        fput("stow feet")
        check_powershot
        ready("default") unless bombo
    end

    def palmstrike(bombo = false)
        ready("palmstrike")
        maneuver('palmstrike')
        ready("default") unless bombo
    end

    def doublestrike(bombo = false)
        ready("doublestrike")
        @equip.wield_weapon_offhand?(@weapons[@maneuver_weapons_skill["doublestrike"].last])
        maneuver('doublestrike')
        ready("default") unless bombo
    end

    def suplex(bombo = false)
        maneuver('suplex')
        DRC.fix_standing
        ready("default") unless bombo
    end

    def ready(skill)
        return if DRCI.in_hands?(@weapons[@maneuver_weapons_skill[skill]])
        @equip.return_held_gear
        @equip.wield_weapon?(@weapons[@maneuver_weapons_skill[skill]])
    end

    def maneuver(type)
        result = DRC.bput("maneuver #{type}", /^Roundtime/, /^You aren't close enough/, /^You must rest a bit longer/, /^What are you trying to attack/, /^With a loud twang/, /^You draw your opponent close/, /^You prepare the shot/)
        case result
        when /Roundtime/, /With a loud twang/, /You draw your opponent close/
            UserVars.maneuver_cooldowns.store(type, Time.now + 90)
            true
        when /You aren't close enough/
            fput('engage')
            false
        when /You must rest a bit longer/
            DRC.message("Timer not expired on #{type} maneuver")
            false
        when /What are you trying to attack/
            fput('search')
            false
        when /You prepare the shot/
            check_powershot
            false
        end
        if Flags["barbarian-cooldown"]
            UserVars.maneuver_cooldowns.store(type, Time.now + 55)
            Flags.reset("barbarian-cooldown")
        end
    end

    def check_powershot
        return if @noload
        @noload = @settings.maneuvers_reload ? false : true
        case DRC.bput("Look on my #{@weapons[@maneuver_weapons_skill["powershot"]]}", /^There is nothing on there/, /^On the .* you see/)
        when /There is nothing on there/
            ready_ranged("powershot")
            DRC.bput("load my #{@weapons[@maneuver_weapons_skill["powershot"]]}", /^Roundtime/, /already loaded/)
            DRC.bput("wear my #{@weapons[@maneuver_weapons_skill["powershot"]]}", /^You sling/)
        end
    end
end

Maneuvers.new

custom_require.call(%w(common common-arcana events spellmonitor))

class Waggle
  include DRC
  include DRCA

  def initialize
    arg_definitions = [
      [
        { name: 'spells', regex: /\w+/, optional: true, description: 'spell list to use, otherwise default' }
      ]
    ]

    args = parse_args(arg_definitions)

    @settings = get_settings

    waggle_spells = @settings.waggle_sets

    spells = args.spells ? waggle_spells[args.spells] : waggle_spells['default']

    check_spells(spells)
  end

  def check_spells(spells)
    check_osrel
    spells.each do |name, data|
      next if DRSpells.active_spells[name] && (data['recast'].nil? || DRSpells.active_spells[name].to_i > data['recast'])
      while mana < 40
        pause 15
        echo('Waiting on mana...')
      end
      cast_spell(data)
    end
  end

  def check_osrel
    return unless DRSpells.active_spells['Osrel Meraud'] && DRSpells.active_spells['Osrel Meraud'] < 90
    infuse_om(!@settings.osrel_no_harness, @settings.osrel_amount)
  end

  def cast_spell(data)
    Flags.add('w-spellcast', '^You feel fully prepared to cast your spell\.')
    Flags.add('w-spell-fail', 'Currently lacking the skill to complete the pattern', 'backfires')

    if data['moon']
      # Look for a moon that will be up for the next few minutes
      unless moon = UserVars.moons.find { |moon_name, moon_data| UserVars.moons['visible'].include?(moon_name) && moon_data['timer'] >= 4 }.first
        echo "No moon available to cast #{data['abbrev']}"
        unless Script.running? 'moonwatch'
          echo 'moonwatch is not running. Starting it now'
          custom_require.call('moonwatch')
          echo "Run `;e autostart('moonwatch')` to avoid this in the future"
        end

        unless moon = UserVars.moons.find { |moon_name, moon_data| UserVars.moons['visible'].include?(moon_name) && moon_data['timer'] >= 4 }.first
          echo "Couldn't find any moons to cast #{data['abbrev']} with"
          return
        end
      end
      data['cast'] = "cast #{moon}"
    end

    fput('release gj') if data['cyclic'] && DRSpells.active_spells['Glythtide\'s Joy']
    fput('release care') if data['cyclic'] && DRSpells.active_spells['Caress of the Sun']
    fput('release bes') if data['cyclic'] && DRSpells.active_spells['Bear Strength']

    bput('prep symb', 'You recall the exact details of the', 'But you\'ve already prepared') if data['symbiosis']
    if /Something in the area interferes/ =~ bput("prepare #{data['abbrev']} #{data['mana']}", @settings.prep_messages)
      fput('rel symb') if data['symbiosis']
      return
    end

    if data['cambrinth']
      find_cambrinth(@settings)

      charge_and_invoke(@settings, data['cambrinth'])

      stow_cambrinth(@settings)
    end

    pause 0.5 until Flags['w-spellcast']

    Flags.reset('w-spell-fail')

    while DRSpells.prep_spell
      data['before'].each { |action| bput(action['message'], action['matches']) }
      fput(data['cast'] || 'cast')
      data['after'].each { |action| bput(action['message'], action['matches']) }
    end

    return unless data['symbiosis']

    fput('rel symb') if Flags['w-spell-fail']
  end
end

Waggle.new

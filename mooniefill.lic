custom_require.call(%w[common common-moonmage])

class MoonieFill
  def initialize
    @magic = ['Dawgolesh', 'Durgaulda', 'Ismenia', 'Yavash', 'Wolf', 'Cobra', 'Ox', 'Donkey', 'Coyote', 'Dove', 'Phoenix', 'Cow', 'Shrike', 'Jackal', 'Amlothi', 'Wren', 'Nightingale', 'Owl', 'Adder', 'Shrew', 'Toad']
    @lore = ['Cobra', 'Donkey', 'Wren', 'Ismenia', 'Xibar', 'Raven', 'Dolphin', 'Albatross', 'Heron', 'Welkin', 'Phoenix', 'Shardstar', 'Weasel', 'King Snake', 'Hare', 'Brigantine', 'Scales', 'Amlothi', 'Verena']
    @survival = ['Sun', 'Dolphin', 'Brigantine', 'Ox', 'Heart', 'Lion', 'Unicorn', 'Boar', 'Panther', 'Wolverine', 'Shark', 'Goshawk', 'Raccoon', 'Triquetra', 'Szeldia', 'Heron', 'Cow', 'Shrike', 'Ram', 'Vulture', 'Archer']
    @offense = ['Szeldia', 'Er\'qutra', 'Boar', 'Panther', 'Wolverine', 'Shark', 'Triquetra', 'Weasel', 'Scales', 'Coyote', 'Owl', 'Shrew', 'Cat', 'Mongoose', 'Merewalda', 'Archer', 'Adder', 'Scorpion', 'Centaur', 'Viper', 'Spider']
    @defense = ['Merewalda', 'Dawgolesh', 'Mongoose', 'Scorpion', 'Centaur', 'Lion', 'Goshawk', 'Raccoon', 'Morleena', 'Albatross', 'Welkin', 'Shardstar', 'King Snake', 'Hare', 'Dove', 'Nightingale', 'Katamba', 'Magpie', 'Vulture', 'Jackal', 'Giant']
    @pools = ['Survival', 'Magic', 'Lore', 'Defense', 'Offense']
    @settings = get_settings
    do_the_things
  end

  def fill_pools
    @pools.each do |pool|
      case DRC.bput("predict state #{pool}", /no understanding/, /feeble understanding/,
                    /weak understanding/, /fledgling understanding/, /modest understanding/,
                    /decent understanding/, /significant understanding/, /potent understanding/,
                    /insightful understanding/, /powerful understanding/, /complete understanding/)
      when /complete understanding/
        DRC.message("#{pool} is full!")
      else
        observe(pool)
      end
    end
  end

  def observe(pool)
    if pool == 'Survival'
      constellations = @survival
    elsif pool == 'Magic'
      constellations = @magic
    elsif pool == 'Lore'
      constellations = @lore
    elsif pool == 'Offense'
      constellations = @offense
    elsif pool == 'Defense'
      constellations = @defense
    else
      DRC.message("Wut?")
    end

    unless DRCMM.get_telescope?(@settings.telescope_name, @settings.telescope_storage)
      DRC.message("Could not get telescope. Exiting.")
      exit
    end
    constellations.each do |constellation|
      DRC.bput("center my #{@settings.telescope_name} on #{constellation}", /foiled by the daylight/, /What did you want/, /You put your eye/)
      case DRC.bput('peer my telescope', /You learned something useful/, /You peer aimlessly/, /You are unable to make/, /Although you were nearly/, /Too many futures cloud your mind/)
      when /You learned something useful/, /Although you were nearly/
        waitfor 'You feel you have sufficiently pondered'
        check_pool(pool)
      when /Too many futures cloud your mind/
        fill_pools
      end
    end
    unless DRCMM.store_telescope?(@settings.telescope_name, @settings.telescope_storage)
      DRC.message("Could not put away telescope. Don't lose it...")
    end
  end

  def check_pool(pool)
    DRC.wait_for_script_to_complete('buff', ['astrology'])
    case DRC.bput("predict state #{pool}", /no understanding/, /feeble understanding/,
                  /weak understanding/, /fledgling understanding/, /modest understanding/,
                  /decent understanding/, /significant understanding/, /potent understanding/,
                  /insightful understanding/, /powerful understanding/, /complete understanding/)
    when /complete understanding/
      DRC.message("#{pool} is full!")
      return
    else
      observe(pool)
    end
  end

  def do_the_things
    DRC.wait_for_script_to_complete('buff', ['astrology'])
    fill_pools
  end
end

MoonieFill.new

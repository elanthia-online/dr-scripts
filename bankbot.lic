# want_script_output
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#bankbot
=end

custom_require.call(%w[common common-validation drinfomon events])

class Bankbot
  include DRC

  $CURRENCIES = %w[Kronars Lirums Dokoras]

  def initialize
    Flags.add('tip-accepted', '.* accepts your tip and slips it away with a smile')
    Flags.add('tip-declined', '.* declines your tip offer')
    Flags.add('tip-expired', 'Your tip offer to .* has expired', 'Your tip offer has expired')
    # This provides a default balance of 0 for all currencies
    @ledger = Hash.new { |hash, key| hash[key] = Hash.new { |h, k| h[k] = 0 } }
    # Convert symbols to strings
    load_bankbot_ledger.each { |k, v| @ledger[k.to_s] = v }
    echo("Initialized ledger: #{@ledger}")

    fput('avoid !all')
    fput('avoid whispering')
  end

  def help(character)
    fput "whisper #{character} Supported commands are:"
    fput "whisper #{character}   (help) - this list"
    fput "whisper #{character}   (bal|balance) - view your current balance (bankbot will also respond to an LNet private message)"
    fput "whisper #{character}   (with|withdraw) [amount] [currency] - withdraw [amount] [currency] from your bankbot balance."
    fput "whisper #{character}   (with|withdraw) all [currency] - withdraw all [currency] from your bankbot balance."
    fput "whisper #{character} I accept coins via TIPs to hold for you."
  end

  def report_balance(character)
    pretty_print = get_balance(character)
    fput "whisper #{character} Your balance is: #{pretty_print}."
  end

  def get_balance(character)
    $CURRENCIES.map { |currency| "#{@ledger[character][currency]} #{currency}" }.join(', ')
  end

  def deposit(character, amount, input_currency)
    deposit_amount = amount.to_i
    currency = determine_currency(input_currency)
    unless currency
      log(character, 'deposit', deposit_amount, input_currency, 'currency not recognized')
      fput "whisper #{character} I'm sorry, I don't recognize the currency '#{input_currency}'."
      return
    end

    case bput('accept tip', 'But you have no tip offers outstanding', "You accept #{character}'s tip and slip it away", "But #{character} isn't here")
    when 'But you have no tip offers outstanding', /But .* isn't here/i
      log(character, 'deposit', deposit_amount, currency, 'character not found')
      return
    when /You accept .*'s tip and slip it away/i
      @ledger[character][currency] += deposit_amount
      log(character, 'deposit', deposit_amount, currency, 'succeeded')
      report_balance(character)
    end
  end

  def withdraw_all(character, input_currency)
    currency = determine_currency(input_currency)
    withdrawal_amount = @ledger[character][currency]

    if withdrawal_amount < 1
      log(character, 'withdrawal all', withdrawal_amount, currency, 'no balance to withdrawal all')
      fput "whisper #{character} You do not have any #{currency} to withdraw."
      return
    end

    log(character, 'withdrawal all', 'all', input_currency, 'withdrawal all attempted')
    withdraw(character, @ledger[character][currency], currency)
  end

  def withdraw(character, amount, input_currency)
    withdrawal_amount = amount.to_i
    currency = determine_currency(input_currency)
    unless currency
      log(character, 'withdrawal', withdrawal_amount, input_currency, 'currency not recognized')
      fput "whisper #{character} I'm sorry, I don't recognize the currency '#{input_currency}'."
      return
    end

    if withdrawal_amount < 1
      log(character, 'withdrawal', withdrawal_amount, currency, 'invalid withdrawal amount')
      fput "whisper #{character} That is an invalid amount to withdraw."
      return
    end

    if @ledger[character][currency] < withdrawal_amount
      log(character, 'withdrawal', withdrawal_amount, currency, 'insufficient funds')
      fput "whisper #{character} You don't have that much money."
      report_balance(character)
      return
    end

    Flags.reset('tip-accepted')
    Flags.reset('tip-expired')
    Flags.reset('tip-declined')
    case bput("tip #{character} #{withdrawal_amount} #{currency}", 'You offer', "I don't know who", 'you really should keep every bronze you can get your hands on', 'You already have a tip offer outstanding')
    when "I don't know who"
      log(character, 'withdrawal', withdrawal_amount, currency, 'character not found')
      return
    when 'You already have a tip offer outstanding'
      fput "whisper #{character} Sorry, someone else is in the middle of a withdrawal. Please try again in a moment."
      log(character, 'withdrawal', withdrawal_amount, currency, 'withdrawal already pending')
      return
    when 'you really should keep every bronze you can get your hands on'
      echo '***ERROR*** UNABLE TO TIP DUE TO LOW CIRCLE, EXITING'
      exit
    end

    pause 0.5 until Flags['tip-accepted'] || Flags['tip-expired'] || Flags['tip-declined']

    if Flags['tip-expired']
      log(character, 'withdrawal', withdrawal_amount, currency, 'expired')
    end

    if Flags['tip-declined']
      log(character, 'withdrawal', withdrawal_amount, currency, 'declined')
    end

    return unless Flags['tip-accepted']
    @ledger[character][currency] -= withdrawal_amount
    log(character, 'withdrawal', withdrawal_amount, currency, 'succeeded')
    report_balance(character)
  end

  private

  def log(character, action, amount, currency, message)
    save_bankbot_transaction("#{character}, #{action}, #{amount}, #{currency}, #{message}", @ledger)
    echo("Logging: #{character}, #{action}, #{amount}, #{currency}, #{message}")
    echo("Ledger: #{@ledger}")
  end

  def determine_currency(input)
    $CURRENCIES.find { |s| s.downcase.include?(input.downcase) }
  end
end

arg_definitions = [
  [
    { name: 'start', regex: /start/i, description: 'Required: prevents accidentally starting up bankbot' },
    { name: 'announce', regex: /announce/i, optional: true, description: 'If arg is present, bankbot will announce its presence in LNet' },
    { name: 'greet', regex: /greet/i, optional: true, description: 'If arg is present, bankbot will greet characters after validating (but only once)' }
  ]
]

args = parse_args(arg_definitions)

bankbot = Bankbot.new
validator = CharacterValidator.new(args.announce, false, args.greet, 'Bankbot')

@last_room_list = []
loop do
  line = script.gets?
  pause 0.05 unless line

  if DRRoom.pcs != @last_room_list
    (DRRoom.pcs - @last_room_list).each { |name| validator.validate(name) }
    @last_room_list = DRRoom.pcs
  end

  case line
  when /^(.*) whispers, "(help)"$/i
    character = Regexp.last_match(1)

    next unless validator.valid?(character)
    bankbot.help(character)
  when /^(.*) offers you a tip of (\d+) (\w+)\.  Type ACCEPT TIP, to accept it or DECLINE TIP to refuse it\.$/
    character = Regexp.last_match(1)
    amount = Regexp.last_match(2)
    currency = Regexp.last_match(3)

    if validator.valid?(character)
      bankbot.deposit(character, amount, currency)
    else
      fput('decline tip')
    end
  when /^(.*) whispers, "(with|withdraw) (\d+) (K.*|L.*|D.*)"$/i
    character = Regexp.last_match(1)
    amount = Regexp.last_match(3)
    currency = Regexp.last_match(4)

    next unless validator.valid?(character)
    bankbot.withdraw(character, amount, currency)
  when /^(.*) whispers, "(with|withdraw) all (K.*|L.*|D.*)"$/i
    character = Regexp.last_match(1)
    currency = Regexp.last_match(3)

    next unless validator.valid?(character)
    bankbot.withdraw_all(character, currency)
  when /^(.*) whispers, "(bal|balance)"$/i
    character = Regexp.last_match(1)

    next unless validator.valid?(character)
    bankbot.report_balance(character)
  when /^(.*) whispers, ".*"$/i
    character = Regexp.last_match(1)

    next unless validator.valid?(character)
    fput "whisper #{character} I'm sorry, I did not understand that command"
    bankbot.help(character)
  when /^\[server\]: "DR:(.*) is tuned to the following channels.*"$/
    character = Regexp.last_match(1)

    validator.confirm(character)
  when /^\[server\]: "DR:(.*) is connected but not tuned to any channels.*"$/
    character = Regexp.last_match(1)

    validator.confirm(character)
  when /^\[Private\]-.*:(.*): "RequestSlackToken"/
    character = Regexp.last_match(1)

    validator.confirm(character)
    validator.send_slack_token(character)
  when /^\[Private\]-.*:(.*): "(bal|balance)"$/i
    character = Regexp.last_match(1)

    validator.confirm(character)
    validator.send_bankbot_balance(character, bankbot.get_balance(character))
  end
end

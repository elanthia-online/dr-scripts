=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#edityaml
=end

custom_require.call('common')

class SetupConfig
  def initialize
    @line_length = 80

    @skills_list = ['Athletics', 'Outdoorsmanship', 'Augmentation', 'Warding', 'Utility', 'Debilitation', 'First Aid', 'Scholarship', 'Astrology', 'Mechanical Lore', 'Scouting', 'Attunement', 'Stealth', 'Thievery', 'Forging', 'Appraisal', 'Theurgy', 'Perception', 'Empathy', 'Locksmithing', 'Summoning', 'Performance', 'Sorcery', 'Trading', 'Outfitting', 'Engineering', 'Primary Magic']

    @skill_warnings = {
      'First Aid' => 'Requires a compendium and at least 40 scholarship',
      'Scholarship' => 'Requires a blacksmithing book, see the forging society book store',
      'Mechanical Lore' => 'Your safe room must have grass and vines for braiding',
      'Outdoorsmanship' => 'Your safe room must have rocks and vines for collecting',
      'Perception' => 'Your safe room must have rocks and vines for collecting',
      'Performance' => 'You will need to be wearing zills',
      'Forging' => 'Requires blacksmithing book, hammer, tongs, and shovel. See forging set up'
    }

    @user_settings = get_character_setting

    print_solid_line
    print_solid_line ' Setup Configuration '
    print_solid_line
    print_solid_line ' Use ;send # to interact with the menu '
    print_solid_line ' To update a text field ;send # value'
    print_solid_line ' Use ;send save to save and exit at any time '
    print_solid_line ' Use ;send quit to exit at any time DOES NOT SAVE '
    print_solid_line

    display_main_menu
  end

  def print_solid_line(msg = nil)
    line = '*' * @line_length
    line[line.size / 2 - msg.size / 2..line.size / 2 + msg.size / 2] = msg if msg
    line += '*' if line.size < @line_length
    respond(line)
  end

  def yn(val)
    val ? 'Yes' : 'No'
  end

  def wait_for_response
    response = get.strip until response =~ /^\d+$|^save$|^quit$|^\d+ .+/

    case response
    when /save/
      save_config
      'EXIT'
    when /quit/
      'EXIT'
    when /^\d+$/
      response.to_i
    when /(\d+) (.+)/
      echo([Regexp.last_match(1).to_i, Regexp.last_match(2).strip].to_s)
      [Regexp.last_match(1).to_i, Regexp.last_match(2).strip]
    else
      response
    end
  end

  def display_skill_selection_menu
    skills = @user_settings.crossing_training || []
    respond
    print_solid_line ' Choose skills to train '
    respond "Currently Training: #{skills.join(', ')}"
    respond

    @skills_list.each_with_index do |item, index|
      respond "#{index + 1}. #{skills.include?(item) ? 'Stop' : 'Start'} training #{item}#{@skill_warnings[item] ? ' (' + @skill_warnings[item] + ')' : ''}"
    end

    respond "#{@skills_list.size + 1}. Return to previous menu"

    case result = wait_for_response
    when @skills_list.size + 1
      display_edit_training_menu
    when 'EXIT'
    when *(1..@skills_list.size).to_a
      skill = @skills_list[result - 1]
      skills.include?(skill) ? skills.delete(skill) : skills << skill
      @user_settings.crossing_training = skills
      display_skill_selection_menu
    else
      respond('Invalid Selection')
      display_skill_selection_menu
    end
  end

  def display_spell_data_editor(key, data_all)
    data = data_all[key]
    respond
    print_solid_line ' Editing Spell Data '
    print_solid_line ' to update a field, ;send # value'
    respond "1. Abbrev: #{data['abbrev']}"
    respond "2. Symbiosis? #{yn data['symbiosis']}"
    respond "3. Custom cast message: #{data['cast']}"
    respond('6. Remove spell')
    respond('9. Return to previous menu')

    case response = wait_for_response
    when 2
      data['symbiosis'] = !data['symbiosis']
      display_spell_data_editor(key, data_all)
    when 3
      data.delete('cast')
      display_spell_data_editor(key, data_all)
    when 6
      data_all.delete(key)
      display_edit_spell_menu
    when 9
      display_edit_spell_menu
    when 'EXIT'
    else
      if response.is_a?(Array)
        case response.first
        when 1
          data['abbrev'] = response.last
          display_spell_data_editor(key, data_all)
        when 3
          data['cast'] = response.last
          display_spell_data_editor(key, data_all)
        end
      else
        respond('Invalid Selection')
        display_spell_data_editor(key, data_all)
      end
    end
  end

  def display_edit_spell_menu
    @user_settings.training_spells = {} unless @user_settings.training_spells
    training_data = @user_settings.training_spells
    warding = training_data['Warding'] || {}
    aug = training_data['Augmentation'] || {}
    utility = training_data['Utility'] || {}
    respond
    print_solid_line ' Spell Settings '
    respond("1. Warding: #{warding}")
    respond("2. Augmentation: #{aug}")
    respond("3. Utility: #{utility}")
    respond('9. Return to previous menu')
    respond

    case wait_for_response
    when 1
      display_spell_data_editor('Warding', training_data)
      display_edit_spell_menu
    when 2
      display_spell_data_editor('Augmentation', training_data)
      display_edit_spell_menu
    when 3
      display_spell_data_editor('Utility', training_data)
      display_edit_spell_menu
    when 9
      display_spell_training_menu
    when 'EXIT'
    else
      respond('Invalid Selection')
      display_edit_spell_menu
    end
  end

  def display_spell_training_menu
    respond
    print_solid_line ' Magic Training Settings '
    respond("1. Do you use spells to train?: #{yn @user_settings.train_with_spells}")
    respond('2. Edit Spells')
    respond('9. Return to previous menu')
    respond

    case wait_for_response
    when 1
      @user_settings.train_with_spells = !@user_settings.train_with_spells
      display_spell_training_menu
    when 2
      display_edit_spell_menu
    when 9
      display_edit_training_menu
    when 'EXIT'
    else
      respond('Invalid Selection')
      display_spell_training_menu
    end
  end

  def display_edit_training_menu
    respond
    print_solid_line ' Character Settings for Crossing Training '
    respond('1. Choose skills to train')
    respond('2. Setup Magic Training')
    respond('9. Return to main menu')
    respond

    case wait_for_response
    when 1
      display_skill_selection_menu
    when 2
      display_spell_training_menu
    when 9
      display_main_menu
    when 'EXIT'
    else
      respond('Invalid Selection')
      display_edit_training_menu
    end
  end

  def display_item_creation_menu(item = nil)
    item ||= {}
    respond
    print_solid_line ' Edit Item, hold the item in your right hand then pick an option '
    if item[:name]
      respond "Editing: #{item[:adjective]} #{item[:name]} #{item[:is_leather] ? 'Leather' : 'Metallic'} #{item[:swappable] ? 'Swappable' : ''} #{item[:is_worn] ? 'Wearable' : ''} #{item[:hinders_lockpicking] ? 'Hinders locks' : ''} #{item[:tie_to] ? 'Tied to ' + item[:tie_to] : ''}".gsub(/\s+/, ' ')
    else
      respond 'New Item'
    end
    respond('1. Set Adjective/Name')
    respond('2. Toggle Leather/Metallic for repair')
    respond('3. Toggle Worn')
    respond('4. Toggle Hinders Locksmithing')
    respond('5. Set tie_to (hold tie item in left hand, or empty to clear)')
    respond('6. Toggle Swappable weapon')
    respond('7. Save item')
    respond('8. Discard changes')
    respond('9. Remove item')

    case wait_for_response
    when 1
      item[:name] = nil
      item[:adjective] = nil
      /You glance down to see (a|some|an)(.*) in your right hand/ =~ DRC.bput('glance right', 'You glance down to see nothing', 'You glance down to see .* in your right hand')
      long_item = Regexp.last_match(2)
      parts = long_item.gsub(/\bwith\b/, '').split(' ').compact
      if parts.size == 1
        item[:name] = parts.last
      elsif parts.size >= 2
        parts.combination(2).to_a
             .select { |adj, noun| /You tap/ =~ DRC.bput("tap my #{adj}.#{noun}", 'I could not find', 'You tap .* that you are holding') }
             .each do |adj, noun|
          item[:name] = noun
          item[:adjective] = adj
          break
        end
        unless item[:name]
          item[:name] = parts.find { |name| /You tap/ =~ DRC.bput("tap my #{name}", 'I could not find', 'You tap .* that you are holding') }
        end
      end
      display_item_creation_menu(item)
    when 2
      item[:is_leather] = !item[:is_leather]
      display_item_creation_menu(item)
    when 3
      item[:is_worn] = !item[:is_worn]
      display_item_creation_menu(item)
    when 4
      item[:hinders_lockpicking] = !item[:hinders_lockpicking]
      display_item_creation_menu(item)
    when 5
      result = DRC.bput('glance left', 'You glance down to see nothing', 'You glance down to see .* in your left hand')
      if result =~ /to see nothing/
        item[:tie_to] = nil
      else
        /You glance down to see (.*) in your left hand/ =~ result
        parts = left_hand.split(' ').compact
        item[:tie_to] = parts.last
      end
      display_item_creation_menu(item)
    when 6
      item[:swappable] = !item[:swappable]
      display_item_creation_menu(item)
    when 7
      @gearlist.reject! { |gear| gear[:name] == item[:name] && gear[:adjective] == item[:adjective] }
      @gearlist << item
      @user_settings.gear = @gearlist
      display_gear_setup_menu
    when 8
      display_gear_setup_menu
    when 9
      @gearlist.reject! { |gear| gear[:name] == item[:name] && gear[:adjective] == item[:adjective] }
      display_gear_setup_menu
    when 'EXIT'
    else
      respond('Invalid Selection')
      display_item_creation_menu(item)
    end
  end

  def display_gear_setup_menu
    @gearlist = @user_settings.gear([])

    respond
    print_solid_line ' Edit gear '
    respond('1. Add new item')

    @gearlist.each_with_index do |item, index|
      respond "#{index + 2}. Edit: #{item[:adjective]} #{item[:name]} #{item[:is_leather] ? 'leather' : 'metallic'} #{item[:swappable] ? 'swappable' : ''} #{item[:is_worn] ? 'wearable' : ''} #{item[:hinders_lockpicking] ? 'hinders locks' : ''} #{item[:tie_to] ? 'tied to ' + item[:tie_to] : ''}".gsub(/\s+/, ' ')
    end
    respond "#{@gearlist.size + 2}. Return to previous menu"
    respond

    case result = wait_for_response
    when 1
      display_item_creation_menu
    when @gearlist.size + 2
      display_main_menu
    when 'EXIT'
    when *(2..@gearlist.size + 1).to_a
      display_item_creation_menu(@gearlist[result - 2].dup)
    else
      respond('Invalid Selection')
      display_gear_setup_menu
    end
  end

  def display_main_menu
    respond
    print_solid_line ' Main Menu '
    respond('1. Edit character training settings')
    respond('2. Edit character combat settings (not added yet)')
    respond('3. Edit Gear')
    respond('9. Save and exit')
    respond

    case wait_for_response
    when 1
      display_edit_training_menu
    when 2
      display_main_menu
    when 3
      display_gear_setup_menu
    when 9
      save_config
    when 'EXIT'
    else
      respond('Invalid Selection')
      display_main_menu
    end
  end

  def save_config(save = true)
    save_character_profile(@user_settings.to_h) if save
  end
end

SetupConfig.new

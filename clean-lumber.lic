=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#clean-leather
=end

custom_require.call(%w[common common-arcana common-items common-crafting common-money common-travel drinfomon])

class CleanLumber

  def initialize
    arg_definitions = [
      [
        { name: 'type', regex: /\w+/, description: 'wood type to process' },
        { name: 'source', regex: /\w+/, description: 'container' },
        { name: 'storage', regex: /\w+/, description: 'container to put lumber in' },
        { name: 'table_saw', regex: /^table_saw/, optional: true, description: 'Use table saw' },
        { name: 'stack', regex: /\d+/, optional: true, description: 'Optional stack size'}
      ]
    ]
    args = parse_args(arg_definitions)
    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.engineering_belt
    @self_repair = @settings.workorders_repair_own_tools || @settings.mine_repair_own_tools
    @stack = args.stack || 45
    DRCI.stow_hands
    unless args.table_saw
      DRCC.repair_own_tools(get_data('crafting')['blacksmithing'][@hometown], ['saw', 'drawknife'], @bag, @bag_items, @belt) if @self_repair
      DRCC.get_crafting_item('saw', @bag, @bag_items, @belt)
    end

    %w[stick log branch limb deed].each do |size| 
      loop do
        break unless process_size(args, size)
        cut_to_lumber(args, size)
      end
    end
    DRCC.stow_crafting_item('saw', @bag, @belt)
    unless args.table_saw || /You get/ =~ DRC.bput("get #{args.type} lumber from my #{args.storage}", /^You get/, /^What were you referring/)
      DRCC.repair_own_tools(get_data('crafting')['blacksmithing'][@hometown], ['saw', 'drawknife'], @bag, @bag_items, @belt) if @self_repair
      exit
    end
    DRC.bput("get my packet", /^You get/)
    DRC.bput("push my lumber with packet", /^You push the lumber to the side/)
    DRC.bput("Stow my packet", /^You put your packet/, /^Stow what/)
    DRC.bput("Put my deed in #{args.storage}", /^You put your deed/)
    DRCC.repair_own_tools(get_data('crafting')['blacksmithing'][@hometown], ['saw', 'drawknife'], @bag, @bag_items, @belt) unless args.table_saw || !@self_repair
  end

  def process_size(args, size)
    unless /What were you/ =~ DRC.bput("get #{args.type} #{size} from my #{args.source}", 'You get', 'You carefully remove', 'What were you')
      if size == 'deed'
        if /The worker explains/ =~ DRC.bput("Tap my deed", /^You pick up the/, /^The worker explains/)
          DRC.bput("Put my deed in #{args.storage}")
        end
      end
      return true
    end
    false    
  end

  def cut_to_lumber(args, size)
    DRCA.crafting_magic_routine(@settings)
    if args.table_saw && DRC.right_hand
      size = DRC.right_hand.split.last
      DRC.bput("cut #{size} with table saw", /Roundtime/)
    elsif args.table_saw
      size = DRC.left_hand.split.last
      DRC.bput("cut #{size} with table saw", /Roundtime/)
    else
      size = DRC.left_hand.split.last
      until DRC.bput("cut #{size} with my saw", 'roundtime', 'you complete', 'ready to be carved') =~ /you complete|ready to be carved/
        waitrt?
        DRCA.crafting_magic_routine(@settings)
      end
      pause
      waitrt?
      DRCC.stow_crafting_item('saw', @bag, @belt)
      DRCC.get_crafting_item('drawknife', @bag, @bag_items, @belt)
      until DRC.bput("scrape #{size} with my drawknife", 'roundtime', 'work completes') == 'work completes'
        waitrt?
        DRCA.crafting_magic_routine(@settings)
      end
      DRCC.stow_crafting_item('drawknife', @bag, @belt)
    end
    stack(args)
  end

  def stack(args)
    if args.table_saw
      waitrt?
      DRC.bput('combine', /^You combine the stacks/, /^You must be holding/)
    else
      DRC.bput("get #{args.type} lumber from my #{args.storage}", /^What were you referring/, /^You get some/)
      DRC.bput('combine', /^You combine the stacks/, /^You must be holding/)
    end
    /(\d+)/ =~ DRC.bput("Count my lumber", 'You count out \d+ pieces of lumber remaining')
    if Regexp.last_match(1).to_i > @stack
      DRC.bput("get my packet", /^You get/)
      DRC.bput("push my lumber with packet", /^You push the lumber to the side/)
      DRC.bput("Stow my packet", /^You put your packet/, /^Stow what/)
      DRC.bput("Put my deed in #{args.storage}", /^You put your deed/)
    end
    unless args.table_saw
      DRC.bput("Put my #{args.type} lumber in my #{args.storage}", "You put your lumber")
      DRCC.get_crafting_item('saw', @bag, @bag_items, @belt)
    end
  end
end

CleanLumber.new


class DRYamlValidator
  def initialize
    arg_definitions = [[
      { name: 'verbose', regex: /verbose/i, optional: true }
    ]]

    args = parse_args(arg_definitions, true)

    settings = get_settings(args.flex)

    setup_data

    assertions = DRYamlValidator.instance_methods.select { |x| x.to_s =~ /^assert_that_/ && DRYamlValidator.instance_method(x).arity == 1 }

    echo("Checking #{assertions.size} different potential errors")
    assertions.each do |symbol|
      echo(symbol.to_s) if args.verbose
      send(symbol, settings)
    end
    echo('All done!')
  end

  def assert_that_root_keys_exist(settings)
    %w(weapon_training crossing_training hunting_info gear gear_sets)
      .select { |key| settings[key].nil? }
      .each { |key| warn("You are missing a setting that is probably needed: #{key}") }
  end

  def assert_that_weapon_training_has_skills(settings)
    if settings.weapon_training && settings.weapon_training.empty?
      warn('You have no weapons configured in weapon_training: this will likely cause problems.')
    end
  end

  def assert_that_weapon_training_are_skills(settings)
    return unless settings.weapon_training

    bad_names = settings.weapon_training.keys
                        .reject { |skill_name| @valid_weapon_skills.include?(skill_name) }
    unless bad_names.empty?
      bad_names.each { |skill_name| error("Invalid weapon_training: skill name '#{skill_name}'") }
      echo("Valid skills are #{@valid_weapon_skills}")
    end
  end

  def assert_that_summoned_weapons_are_skills(settings)
    return unless settings.summoned_weapons

    settings.summoned_weapons
            .reject { |info| @valid_summon_skills.include?(info['name']) }
            .each { |info| error("Invalid summoned_weapons: skill name '#{info['name']}'") }
  end

  def assert_that_summoned_weapons_are_in_weapon_training(settings)
    return unless settings.summoned_weapons
    return unless settings.weapon_training

    settings.summoned_weapons
            .reject { |info| settings.weapon_training.keys.include?(info['name']) }
            .each { |info| error("A summoned_weapons: skill name '#{info['name']}' is not in weapon_training:") }
  end

  def assert_that_duration_exists_if_not_hunting_priority(settings)
    return if settings.training_manager_hunting_priority
    return unless settings.hunting_info

    settings.hunting_info
            .select { |info| info[:duration].nil? }
            .each { |info| error("No duration: found for '#{info[:zone]}'") }
  end

  def assert_that_stop_on_exists_if_hunting_priority(settings)
    return unless settings.training_manager_hunting_priority && settings.hunting_info

    settings.hunting_info
            .select { |info| info['stop_on'].nil? }
            .each { |info| error("No stop_on: skills found for '#{info[:zone]}'") }
  end

  def assert_that_stop_on_skills_are_valid(settings)
    return unless settings.hunting_info

    settings.hunting_info
            .reject { |info| info['stop_on'].nil? }
            .reject { |info| (info['stop_on'] - @all_skills).empty? }
            .each { |info| error("stop_on: skills not recognized as valid skills '#{(info['stop_on'] - @all_skills)}'") }
  end

  def assert_that_stop_on_weapon_skills_are_in_weapon_training(settings)
    return unless settings.hunting_info
    return unless settings.weapon_training

    settings.hunting_info
            .reject { |info| info['stop_on'].nil? }
            .map { |info| info['stop_on'] }
            .flatten
            .uniq
            .reject { |skill| settings.weapon_training.keys.include?(skill) }
            .select { |skill| @valid_weapon_skills.include?(skill) }
            .each { |skill| error("stop_on: weapon skill #{skill} not in weapon_training: setting") }
  end

  def assert_that_hunting_info_has_zones(settings)
    return unless settings.hunting_info

    settings.hunting_info.each_with_index do |info, index|
      next if info[:zone]
      error("Hunting info at index '#{index}' had no zone.")
    end
  end

  def assert_that_hunting_info_zones_are_in_hunting_or_escort_zones(settings)
    return unless settings.hunting_info

    hunting_zones = get_data('hunting').hunting_zones
    escort_zones = get_data('hunting').escort_zones

    settings.hunting_info
            .reject { |info| !hunting_zones.nil? && hunting_zones.include?(info[:zone]) }
            .reject { |info| !escort_zones.nil? && escort_zones.include?(info[:zone]) }
            .each { |info| error("Hunting zone not found in hunting_zones or escort_zones. '#{info[:zone]}'") }
  end

  def assert_that_gear_sets_not_nil(settings)
    return unless settings.gear_sets

    settings.gear_sets
            .select { |_name, items| items.nil? }
            .each { |name, _items| error("gear_set: '#{name}' is nil, an empty gear set should be #{name}: []") }
  end

  def assert_that_gear_sets_has_standard(settings)
    return unless settings.gear_sets

    unless settings.gear_sets['standard']
      warn('a \'standard\' gear_set: entry is required for combat-trainer to function.')
    end
  end

  def assert_that_gear_sets_has_stealing_if_training_thievery(settings)
    return unless settings.gear_sets
    return unless settings.crossing_training && settings.crossing_training.include?('Thievery')

    unless settings.gear_sets['stealing']
      warn('a \'stealing\' gear_set: entry is required when training Thievery.')
    end
  end

  def assert_that_not_feinting_with_offhand(settings)
    return unless settings.dance_skill == 'Offhand Weapon'

    if (settings.dance_actions || []).grep(/feint/i) ||
       (settings.dance_actions_stealth || []).grep(/feint/i)
      error('Feint in your actions list will cause an error when Offhand Weapon is your dance skill')
    end
  end

  def assert_that_no_research_only_skills_if_research_is_off(settings)
    return if settings.use_research
    return unless settings.crossing_training

    settings.crossing_training
            .select { |skill| ['Arcana', 'Life Magic', 'Holy Magic', 'Lunar Magic', 'Elemental Magic', 'Arcane Magic'].include?(skill) }
            .each { |skill| error("You have a research only skill '#{skill}' listed in crossing_training but research is disabled") }
  end

  def assert_that_all_research_skills_are_in_crossing_training(settings)
    return unless settings.use_research
    return unless settings.crossing_training
    return unless settings.research_skills

    settings.research_skills
            .reject { |skill| settings.crossing_training.include?(skill) }
            .each { |skill| error("Skill in research_skills could not be found in crossing_training. '#{skill}'") }
  end

  def assert_that_crossing_training_skills_are_valid(settings)
    return unless settings.crossing_training

    settings.crossing_training
            .reject { |skill| @all_skills.include?(skill) }
            .each { |skill| error("Invalid crossing_training: skill name '#{skill}'") }
  end

  def assert_that_crossing_training_requires_movement_skills_are_valid(settings)
    return unless settings.crossing_training_requires_movement

    settings.crossing_training_requires_movement
            .reject { |skill| @all_skills.include?(skill) }
            .each { |skill| error("Invalid crossing_training_requires_movement: skill name '#{skill}'") }
  end

  def assert_that_train_workorders_are_valid(settings)
    return unless settings.train_workorders

    settings.train_workorders
            .reject { |discipline| %w(Blacksmithing Tailoring Shaping).include?(discipline) }
            .each { |discipline| error("Invalid train_workorders: discipline name '#{discipline}'") }
  end

  def assert_that_mines_to_mine_are_in_mining_buddy_rooms(settings)
    return unless settings.mines_to_mine

    mining_rooms = get_data('mining').mining_buddy_rooms
    settings.mines_to_mine
            .reject { |mine| mining_rooms.include?(mine) }
            .each { |mine| error("Mine in mines_to_mine could not be found in mining_buddy_rooms. '#{mine}'") }
  end

  def assert_that_gear_sets_contain_described_items(settings)
    return unless settings.gear_sets

    settings.gear_sets
            .values
            .flatten
            .uniq
            .reject { |item| settings.gear.find { |data| item =~ /#{data[:adjective]}\s*#{data[:name]}/i } }
            .each { |item| error("Item in gear_set could not be found in gear listings. '#{item}'") }
  end

  def assert_that_weapon_training_weapons_in_gear(settings)
    return unless settings.weapon_training

    settings.weapon_training
            .reject { |_skill, item| item.empty? }
            .reject { |_skill, item| settings.gear.find { |data| item =~ /#{data[:adjective]}\s*#{data[:name]}/i } }
            .reject { |skill, _item| settings.summoned_weapons && settings.summoned_weapons.find { |data| data['name'] == skill } }
            .each { |skill, item| error("Item in weapon_training could not be found in gear listings. '#{skill}: #{item}'") }
  end

  def assert_that_held_cambrinth_is_deprecated(settings)
    return unless settings.held_cambrinth

    warn('The held_cambrinth setting is deprecated and can be removed from your YAML. We now assume cambrinth is worn (and check your Arcana skill) unless the stored_cambrinth setting is used.')
  end

  def assert_that_training_abilities_are_valid(settings)
    return unless settings.training_abilities

    settings.training_abilities
            .reject { |skill, _cooldown| ['PercMana', 'Perc', 'Perc Health', 'Astro', 'App', 'App Quick', 'App Careful', 'Tactics', 'Hunt', 'Pray', 'Scream', 'Khri Prowess', 'Stealth', 'Ambush Stun', 'Favor Orb', 'Charged Maneuver', 'Meraud'].include?(skill) }
            .each { |skill, _cooldown| error("Ability in training_abilities is not valid: #{skill}") }
  end

  private

  def warn(message)
    echo("WARNING:< #{message}  >")
  end

  def error(message)
    echo("ERROR:< #{message}  >")
  end

  def setup_data
    @valid_thrown_skills = ['Heavy Thrown', 'Light Thrown']
    @valid_aimed_skills = %w(Bow Slings Crossbow)
    @valid_ranged_skills = @valid_thrown_skills + @valid_aimed_skills
    @valid_melee_skills = ['Offhand Weapon', 'Brawling', 'Polearms', 'Large Blunt', 'Twohanded Blunt', 'Staves', 'Small Blunt', 'Small Edged', 'Large Edged', 'Twohanded Edged']
    @valid_weapon_skills = @valid_ranged_skills + @valid_melee_skills
    @valid_summon_skills = @valid_thrown_skills + @valid_melee_skills - ['Offhand Weapon', 'Brawling']

    @all_skills = ['Scouting', 'Evasion', 'Athletics', 'Stealth', 'Perception', 'Locksmithing', 'First Aid', 'Skinning',
                   'Outdoorsmanship', 'Thievery', 'Backstab', 'Thanatology', 'Forging', 'Outfitting', 'Engineering',
                   'Alchemy', 'Scholarship', 'Appraisal', 'Tactics', 'Mechanical Lore', 'Performance', 'Empathy',
                   'Enchanting', 'Trading', 'Attunement', 'Arcana', 'Targeted Magic', 'Debilitation', 'Warding',
                   'Augmentation', 'Utility', 'Sorcery', 'Summoning', 'Astrology', 'Theurgy', 'Inner Magic',
                   'Inner Fire', 'Melee Mastery', 'Missile Mastery', 'Parry Ability', 'Small Edged', 'Large Edged',
                   'Twohanded Edged', 'Twohanded Blunt', 'Small Blunt', 'Large Blunt', 'Bow', 'Slings', 'Crossbow',
                   'Polearms', 'Heavy Thrown', 'Offhand Weapon', 'Brawling', 'Light Thrown', 'Staves', 'Expertise',
                   'Defending', 'Shield Usage', 'Light Armor', 'Chain Armor', 'Brigandine', 'Plate Armor',
                   'Arcana', 'Life Magic', 'Holy Magic', 'Lunar Magic', 'Elemental Magic', 'Arcane Magic']
  end
end

DRYamlValidator.new

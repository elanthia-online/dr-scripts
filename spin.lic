=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#spin
=end

custom_require.call(%w[common common-crafting common-items common-money common-travel])

class Spin
  def initialize
    arg_definitions = [
      [
        { name: 'material', options: %w[silk cotton linen wool burlap], description: 'fiber to spin' },
        { name: 'weight', options: %w[fine thin average thick heavy yarn], optional: true, description: 'Thickness, defaults to heavy' }
      ]
    ]
    args = parse_args(arg_definitions)

    mat_data = {
      'silk'   => { name: 'silk', index: 1, cost: 187, count: 14 },
      'cotton' => { name: 'cotton', index: 2, cost: 185, count: 8 },
      'linen'  => { name: 'linen', index: 3, cost: 167, count: 8 },
      'wool'   => { name: 'wool', index: 4, cost: 133, count: 8 },
      'burlap' => { name: 'burlap', index: 5, cost: 201, count: 4 }
    }

    data = mat_data[args.material]
    @settings = get_settings
    @hometown = @settings.force_crafting_town || @settings.hometown
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.outfitting_belt
    DRCM.ensure_copper_on_hand(data[:cost] * data[:count], @settings, @hometown)

    data[:count].times do |index|
      stock_room = get_data('crafting')['tailoring'][@hometown]['stock-room']
      DRCT.order_item(stock_room, data[:index])
      if index == 0 && data[:name] == 'silk'
        DRC.bput('mark my fibers at 10', /mark it for cutting/)
        DRCC.get_crafting_item('scissors', @bag, @bag_items, @belt)
        DRC.bput('cut my fibers with my scissors', /You carefully cut off/)
        @bag = "other #{@bag}" unless DRCC.stow_crafting_item('scissors', @bag, @belt)
        DRC.bput('drop my other fibers', /You drop some/)
        DRC.bput('get my fibers', /You pick up the fibers lying at your feet/)
      else
        fput('combine my fiber')
      end
    end

    until DRCC.find_wheel(@hometown)
      move('go door')
      pause 30
    end

    fput('put fiber on wheel')
    fput("adjust wheel to #{args.weight || 'heavy'}")
    pause

    until DRC.left_hand || DRC.right_hand
      waitrt?
      case DRC.bput('spin wheel', 'shade', 'twist\b', 'bunch', 'slide', 'roundtime', 'Individual strands of the fiber begin twisting')
      when 'shade'
        pause
        waitrt?
        fput('clean wheel')
      when 'twist', 'Individual strands of the fiber begin twisting'
        pause
        waitrt?
        fput('turn wheel')
      when 'bunch', 'slide'
        pause
        waitrt?
        fput('push wheel')
      else
        pause
        waitrt?
      end
    end

    fput("stow my #{DRC.right_hand || DRC.left_hand}")
  end
end

Spin.new

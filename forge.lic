=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#forge
=end

custom_require.call(%w[common common-arcana common-crafting common-items common-travel events drinfomon])

class Forge
  def initialize
    arg_definitions = [
      [
        { name: 'book_type', display: 'book type', options: %w[blacksmithing armorsmithing weaponsmithing], description: 'What smithing type is this item.' },
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s\-\']+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'metal', regex: /\w+/i, variable: true, description: 'Type of metal ingot to use.' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'name of item being crafted' },
        { name: 'skip', regex: /skip/i, optional: true, description: 'Optional setting to skip restocking consumables if low (oil)' },
        { name: 'debug', regex: /debug/i, optional: true, description: 'displays debug information' }
      ],
      [
        { name: 'instructions', regex: /instructions/i, description: 'Instructions if using instructions' },
        { name: 'metal', regex: /\w+/i, variable: true, description: 'Type of metal ingot to use.' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item being crafted' },
        { name: 'skip', regex: /skip/i, optional: true, description: 'Optional setting to skip restocking consumables if low (oil)' },
        { name: 'debug', regex: /debug/i, optional: true, description: 'displays debug information' }
      ],
      [
        { name: 'recipe_name', display: 'Enhancement', options: %w[temper balance hone lighten reinforce], description: 'Enhancements applied to finished weapons and armor' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to enhance.' },
        { name: 'skip', regex: /skip/i, optional: true, description: 'Optional setting to skip restocking consumables if low (oil)' },
        { name: 'debug', regex: /debug/i, optional: true, description: 'displays debug information' }
      ],
      [
        { name: 'resume', regex: /resume/i },
        { name: 'book_type', display: 'book type', options: %w[blacksmithing armorsmithing weaponsmithing], description: 'What smithing type is this item.' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to resume.' },
        { name: 'debug', regex: /debug/i, optional: true, description: 'displays debug information' }
      ]
    ]

    args = parse_args(arg_definitions)
    Flags.add('forge-assembly', 'another finished \S+ shield (handle)', 'another finished wooden (hilt|haft)', 'another finished (long|short|small|large) leather (cord|backing)', 'another finished (small|large) cloth (padding)', 'another finished (long|short) wooden (pole)', 'appears ready to be reinforced with some (leather strips)')
    Flags.add('work-done', 'from the successful .* process', 'shows a slightly reduced weight', 'shows improved protection', 'Applying the final touches', /^The .* was successfully/)
    Flags.add('ingot-restow', /^You realize .* will not require as much metal as you have, and so you split the ingot and leave the portion you won't be using in your (.*)./)

    settings = get_settings
    @hometown = settings.hometown
    @stamp = settings.mark_crafted_goods
    @cube = settings.cube_armor_piece
    @bag = settings.crafting_container
    @bag_items = settings.crafting_items_in_container
    @forging_belt = settings.forging_belt
    @hammer = settings.forging_tools.find { |item| /hammer|mallet/ =~ item }
    @book_type = args.book_type
    @chapter = args.chapter
    @resume = args.resume
    @instruction = args.instructions
    @item = args.noun
    @info = get_data('crafting')['blacksmithing'][@hometown]
    case args.recipe_name
    when 'hone'
      @recipe_name = "metal weapon honing"
    when 'balance'
      @recipe_name = "metal weapon balancing"
    when 'lighten'
      @recipe_name = "metal armor lightening"
    when 'reinforce'
      @recipe_name = "metal armor reinforcing"
    else
      @recipe_name = args.recipe_name
    end
    echo("Recipe                                       :: #{@recipe_name}") if @debug
    @metal = args.metal
    @next_spin = Time.now
    @debug = args.debug || settings.debug_mode

    DRC.wait_for_script_to_complete('buff', ['forge'])
    if settings.adjustable_tongs && @item != 'tongs'
      @adjustable_tongs = DRCC.get_adjust_tongs?('reset tongs', @bag, @bag_items, @forging_belt)
      echo("Tongs adjustable?                            :: #{@adjustable_tongs}") if @debug
      DRCC.stow_crafting_item('tongs', @bag, @forging_belt)
    end

    find_item if args.resume
    DRCC.check_consumables('oil', @info['finisher-room'], @info['finisher-number'], @bag, @bag_items, @forging_belt) unless args.skip
    set_defaults
    work(settings) if args.resume
    prep(settings)
    DRC.bput("touch my #{@cube}", /^Warm vapor swirls around your head in a misty halo/, /^A thin cloud of vapor manifests with no particular effect./, /^Touch what/) if @cube
    work(settings)
  end

  def check_hand(item)
    if DRCI.in_right_hand?(item)
      DRC.bput('swap', 'You move', 'You have nothing')
    else
      DRC.message("MISSING #{item}, Please find it and restart.")
      magic_cleanup
      exit
    end
  end

  def set_defaults
    case @recipe_name
    when 'temper'
      @home_tool = 'tongs'
      @home_command = "turn #{@item} on forge with my tongs"
      @stamp = false
      swap_tool('tongs')
      check_hand("tongs") unless DRCI.in_left_hand?("tongs")
      @location = "on forge"
      @command ||= "put my #{@item} on the forge"
    when 'metal weapon honing', 'metal weapon balancing'
      @home_tool = 'wire brush'
      @home_command = "push grindstone with my #{@item}"
      check_hand(@item) unless DRCI.in_left_hand?(@item)
      spin_grindstone unless @resume
      @chapter = 10
      @book_type = 'weaponsmithing'
      @stamp = false
    when 'metal armor lightening', 'metal armor reinforcing'
      @home_tool = 'pliers'
      @home_command = "push grindstone with my #{@item}"
      @command ||= "pull my #{@item} with my pliers"
      check_hand(@item) unless DRCI.in_left_hand?(@item)
      @chapter = 5
      @book_type = 'armorsmithing'
      @stamp = false
    else
      @location = "on anvil"
      @home_tool = @hammer
      @home_command = "pound #{@item} on anvil with my #{@hammer}"
    end
    echo("Default tool for this routine                :: #{@home_tool}") if @debug
    echo("Default command for this routine             :: #{@home_command}") if @debug
    echo("Item is where? Empty if held                 :: #{@location}") if @debug
    echo("Item's name?                                 :: #{@item}") if @debug
  end

  def prep(settings)
    DRCA.crafting_magic_routine(settings)
    if @instruction
      DRCC.get_crafting_item("#{@item} instructions", @bag, @bag_items, @forging_belt)
      if /again/ =~ DRC.bput('study my instructions', 'Roundtime', 'Study them again')
        DRC.bput('study my instructions', 'Roundtime', 'Study them again')
      end
      DRCC.stow_crafting_item("#{@item} instructions", @bag, @forging_belt)
    else
      return if @recipe_name.include?('temper')

      if settings.master_crafting_book
        DRCC.find_recipe2(@chapter, @recipe_name, settings.master_crafting_book, @book_type)
      else
        DRCC.get_crafting_item("#{@book_type} book", @bag, @bag_items, @forging_belt)
        echo('*** You will need to upgrade to a journeyman or master book before 176 ranks! ***') if DRSkill.getrank('Forging') == 175
        DRCC.find_recipe2(@chapter, @recipe_name)
        DRCC.stow_crafting_item("book", @bag, @forging_belt)
      end
    end
    swap_tool(@home_tool)
    if @metal
      DRCC.get_crafting_item("#{@metal} ingot", @bag, @bag_items, @forging_belt)
      DRC.bput('put my ingot on anvil', 'You put your')
      swap_tool(@hammer)
      swap_tool('tongs')
      @command = "pound ingot on anvil with my #{@hammer}"
    end
  end

  def spin_grindstone
    waitrt? # Keep, makes it perform the time check AFTER rt.
    return if Time.now <= @next_spin

    case DRC.bput('turn grind',
                  'keeping it spinning fast',
                  'making it spin even faster',
                  'not spinning fast enough',
                  'Turn what',
                  'Roundtime')
    when 'Roundtime', 'not spinning fast enough'
      spin_grindstone
    when 'Turn what'
      DRCC.find_grindstone(@hometown)
      spin_grindstone
    else
      @next_spin = Time.now + 20
    end
  end

  def swap_tool(next_tool, skip = false)
    echo("What is the next tool?                       :: #{next_tool}") if @debug
    echo("Are we holding the next tool?                :: #{DRCI.in_hands?(next_tool)}") if @debug
    echo("Is the next tool tongs?                      :: #{next_tool.include?('tongs')}") if @debug
    echo("Are we adjusting tongs (to tongs)?           :: #{(next_tool == 'tongs') && @adjustable_tongs}") if @debug
    echo("Are we adjusting tongs (to shovel)?          :: #{(next_tool == 'shovel') && @adjustable_tongs}") if @debug
    if next_tool.include?('tongs') && @adjustable_tongs
      echo("Making tongs tongs again                     :: NOW") if @debug
      DRCC.get_adjust_tongs?('tongs', @bag, @bag_items, @forging_belt, @adjustable_tongs)
    elsif next_tool.include?('shovel') && @adjustable_tongs
      echo("Making tongs shovel again                  :: NOW") if @debug
      DRCC.get_adjust_tongs?('shovel', @bag, @bag_items, @forging_belt, @adjustable_tongs)
    elsif !DRCI.in_hands?(next_tool)
      if next_tool == 'tongs'
        echo("Getting tongs (AjT false)                  :: NOW") if @debug
        DRCC.get_crafting_item(next_tool, @bag, @bag_items, @forging_belt)
      else
        DRCC.stow_crafting_item(DRC.right_hand, @bag, @forging_belt)
        DRCC.get_crafting_item(next_tool, @bag, @bag_items, @forging_belt, skip)
      end
    end
  end

  def assemble_part
    while Flags['forge-assembly']
      tool = DRC.right_hand
      DRCC.stow_crafting_item(tool, @bag, @forging_belt)
      part = nil
      part = Flags['forge-assembly'].to_a[1..-1].join(' ')
      Flags.reset('forge-assembly')
      if /referring/ =~ DRC.bput("get my #{part}", 'You get', 'What were you referring to?')
        DRC.message("Missing #{part}, exiting")
        magic_cleanup
        exit
      end
      if /not required/ =~ DRC.bput("assemble my #{@item} with my #{part}", 'affix it securely in place', 'and tighten the pommel to secure it', 'carefully mark where it will attach when you continue crafting', 'You layer the leather strips', 'is not required to continue crafting')
        DRC.bput("stow my #{part}")
      end
      swap_tool(tool) if tool
    end
  end

  def find_item
    if DRCI.in_hands?(@item) # subsumes any enhancement. if you're holding it, it's in this box.
      @recipe_name = "metal weapon balancing"
      @command = "analyze my #{@item}"
      return
    elsif /anvil you see/ =~ DRC.bput("look on anvil", 'anvil you see', 'clean and ready')  # anything on the anvil is likely being crafted.
      @home_tool = @hammer
      @recipe_name = 'metal thing'
      @home_command = "pound #{@item} on anvil with my #{@hammer}"
      @command = "analyze #{@item} on anvil"
      @location = "on anvil"
      return
    elsif /forge you see/ =~ DRC.bput("look on forge", 'forge you see', 'There is nothing') # temper. Only reason anything is on the forge.
      @recipe_name = 'temper'
      @home_tool = 'tongs'
      @home_command = "turn #{@item} on forge with my tongs"
      @stamp = false
      @command = "analyze #{@item} on forge"
      @location = "on forge"
      return
    else
      DRC.message("#{@item} not found")
      exit
    end
  end

  def restow_ingot
    tool = DRC.right_hand
    temp_bag = Flags['ingot-restow'][1].chop
    Flags.reset('ingot-restow')
    return if /#{temp_bag}/ =~ @bag

    DRCC.stow_crafting_item(tool, @bag, @forging_belt)
    DRCI.put_away_item?("#{@metal} ingot", @bag) if DRCI.get_item?("#{@metal} ingot", temp_bag)
    swap_tool(tool) if tool
  end

  def work(settings)
    loop do
      DRCA.crafting_magic_routine(settings)
      assemble_part
      spin_grindstone if @command.include?('grindstone')
      @command = @home_command unless @command

      result = DRC.bput(@command,
                        'You must be holding some metal tongs',
                        'That tool does not seem',
                        'You glance down at the hot coals of the forge',
                        'ensure even heating in the forge',
                        'needs more fuel',
                        'need some more fuel',
                        'Almost all of the coal has been consumed',
                        'fire dims and produces less heat',
                        'fire flickers and is unable to consume its fuel',
                        'The forge fire has died down',
                        'straightening along the horn of the anvil',
                        'would benefit from some soft reworking.',
                        'set using tongs', 'sets using tongs',
                        'into wire using a mandrel or mold set',
                        'metal is in need of some gentle bending',
                        'The grinding has left many nicks and burs',
                        'not spinning fast enough',
                        'must be pounded free',
                        'the armor now needs reassembly with a hammer',
                        'looks ready to be pounded',
                        'appears ready for more pounding',
                        'anything that would obstruct pounding of the metal',
                        'appears ready for pounding the assembled handle',
                        'ready for grinding away of the excess metal',
                        'now appears ready for grinding and polishing',
                        'thinning the armor\'s metal at a grindstone',
                        'The armor is ready to be lightened',
                        'ready to be ground away',
                        'in the slack tub',
                        'The metal is ready to be cooled',
                        'Some pliers are now required',
                        'appear ready to be woven',
                        'using a pair of pliers',
                        'using pliers',
                        'ready for more bending of links and plates',
                        'in need of some oil to preserve',
                        'protection by pouring oil on it',
                        'metal will quickly rust',
                        'to be cleaned of the clay',
                        'now needs the handle assembled and pounded into place',
                        'You need a larger volume of metal',
                        'I could not find what you were referring to',
                        'Ingredients can be added',
                        'Pour what',
                        'Roundtime')
      echo("Match result                                 :: #{result}") if @debug
      echo("Assembly? Part string or false               :: #{Flags['forge-assembly']}") if @debug
      restow_ingot if Flags['ingot-restow']
      case result
      when 'You must be holding some metal tongs', 'That tool does not seem' # tool snafu
        DRCC.get_adjust_tongs?('tongs', @bag, @bag_items, @forging_belt, @adjustable_tongs)
      when 'You glance down at the hot coals of the forge' # first temper put
        @command = "put my #{@item} on the forge"
      when 'ensure even heating in the forge' # keep tempering
        swap_tool('tongs')
        @command = "turn #{@item} on forge with my tongs"
      when 'needs more fuel', 'need some more fuel', 'Almost all of the coal has been consumed' # add fuel
        if @adjustable_tongs
          shovel = "tongs"
          echo("Tool selected for shovel (AjT TRUE)          :: #{shovel}") if @debug
        else
          shovel = "shovel"
          echo("Tool selected for shovel (AjT FALSE)         :: #{shovel}") if @debug
        end
        echo("Tool selected for shovel                       :: #{shovel}") if @debug
        swap_tool('shovel')
        @command = "push fuel with my #{shovel}"
      when 'fire dims and produces less heat', 'fire flickers and is unable to consume its fuel',
           'The forge fire has died down' # push bellows
        swap_tool('bellows')
        @command = "push my bellows"
      when 'straightening along the horn of the anvil', 'would benefit from some soft reworking.',
           'set using tongs', 'sets using tongs', 'into wire using a mandrel or mold set',
           'metal is in need of some gentle bending' # turn with tongs
        swap_tool(@hammer)
        swap_tool('tongs')
        @command = "turn #{@item} on anvil with my tongs"
      when 'in the slack tub', 'The metal is ready to be cooled' # tub-time
        DRCC.stow_crafting_item(DRC.right_hand, @bag, @forging_belt)
        DRCC.stow_crafting_item(DRC.left_hand, @bag, @forging_belt)
        @command = "push tub"
      when 'The grinding has left many nicks and burs'
        swap_tool('wire brush')
        @command = "rub my #{@item} with my brush"
      when 'must be pounded free', 'the armor now needs reassembly with a hammer', 'appears ready for more pounding', # hammer+tongs
           'looks ready to be pounded', 'anything that would obstruct pounding of the metal', 'appears ready for pounding the assembled handle'
        DRC.bput("put my #{@item} on anvil", 'You put') if DRCI.in_hands?(@item)
        swap_tool(@hammer)
        swap_tool('tongs')
        @command = "pound #{@item} on anvil with my #{@hammer}"
      when 'not spinning fast enough' # grindstone slowed before we used
        spin_grindstone
      when 'ready for grinding away of the excess metal', 'now appears ready for grinding and polishing',
           'thinning the armor\'s metal at a grindstone', 'The armor is ready to be lightened', 'ready to be ground away', 'You think adjusting the armor' # grindstone time
        unless DRCI.in_left_hand?(@item)
          DRCC.stow_crafting_item(@hammer, @bag, @forging_belt) if DRCI.in_hands?(@hammer)
          DRCC.stow_crafting_item('tongs', @bag, @forging_belt) if DRCI.in_hands?('tongs')
          DRC.bput("get #{@item} from anvil", 'You get')
          check_hand(@item) unless DRCI.in_left_hand?(@item)
        end
        @home_tool = 'wire brush' if @resume
        @command = "push grindstone with my #{@item}"
      when 'Some pliers are now required', 'appear ready to be woven',
        'using a pair of pliers', 'using pliers', 'ready for more bending of links and plates' # All the pliers
        unless DRCI.in_left_hand?(@item)
          DRCC.stow_crafting_item(@hammer, @bag, @forging_belt) if DRCI.in_hands?(@hammer)
          DRCC.stow_crafting_item('tongs', @bag, @forging_belt) if DRCI.in_hands?('tongs')
          DRC.bput("get #{@item} from anvil", 'You get')
          check_hand(@item) unless DRCI.in_left_hand?(@item)
        end
        swap_tool('pliers')
        @command = "pull my #{@item} with my pliers"
      when 'in need of some oil to preserve', 'protection by pouring oil on it',
           'metal will quickly rust', 'to be cleaned of the clay' # pour oil
        if @home_tool == 'tongs'
          DRCC.stow_crafting_item(DRC.left_hand, @bag, @forging_belt)
          DRC.bput("get #{@item} #{@location}", 'You get')
        elsif !DRCI.in_left_hand?(@item)
          DRCC.stow_crafting_item(DRC.left_hand, @bag, @forging_belt)
          DRC.bput("get #{@item} #{@location}", 'You get')
        end
        check_hand(@item) unless DRCI.in_left_hand?(@item)
        swap_tool('oil', true)
        @command = "pour my oil on my #{@item}"
      when 'now needs the handle assembled and pounded into place'
        DRC.bput("get #{@item} from anvil", 'You get')
        check_hand(@item) unless DRCI.in_left_hand?(@item)
        assemble_part
        DRC.bput("put my #{@item} on anvil", 'You put')
        swap_tool(@hammer)
        swap_tool('tongs')
        @command = "pound #{@item} on anvil with my #{@hammer}"
      when 'You need a larger volume of metal'
        echo '***You need a larger ingot to forge this item.***'
        DRCC.stow_crafting_item(DRC.right_hand, @bag, @forging_belt)
        DRCC.stow_crafting_item(DRC.left_hand, @bag, @forging_belt)
        magic_cleanup
        exit
      when 'Pour what'
        DRCC.check_consumables('oil', @info['finisher-room'], @info['finisher-number'], @bag, @bag_items, @forging_belt)
        swap_tool('oil')
      when 'I could not find what you were referring to' # generally missing a tool
        echo '*** ERROR TRYING TO CRAFT, EXITING ***'
        DRCC.stow_crafting_item(DRC.right_hand, @bag, @forging_belt)
        DRCC.stow_crafting_item(DRC.left_hand, @bag, @forging_belt)
        exit
      when 'Ingredients can be added' # backup catch for assembly
        assemble_part
      when 'Roundtime' # The follow-on for most sub actions, eg shovel/bellows. When no next-step text is received, we revert to the "home" process.
        echo("Work done?                                   :: #{Flags['work-done']}") if @debug
        finish if Flags['work-done']
        swap_tool(@home_tool)
        DRCC.get_adjust_tongs?('tongs', @bag, @bag_items, @forging_belt, @adjustable_tongs) if @home_tool == @hammer
        @command = @home_command
      end
    end
  end

  def finish
    DRCC.stow_crafting_item(DRC.right_hand, @bag, @forging_belt) # stows any tools we're holding, item should be in our left hand always.
    if @stamp
      swap_tool('stamp')
      DRC.bput("mark my #{@item} with my stamp", 'carefully hammer the stamp', 'You cannot figure out how to do that', 'too badly damaged')
      DRCC.stow_crafting_item('stamp', @bag, @forging_belt)
    end

    case @finish
    when /log/
      DRCC.logbook_item('engineering', @item, @bag)
    when /stow/
      DRCC.stow_crafting_item(@item, @bag, @forging_belt)
    when /trash/
      DRCI.dispose_trash(@item)
    else # hold. Just leaves it in your hand.
      DRC.message("#{@item} complete")
    end
    magic_cleanup
    exit
  end

  def magic_cleanup
    if @training_spells.empty?
      exit
    else
      DRC.bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
      DRC.bput('release mana', 'You release all', "You aren't harnessing any mana")
      DRC.bput('release symb', "But you haven't", 'You release', 'Repeat this command')
    end
  end
end

before_dying do
  Flags.delete('forge-assembly')
  Flags.delete('hone-done')
  Flags.delete('ingot-restow')
end

Forge.new

=begin
  Suggestions and contributions are welcome: https://github.com/rpherbig/dr-scripts
  * Adapted from a script by Mallitek

  USAGE:
  ;forge <book type> <chapter> <page> <ingot type> <item noun>

  arg1: type of book (blacksmithing, armorsmithing, weaponsmithing)
  arg2: chapter of book
  arg3: the name of the recipe
  arg4: metal type of the ingot in your bag
  arg5: item noun to make

  EXAMPLES:
  ;forge weaponsmithing 2 sword steel sword
  ;forge blacksmithing 6 "shallow metal cup" bronze cup
  ;forge blacksmithing 6 scratcher bronze scratcher
  ;forge temper sword
=end

custom_require.call(%w(common common-crafting common-travel events))

class Forge
  include DRC
  include DRCC
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'book_type', display: 'book type', options: %w(black armor weapon), description: 'What smithing type is this item.' },
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s]+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'metal', regex: /\w+/i, variable: true, description: 'Type of metal ingot to use.' },
        { name: 'noun', regex: /\w+/i, variable: true }
      ],
      [
        { name: 'temper', regex: /temper/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to temper.' }
      ],
      [
        { name: 'balance', regex: /balance/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to balance.' }
      ],
      [
        { name: 'hone', regex: /hone/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to hone.' }
      ]
    ]

    args = parse_args(arg_definitions)

    settings = get_settings
    @stamp = settings.mark_crafted_goods
    @bag = settings.crafting_container('backpack')
    @belt = settings.forging_belt(nil)
    @hammer = settings.forging_tools.find { |item| /hammer/ =~ item }

    @item = args.noun

    if args.temper
      temper
    elsif args.hone
      hone
    elsif args.balance
      balance
    else
      @book_type = args.book_type
      @chapter = args.chapter
      @recipe_name = args.recipe_name
      @metal = args.metal
      smith
    end
  end

  def get_item(name)
    get_crafting_item(name, @belt)
  end

  def stow_item(name)
    stow_crafting_item(name, @bag, @belt)
  end

  def turn_to(section)
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def temper
    unless checkleft =~ /#{@item}/i || checkright =~ /#{@item}/i
      echo('***Please hold the item to temper.***')
      exit
    end
    bput("put my #{@item} on the forge", 'Put your item onto the forge', 'place it on the forge')
    bput("put my #{@item} on the forge", 'Put your item onto the forge', 'place it on the forge')
    get_item('tongs')

    temper_turn
  end

  def hone
    get_item('weaponsmithing book')
    turn_to("page #{find_recipe(10, 'metal weapon honing')}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    find_empty_room([8909, 8910, 8911], 8775)
    Flags.add('hone-done', 'the metal now needs protection by pouring oil on it')
    do_hone
  end

  def balance
    get_item('weaponsmithing book')
    turn_to("page #{find_recipe(10, 'metal weapon balancing')}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    find_empty_room([8909, 8910, 8911], 8775)
    Flags.add('hone-done', 'the metal now needs protection by pouring oil on it')
    do_hone
  end

  def spin_grindstone
    until 'keeping it spinning fast' == bput('turn grind', 'keeping it spinning fast', 'Roundtime')
      pause
      waitrt?
    end
  end

  def do_hone
    spin_grindstone
    case bput("push grind with #{@item}", 'The grinding has left many nicks and burs in the metal that should be cleaned away', 'roundtime')
    when /nicks and burs/
      get_item('wire brush')
      bput("rub #{@item} with my brush", 'roundtime')
      stow_item('brush')
    end
    pause
    waitrt?
    if Flags['hone-done']
      hone_finish
    else
      do_hone
    end
  end

  def hone_finish
    get_item('oil')
    bput("pour oil on my #{@item}", 'roundtime')
    stow_item('oil')
  end

  def temper_turn
    waitrt?
    case bput("turn #{@item} on forge with my tong",
              'needs more fuel', 'need some more fuel',
              'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel',
              'Roundtime',
              'metal looks to be in need of some oil to preserve', 'metal now needs to be cleaned'
             )
    when 'needs more fuel', 'need some more fuel'
      get_item('shovel')
      bput('push fuel with my shovel', 'Roundtime')
      waitrt?
      stow_item('shovel')
    when 'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel'
      get_item('bellows')
      bput('push my bellows', 'Roundtime')
      waitrt?
      stow_item('bellows')
    when 'metal looks to be in need of some oil to preserve', 'metal now needs to be cleaned'
      temper_finish
    end
    temper_turn
  end

  def temper_finish
    stow_item('tong')
    fput("get #{@item} from forge")
    get_item('oil')
    bput("pour oil on my #{@item}", 'roundtime')
    stow_item('oil')
    exit
  end

  def smith
    get_item("#{@book_type} book")
    turn_to("page #{find_recipe(@chapter, @recipe_name)}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    get_item("#{@metal} ingot")
    bput('put my ingot on anvil', 'You put your')
    get_item(@hammer)
    get_item('tongs')
    pound('ingot')
  end

  def pound(item = @item)
    waitrt?
    case bput("pound #{item} on anvil with my hammer",
              'You must be holding',
              'needs more fuel', 'need some more fuel',
              'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel',
              'Roundtime',
              'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub',
              'straightening along the horn of the anvil', 'would benefit from some soft reworking.', # typo?
              'That tool does not seem',
              'You need a larger volume of metal'
             )
    when 'You must be holding'
      get_item(@hammer)
      pound(item)
    when 'needs more fuel', 'need some more fuel'
      add_fuel
    when 'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel'
      bellows
    when 'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub'
      slack_tub
    when 'straightening along the horn of the anvil', 'would benefit from some soft reworking.'
      turn_item
    when 'That tool does not seem'
      analyze_item
    when 'You need a larger volume of metal'
      echo '***You need a larger ingot to forge this item.***'
      exit
    else
      pound
    end
  end

  def add_fuel
    stow_item('tongs')
    get_item('shovel')
    case bput('push fuel with my shovel', 'Roundtime', 'That tool does not seem')
    when 'That tool does not seem'
      analyze_item
    else
      waitrt?
      stow_item('shovel')
      get_item('tongs')
      pound
    end
  end

  def bellows
    stow_item(@hammer)
    get_item('bellows')
    case bput('push my bellows', 'Roundtime', 'That tool does not seem')
    when 'That tool does not seem'
      analyze_item
    else
      waitrt?
      stow_item('bellows')
      get_item(@hammer)
      pound
    end
  end

  def turn_item
    waitrt?
    case bput("turn #{@item} on anvil with my tongs",
              'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub',
              'Roundtime',
              'That tool does not seem'
             )
    when 'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub'
      slack_tub
    when 'That tool does not seem'
      analyze_item
    else
      pound
    end
  end

  def slack_tub
    stow_item(@hammer)
    stow_item('tongs')
    Flags.add('forge-assembly', 'another finished \S+ shield (handle)', 'another finished wooden (hilt|haft)', 'another finished (long|short|small|large) leather (cord|backing)', 'another finished (small|large) cloth (padding)', 'another finished (long|short) wooden (pole)')
    bput('push tub', 'Roundtime')
    waitrt?
    bput("get #{@item} from anvil", 'You get')

    assemble_part

    if 'armorsmithing'.include? @book_type
      echo('*** NOT YET IMPLEMENTED ***')
      # For armor, you will need to purchase a set of pliers. Rather than using a grindstone, the various pieces of armor must be woven together by using PULL <armor> WITH MY PLIERS. This may take multiple steps of pulling, each with a variety of messaging, but continue to pull. In addition, during these pulls, you may need to ASSEMBLE additional pieces, but this is normal.
    elsif 'weaponsmithing'.include? @book_type
      grind_item
    end

    add_oil
  end

  def assemble_part
    while Flags['forge-assembly']
      part = Flags['forge-assembly'][1..-1].join('.')
      Flags.reset('forge-assembly')
      get_item(part)
      bput("assemble my #{@item} with my #{part}", 'affix it securely in place', 'and tighten the pommel to secure it', 'carefully mark where it will attach when you continue crafting')
      waitrt?
    end
  end

  def grind_item
    find_empty_room([8909, 8910, 8911], 8775)
    spin_grindstone
    bput("push grind with my #{@item}", 'Roundtime', 'needs protection')
    waitrt?
  end

  def add_oil
    get_item('oil')
    bput("pour my oil on my #{@item}", 'Roundtime', 'Applying the final touches')
    waitrt?
    stow_item('oil')
    if @stamp
      fput('get my stamp')
      fput("mark my #{@item} with my stamp")
      pause
      waitrt?
      fput('stow my stamp')
    end
  end

  def analyze_item
    waitrt?
    stow_item(checkleft) # store contents of both hands, reacquire hammer and tongs
    stow_item(checkright)
    get_item(@hammer)
    get_item('tongs')

    case bput("analyze #{@item}", 'The metal is ready to be cooled', 'Almost all of the coal has been consumed', 'ready for more pounding', 'metal will quickly rust', 'The forge fire has died down', 'metal is in need of some gentle bending')
    when 'The metal is ready to be cooled'
      slack_tub
    when 'Almost all of the coal has been consumed'
      add_fuel
    when 'ready for more pounding'
      pound
    when 'metal will quickly rust'
      add_oil
    when 'The forge fire has died down'
      bellows
    when 'metal is in need of some gentle bending'
      turn_item
    end
  end
end

Forge.new

=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#forge
=end

custom_require.call(%w[common common-arcana common-crafting common-travel events drinfomon])

class Forge

  def initialize
    arg_definitions = [
      [
        { name: 'book_type', display: 'book type', options: %w[black armor weapon], description: 'What smithing type is this item.' },
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s\-\']+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'metal', regex: /\w+/i, variable: true, description: 'Type of metal ingot to use.' },
        { name: 'noun', regex: /\w+/i, variable: true }
      ],
      [
        { name: 'book_type', display: 'book type', options: %w[black armor weapon], description: 'What smithing type is this item.' },
        { name: 'instruction', regex: /\w+/i, variable: true, description: 'instruction noun' },
        { name: 'metal', regex: /\w+/i, variable: true, description: 'Type of metal ingot to use.' },
        { name: 'noun', regex: /\w+/i, variable: true }
      ],
      [
        { name: 'temper', regex: /temper/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to temper.' }
      ],
      [
        { name: 'balance', regex: /balance/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to balance.' }
      ],
      [
        { name: 'hone', regex: /hone/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to hone.' }
      ],
      [
        { name: 'lighten', regex: /lighten/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to lighten.' }
      ],
      [
        { name: 'resume', regex: /resume/i },
        { name: 'book_type', display: 'book type', options: %w[black armor weapon], description: 'What smithing type is this item.' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to resume.' }
      ]
    ]

    args = parse_args(arg_definitions)

    @settings = get_settings
    @hometown = @settings.hometown
    @stamp = @settings.mark_crafted_goods
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.forging_belt
    @hammer = @settings.forging_tools.find { |item| /hammer|mallet/ =~ item }
    @shovel = @settings.forging_tools.find { |item| /shovel/ =~ item }
    @training_spells = @settings.crafting_training_spells
    @adjustable_tongs = @settings.adjustable_tongs
    @next_spin = Time.now
    
    @item = args.noun
    DRC.wait_for_script_to_complete('buff', ['forge'])

    Flags.add('forge-assembly', 'another finished \S+ shield (handle)', 'another finished wooden (hilt|haft)', 'another finished (long|short|small|large) leather (cord|backing)', 'another finished (small|large) cloth (padding)', 'another finished (long|short) wooden (pole)', 'ready to be woven into and around the material')
    Flags.add('hone-done', 'the metal now needs protection by pouring oil on it')
    if args.temper
      @temper = true
      temper
    elsif args.hone
      hone
    elsif args.balance
      balance
    elsif args.lighten
      lighten
    elsif args.resume
      @book_type = args.book_type
      analyze_item
    else
      @book_type = args.book_type
      @chapter = args.chapter
      @instruction = args.instruction
      @recipe_name = args.recipe_name
      @metal = args.metal
      @pound = true
      smith
    end
  end

  def get_item(name)
    DRCC.get_crafting_item(name, @bag, @bag_items, @belt)
  end

  def stow_item(name)
    DRCC.stow_crafting_item(name, @bag, @belt)
  end

  def turn_to(section)
    unless section
      echo('Failed to find recipe in book, buy a better book?')
      stow_item('book')
      magic_cleanup
      exit
    end
    DRC.bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def temper
    unless DRC.left_hand =~ /#{@item}/i || DRC.right_hand =~ /#{@item}/i
      echo('***Please hold the item to temper.***')
      magic_cleanup
      exit
    end
    DRCA.crafting_magic_routine(@settings)
    DRC.bput("put my #{@item} on the forge", 'Put your item onto the forge')
    temper_turn(true)
  end

  def hone
    DRCC.find_grindstone(@hometown)
    DRCA.crafting_magic_routine(@settings)
    get_item('weaponsmithing book')
    turn_to("page #{DRCC.find_recipe(10, 'metal weapon honing')}")
    DRC.bput('study my book', 'Roundtime')
    stow_item('book')
    Flags.reset('hone-done')
    do_hone
  end

  def balance
    DRCC.find_grindstone(@hometown)
    DRCA.crafting_magic_routine(@settings)
    get_item('weaponsmithing book')
    turn_to("page #{DRCC.find_recipe(10, 'metal weapon balancing')}")
    DRC.bput('study my book', 'Roundtime')
    stow_item('book')
    Flags.reset('hone-done')
    do_hone
  end

  def lighten
    DRCC.find_grindstone(@hometown)
    DRCA.crafting_magic_routine(@settings)
    get_item('armorsmithing book')
    turn_to("page #{DRCC.find_recipe(5, 'metal armor lightening')}")
    DRC.bput('study my book', 'Roundtime')
    stow_item('book')
    get_item('plier')
    DRC.bput("pull my #{@item} with my pliers", 'must be pounded free')
    stow_item('plier')
    DRC.bput("put my #{@item} on anvil", 'You put')
    get_item(@hammer)
    get_item('tongs')
    DRC.bput("pound #{@item} on anvil with my #{@hammer}", 'roundtime')
    stow_item(@hammer)
    stow_item('tongs')
    DRC.bput("get #{@item} on anvil", 'You get')
    do_lighten
  end

  def spin_grindstone
    waitrt?
    return if Time.now <= @next_spin
    case DRC.bput('turn grind', 
      'keeping it spinning fast', 
      'making it spin even faster', 
      'not spinning fast enough',
      'Roundtime')
    when 'Roundtime', 'not spinning fast enough'
      spin_grindstone
    else
      @next_spin = Time.now + 20
    end
  end

  def do_hone
    spin_grindstone
    DRCA.crafting_magic_routine(@settings)
    case DRC.bput("push grind with my #{@item}", 'not spinning fast enough', 'The grinding has left many nicks and burs in the metal that should be cleaned away', 'roundtime')
    when /not spinning fast enough/
      spin_grindstone
    when /nicks and burs/
      get_item('wire brush')
      DRC.bput("rub my #{@item} with my brush", 'roundtime')
      stow_item('brush')
    end
    if Flags['hone-done']
      pour_oil
    else
      DRCA.crafting_magic_routine(@settings)
      do_hone
    end
  end

  def do_lighten
    spin_grindstone
    DRCA.crafting_magic_routine(@settings)
    case DRC.bput("push grind with my #{@item}", 'With the grinding complete', 'roundtime')
    when 'With the grinding complete'
      DRC.bput("put my #{@item} on anvil", 'You put')
      get_item(@hammer)
      get_item('tongs')
      DRC.bput("pound #{@item} on anvil with my #{@hammer}", 'roundtime')
      stow_item(@hammer)
      stow_item('tongs')
      DRC.bput("get #{@item} from anvil", 'You get')
      get_item('plier')
      DRC.bput("pull my #{@item} with my pliers", 'roundtime')
      stow_item('plier')
      pour_oil
    else
      DRCA.crafting_magic_routine(@settings)
      do_lighten
    end
  end

  def temper_turn(first = false)
    DRCA.crafting_magic_routine(@settings)
    command = first ? "put my #{@item} on the forge" : "turn #{@item} on forge with my tong"
    case DRC.bput(command,
              'needs more fuel', 'need some more fuel',
              'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel',
              'Roundtime',
              'metal looks to be in need of some oil to preserve', 'to be cleaned')
    when 'Turn what?'
      get_item('tongs') unless DRC.right_hand
      DRC.bput("adjust my tongs", 'alongside the tong', 'You cannot adjust') if @adjustable_tongs
      find_item
    when 'needs more fuel', 'need some more fuel'
      get_item('tongs') unless DRC.right_hand
      add_fuel
    when 'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel'
      get_item('bellows')
      DRC.bput('push my bellows', 'Roundtime')
      stow_item('bellows')
    when 'metal looks to be in need of some oil to preserve', 'to be cleaned'
      temper_finish
      magic_cleanup
      exit
    end
    get_item('tongs') unless DRC.right_hand
    temper_turn
  end

  def temper_finish
    DRCA.crafting_magic_routine(@settings)
    stow_item('tong')
    fput("get #{@item} from forge")
    pour_oil
  end

  def smith
    DRCA.crafting_magic_routine(@settings)
    if @chapter
      get_item("#{@book_type} book")
      echo('*** You will need to upgrade to a journeyman or master book before 176 ranks! ***') if DRSkill.getrank('Forging') == 175
      turn_to("page #{DRCC.find_recipe(@chapter, @recipe_name)}")
      DRC.bput('study my book', 'Roundtime')
      stow_item('book')
    elsif @instruction
      get_item("#{@instruction} instructions")
      if /again/ =~ DRC.bput('study my instructions', 'Roundtime', 'Study them again')
        DRC.bput('study my instructions', 'Roundtime', 'Study them again')
      end
      stow_item('instructions')
    end
    get_item("#{@metal} ingot")
    DRC.bput('put my ingot on anvil', 'You put your')
    get_item(@hammer)
    get_item('tongs')
    pound('ingot')
  end

  def pound(item = @item)
    get_item(@hammer) unless DRC.right_hand
    DRCA.crafting_magic_routine(@settings)
    case DRC.bput("pound #{item} on anvil with my #{@hammer}",
              /You must be holding .* to do that.$/,
              /You must be holding some metal tongs in your other hand to do that/,
              'needs more fuel', 'need some more fuel',
              'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel',
              'Roundtime',
              'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub',
              'straightening along the horn of the anvil', 'would benefit from some soft reworking.',
              'sets using tongs', 'into wire using a mandrel or mold set', 'set using tongs',
              'That tool does not seem',
              'push them deep into the fire to set',
              'You believe you can assemble',
              'You need a larger volume of metal',
              'I could not find what you were referring to')
    when /You must be holding .* to do that.$/
      get_item(@hammer)
      pound(item)
    when /You must be holding some metal tongs in your other hand to do that/
      get_item('tongs') unless DRC.left_hand
      DRC.bput("adjust my tongs", 'alongside the tong', 'You cannot adjust') if @adjustable_tongs
      pound(item)
    when 'needs more fuel', 'need some more fuel'
      add_fuel
    when 'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel'
      bellows
    when 'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub'
      slack_tub
    when 'straightening along the horn of the anvil', 'would benefit from some soft reworking.', 'sets using tongs', 'set using tongs', 'into wire using a mandrel or mold set'
      turn_item
    when 'That tool does not seem'
      analyze_item
    when 'You believe you can assemble'
      stow_item(@hammer)
      stow_item('tongs')
      DRC.bput("get #{@item} from anvil", 'You get')
      assemble_part
      Flags.reset('forge-assembly')
      DRC.bput("put my #{@item} on anvil", 'You put')
      analyze_item
    when 'You need a larger volume of metal'
      echo '***You need a larger ingot to forge this item.***'
      stow_item(@hammer)
      stow_item('tongs')
      magic_cleanup
      exit
    when 'I could not find what you were referring to'
      echo '*** ERROR TRYING TO CRAFT, EXITING ***'
      stow_item(@hammer)
      stow_item('tongs')
      exit
    else
      pound
    end
  end

  def add_fuel
    if @adjustable_tongs
      case DRC.bput("adjust my tongs", 'With a yank you fold the shovel', 'You lock the tongs into', 'You cannot adjust', 'You have no idea how')
      when 'You cannot adjust', 'You have no idea how'
        DRC.message('Tongs are not adjustable, reverting. Please change yaml to reflect adjustable_tongs: false')
        @adjustable_tongs = false
        stow_item('tongs') if @pound
        get_item(@shovel)
        noun = 'shovel'
      when 'With a yank you fold the shovel'
        DRC.bput("adjust my tongs", 'alongside the tong')
        noun = 'tongs'
      when 'You lock the tongs into'
        noun = 'tongs'
      end
    else
      stow_item('tongs') if @pound
      get_item(@shovel)
      noun = 'shovel'
    end

    DRCA.crafting_magic_routine(@settings)
    DRC.bput("push fuel with my #{noun}", 'Roundtime', 'That tool does not seem')
    
    case noun
    when 'shovel'
      stow_item('shovel')
      get_item('tongs') if @pound
    when 'tongs'
      DRC.bput("adjust my tongs", 'alongside the tong')
    end
    temper_turn if @temper
    pound if @pound
  end

  def bellows
    DRCA.crafting_magic_routine(@settings)
    stow_item(DRC.right_hand)
    get_item('bellows')
    case DRC.bput('push my bellows', 'Roundtime', 'That tool does not seem')
    when 'That tool does not seem'
      analyze_item
    else
      stow_item('bellows')
      pound if @pound
    end
  end

  def turn_item
    DRCA.crafting_magic_routine(@settings)
    case DRC.bput("turn #{@item} on anvil with my tongs",
              'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub',
              'Roundtime',
              'That tool does not seem')
    when 'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub'
      slack_tub
    when 'That tool does not seem'
      analyze_item
    else
      pound
    end
  end

  def slack_tub
    stow_item(@hammer)
    stow_item('tongs')
    Flags.reset('forge-assembly')
    DRC.bput('push slack tub', 'Roundtime')
    DRC.bput("get #{@item} from anvil", 'You get')

    assemble_part

    if 'armorsmithing'.include? @book_type
      get_item('pliers')
      loop do
        case DRC.bput("pull my #{@item} with my pliers", 'roundtime', 'need of some oil', 'That tool does not seem suitable for that task', 'doesn\'t appear suitable for working')
        when 'That tool does not seem suitable for that task', 'doesn\'t appear suitable for working'
          stow_item('pliers')
          DRC.bput("put my #{@item} on anvil", 'You put')
          Flags.reset('forge-assembly')
          analyze_item
          return
        when 'need of some oil'
          break
        end
        stow_item('pliers')
        assemble_part
        get_item('pliers')
      end
      stow_item('pliers')
    elsif 'weaponsmithing'.include? @book_type
      grind_item
    end
    add_oil
  end

  def assemble_part
    while Flags['forge-assembly']
      part = nil
      part = if Flags['forge-assembly'][0] == 'ready to be woven into and around the material'
               'padding'
             else
               Flags['forge-assembly'].to_a[1..-1].join('.')
             end
      Flags.reset('forge-assembly')
      if /referring/ =~ DRC.bput("get my #{part}", 'You get', 'What were you referring to?')
        DRC.message("Missing #{part}, exiting")
        magic_cleanup
        exit
      end
      if /not required/ =~ DRC.bput("assemble my #{@item} with my #{part}", 'affix it securely in place', 'and tighten the pommel to secure it', 'carefully mark where it will attach when you continue crafting', 'is not required to continue crafting')
        DRC.bput("stow my #{part}")
      end
    end
  end

  def grind_item
    DRCC.find_grindstone(@hometown)
    spin_grindstone
    DRC.bput("push grind with my #{@item}", 'Roundtime', 'needs protection')
  end

  def pour_oil
    ords = %w[second third fourth fifth sixth]
    DRCA.crafting_magic_routine(@settings)
    get_item('oil')
    while ords.any?
      case DRC.bput("pour my oil on my #{@item}", 'Roundtime', 'Applying the final touches', "You can't pour", 'You pour all of')
      when 'Roundtime', 'Applying the final touches'
        stow_item('oil')
        break
      when 'You pour all of'
        get_item('oil')
      else
        stow_item('oil')
        get_item("#{ords.shift} oil")
      end
    end
  end

  def add_oil
    pour_oil

    return unless @stamp
    get_item('stamp')
    DRC.bput("mark my #{@item} with my stamp", 'Roundtime')
    stow_item('stamp')
    magic_cleanup
  end

  def find_item
    @location = ''
    return if DRC.right_hand == @item
    if DRC.bput("look on anvil", 'anvil you see', 'clean and ready') == 'anvil you see'
      @location = ("on anvil")
    elsif DRC.bput("look on forge", 'forge you see', 'There is nothing') == 'forge you see'
      @location = ("on forge")
    else
      DRC.message("#{@item} not found")
      exit
    end
  end

  def analyze_item
    DRCA.crafting_magic_routine(@settings)
    stow_item(DRC.left_hand) # store contents of left hand
    unless DRC.right_hand == @item
      stow_item(DRC.right_hand)
    end
    find_item
    case DRC.bput("analyze #{@item} #{@location}", 'The metal is nicked and burred from heavy grinding', 'ready for additional grinding at a grinding wheel', #balance/hone
                                      'ensure even heating in the forge', #temper
                                      'The metal is ready to be cooled', #tub
                                      'Almost all of the coal has been consumed', #need fuel
                                      'metal will quickly rust', #oil
                                      'The forge fire has died down', #bellows
                                      'metal is in need of some gentle bending', #turn (pound)
                                      'to be pulled', 'with the pliers to stitch them together', #add item (armor)
                                      'ready to be pounded', 'ready for more pounding', 'would obstruct pounding', 'ready for pounding', #pound
                                      'Roundtime') #done
    when 'The metal is nicked and burred from heavy grinding'
      get_item('wire brush')
      DRC.bput("rub my #{@item} with my brush", 'roundtime')
      stow_item('brush')
      do_hone
    when 'ready for additional grinding at a grinding wheel'
      do_hone
    when 'The metal is ready to be cooled'
      slack_tub
    when 'Almost all of the coal has been consumed'
      if @adjustable_tongs
        get_item('tongs') unless DRC.right_hand
      end
      add_fuel
      analyze_item
    when 'ready for more pounding', 'ready to be pounded', 'ready for pounding', 'would obstruct pounding'
      get_item(@hammer)
      get_item('tongs')
      @pound = true
      pound
    when 'ensure even heating in the forge'
      get_item('tongs') unless DRC.right_hand
      @temper = true
      temper_turn
    when 'metal will quickly rust'
      DRC.bput("get #{@item} from anvil", 'You get')
      add_oil
    when 'The forge fire has died down'
      bellows
      analyze_item
    when 'metal is in need of some gentle bending', 'to be pulled', 'a mandrel or mold set'
      get_item(@hammer)
      get_item('tongs')
      @pound = true
      turn_item
    when 'with the pliers to stitch them together'
      get_item('plier')
      DRC.bput("pull my #{@item} with my pliers", 'roundtime')
      stow_item('plier')
      analyze_item
    when 'Roundtime'
      DRC.message("#{@item} appears to be complete")
      exit
    end
  end

  def magic_cleanup
    if @training_spells.empty?
      exit
    else
      DRC.bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
      DRC.bput('release mana', 'You release all', "You aren't harnessing any mana")
      DRC.bput('release symb', "But you haven't", 'You release', 'Repeat this command')
    end
  end
end

before_dying do
  Flags.delete('forge-assembly')
  Flags.delete('hone-done')
end

Forge.new
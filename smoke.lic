=begin
  * If smoke_image is not included with YAML setting, it will just smoke/inhale/exhale.
  * Can use flint or a lighter with YAML.
  * Can random an image, supports array or single.
  * Supports warrior mage cantrip Burning Touch.
  Use YAML settings:
    smoke:
      cigar_container:
      smoke_image:
      lighter:
        type:
        container:
        blade:
=end

custom_require.call(%w[common common-items events])

class Smoker
  include DRC

  def initialize
    arg_definitions = [
      [
        { name: 'cigar', regex: /\w+/i, variable: true, description: 'Cigar noun. (Only thing required if using YAML settings.)' }
      ],
      [
        { name: 'image', regex: /\w+/i, variable: true, description: 'Smoke image to learn, can be an ARRAY, will random one.' },
        { name: 'cigar', regex: /\w+/i, variable: true, description: 'Cigar noun.' },
        { name: 'container', regex: /\w+/i, variable: true, description: "Cigar's container." },
        { name: 'lighter', regex: /\w+/i, variable: true, description: "Lighter's noun." }
      ]
    ]

    args = parse_args(arg_definitions)

    if args.image
      @image = args.image
      @cigar = args.cigar
      @cigar_container = args.container
      @lighter = args.lighter
    else
      smoke_settings = get_settings.smoke

      @cigar = args.cigar
      if smoke_settings['smoke_image']
        if smoke_settings['smoke_image'].is_a? Array
          @image = smoke_settings['smoke_image'].sample
        else
          @image = smoke_settings['smoke_image']
        end
      end
      
      @lighter_info = smoke_settings['lighter']
      @cigar_container = smoke_settings['cigar_container']
    end

    Flags.add('new-cig', 'That was the last of your')

    smoke_cig if light_cig? if get_cig?

    Flags.delete('new-cig')
  end

  def get_cig?
    Unless DRCI.get_item?(@cigar, @cigar_container)
      DRC.message 'Out of cigars, exiting.'
      return false
    end

    true
  end

  def exhale_smoke
    pause 3
    output = 'exhale'
    output = "exhale line #{@image}" if @image
    DRC.bput("#{output}", 'You (blow|breathe|exhale|loft|cast|need)')
  end

  def light_cig?
    output = "get my #{@lighter}"
    output = "get #{@lighter_info['type']} in my #{@lighter_info['container']}" unless @lighter_info.empty?
    output = "prep c b t" if @lighter_info['type'].eql?'cantrip'
    
    case DRC.bput("#{output}", 'You get', 'What were', 'You are already', 'You are now prepared', 'You have no idea')
    when 'You have no idea'
      DRC.message "You don't know the cantrip you are trying to you! EXITING!"
      exit
    when 'You are now prepared'
      case DRC.bput("gesture my #{@cigar}", 'You touch')
      when 'You touch'
        Flags.reset('new-cig')
        return true
      when 'What were'
        DRC.message 'Cigar missing! Exiting!'
        exit
      end
    when 'What were'
      DRC.message 'No lighter found! Exiting.'
      return false
    end

    if @lighter_info['type'].include?('flint')
      DRCI.lower_ground(@cigar)
      DRC.bput("wield my #{@lighter_info['blade']}", 'You get', 'What were', 'You are already', 'You draw')
    end

    if @lighter
      fput("point my #{@lighter} at #{@cigar}")
      waitrt?
    else
      fput("light #{@cigar} with my #{@lighter_info['type']}")
      waitrt?
      DRC.bput("sheath my #{@lighter_info['blade']}", /You (sheath|put)/)
      DRC.bput("lift", 'You pick up')
    end

    DRC.bput("put my #{@lighter_info['type']} in my #{@lighter_info['container']}", 'You put')

    Flags.reset('new-cig')
    true
  end

  def smoke_cig
    inhale_counter = 0
    until Flags['new-cig']
      if @image
        DRC.bput("inhale my #{@cigar}", 'You take', 'What were', 'out of your lungs first')
        exhale_smoke
        waitrt?
      else
        output = "smoke my #{@cigar}"
        output = "inhale my #{@cigar}" if (inhale_counter == 0)
        DRC.bput("#{output}", 'You puff', 'You take', 'What were')
        exhale_smoke if (inhale_counter == 0)
        pause 15
        inhale_counter += 1
        inhale_counter = 0 if inhale_counter > 2
        next
      end
    end
  end
end

Smoker.new

# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#crafting
=end

custom_require.call(%w(common common-crafting common-items common-money common-travel drinfomon))

class Crafting
  include DRC
  include DRCC
  include DRCI
  include DRCM
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'material', regex: /\w+/, description: 'Metal type of the ingot' },
        { name: 'item_name', display: 'recipe name', regex: /^[A-z\s]+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'stamp', regex: /^stamp/i, optional: true },
        { name: 'temper', regex: /^temper/i, optional: true },
        { name: 'hone', regex: /^hone/i, optional: true },
        { name: 'balance', regex: /^balance/i, optional: true },
        { name: 'buy', regex: /^buy/i, optional: true }
      ]
    ]

    args = parse_args(arg_definitions)
    crafting_data = get_data('crafting')
    recipe = recipe_lookup(crafting_data.crafting_recipes, args.item_name)
    discipline = recipe['type']
    settings = get_settings
    discipline_data = crafting_data[discipline][settings.hometown]
    parts = recipe['part']

    prep(settings, args.material, discipline, discipline_data, recipe, parts,
         args.buy)
  end

  def prep(settings, material, discipline, discipline_data, recipe, parts,
           buy)
    check_volume(discipline_data, recipe)
    buy_parts(settings, parts)
    echo "Discipline: #{discipline}"
    case discipline
    when "blacksmithing", "weaponsmithing", "armorsmithing"
      buy_ingot(settings, discipline_data) if buy
      check_oil(settings, discipline_data)
      find_anvil(settings.hometown)
      wait_for_script_to_complete('forge', [recipe['type'],
                                  recipe['chapter'],
                                  recipe['name'],
                                  material, recipe['noun']])
    when "shaping"
      buy_lumber(settings.hometown, discipline_data)
      stow_item(settings, 'lumber')
      if ["bow", "longbow", "shortbow"].include? recipe['noun']
        check_stain(settings, discipline_data)
      end
      find_shaping_room(settings.hometown, settings.engineering_room)
      wait_for_script_to_complete('shape', [recipe['chapter'],
                                  recipe['name'],
                                  material, recipe['noun']])
      fput('get lumber')
      stow_item(settings, 'lumber')
    end
    
    #dispose_scrap(discipline_data, recipe)
  end
  
  def check_stain(settings, discipline_data)
    unless search?(discipline_data['stain-full'])
      ensure_copper_on_hand(1000, settings.hometown)
      order_item(discipline_data['stain-room'],
                 discipline_data['stain-number'])
      stow_item(settings, 'stain')
    end
  end

  def check_oil(settings, discipline_data)
    unless search?(discipline_data['finisher-full'])
      ensure_copper_on_hand(1000, settings.hometown)
      order_item(discipline_data['finisher-room'],
                 discipline_data['finisher-number'])
      stow_item(settings, 'oil')
    end
  end

  def buy_ingot(settings, discipline_data)
    ensure_copper_on_hand(700, settings.hometown)
    order_item(discipline_data['stock-room'],
               discipline_data['stock-number'])
    stow_item(settings, 'ingot')
  end

  def buy_lumber(hometown, discipline_data)
    ensure_copper_on_hand(5000, hometown)
    order_item(discipline_data['stock-room'],
               discipline_data['stock-number'])
  end

  def stow_item(settings, name)
    stow_crafting_item(name, settings.crafting_container('backpack'),
                       settings.engineering_belt(nil))
  end

  def buy_parts(settings, parts)
    ensure_copper_on_hand(5000, settings.hometown)

    parts.each do |part|
      data = get_data('crafting')['recipe_parts'][part][settings.hometown]
      echo part
      echo settings.hometown
      if data['part-number']
        order_item(data['part-room'], data['part-number'])
      else
        buy_item(data['part-room'], part)
      end
      stow_item(settings, part)
    end
  end

  def check_volume(discipline_data, recipe)
    if discipline_data['stock-volume'] < recipe['volume'] && buy
      echo '***You cannot buy an ingot large enough to craft this item.***'
      echo '***Automatically combining ingots via smelting is not yet supported.***'
      echo '***You will need to do so by hand and then call ;smith again.***'
      exit
    end
  end

  def dispose_scrap(discipline_data, recipe)
    return unless discipline_data['stock-volume'] > recipe['volume']

    dispose(discipline_data['stock-name'], discipline_data['trash-room'])
  end
end

Crafting.new

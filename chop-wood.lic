=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#mine
=end

custom_require.call(%w(common equipmanager common-travel))

class Mine
  include DRC
  include DRCT

  def initialize
    setup

    bput("get my #{@lumber_implement}", 'You get')

    chop

    if /roundtime/i =~ bput('watch forest careful', 'Your analysis has revealed no additional trees', 'roundtime')
      chop
    end

    fput("stow #{@lumber_implement}")
  end

  def handle_danger
    fix_standing

    if bleeding?
      snapshot = Room.current.id
      wait_for_script_to_complete('safe-room')
      walk_to(snapshot)
      bput("get my #{@lumber_implement}", 'You get')
    end

    return unless Flags['chop-danger']
    Flags.reset('chop-danger')
    waitrt?
    until /danger|find nothing of concern/ =~ bput('watch forest danger', 'Unfortunately', 'shown a way to .* reduce the danger', 'find nothing of concern')
      pause
      waitrt?
    end
    handle_danger
  end

  def chop
    waitrt?
    handle_danger

    result = bput('chop tree',
                  'You smack your axe into some brush nearby, but are unable to find a tree large enough to produce usable wood.',
                  'Despite thoroughly exploring the area you fail to find any trees to chop.',
                  'The only promising tree nearby reveals a rotted core after just a few chops.',
                  'but it quickly becomes apparent that property damage is',
                  'roundtime')
    waitrt?

    @loot_list.each do |item|
      matches = DRRoom.room_objs.grep(/\b#{item}/i)
      matches.each do |match|
        if @use_packet && packet?
          bput("push #{item} #{match.scan(/\w+/).last} with my packet", 'You push')
          bput('stow my packet', 'You put', 'Stow what')
          bput('stow deed', 'You put')
        else
          bput("stow #{match.scan(/\w+/).last}", 'You put')
        end
      end
    end
    chop if result =~ /roundtime/i
  end

  def packet?
    'You get' == bput('get my packet', 'You get', 'What were you referring to')
  end

  def setup
    EquipmentManager.new.empty_hands
    Flags.add('chop-danger', 'You notice an unusual smell drifting through the area', 'A monotonous buzzing sound fills the air', 'A loud cracking sound resonates from somewhere closeby')
    settings = get_settings
    @lumber_implement = settings.lumber_implement
    @loot_list = settings.lumber_buddy_tree_list
    @use_packet = settings.mine_use_packet
  end
end

Mine.new

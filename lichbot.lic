# want_script_output
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#lichbot
=end

custom_require.call(%w(common drinfomon events))

class Lichbot
  include DRC

  def initialize(announce, sleep, greet)
    bput('sleep', 'You relax', 'You are already') if sleep
    stop_script('smartlisten') if Script.running?('smartlisten') && sleep

    Flags.add('give-accepted', '.* has accepted your offer and is now holding .*')
    Flags.add('give-expired', 'Your offer to .* has expired\.')

    @lnet = (Script.running + Script.hidden).find { |val| val.name == 'lnet' }
    @validated_characters = []
    @greet = greet
    @inventory = []
    refresh_inventory

    chat("Lichbot is up and running in room #{Room.current.id}! Whisper me 'help' for more details.") if announce
  end

  def accept(character)
    return unless validated?(character)

    waitrt?
    bput('accept', 'You accept')
    bput('stow right', 'You put')
    refresh_inventory
  end

  def get_item?(item)
    waitrt?

    case bput("get #{item}", 'You get', 'You are already holding', 'But that is already in your inventory', 'Please rephrase', 'What were you', 'You should stop playing')
    when 'But that is already in your inventory'
      return get_item?("second #{item}")
    when 'You should stop playing'
      bput('stop play', 'You stop playing your song', 'In the name of', 'But you\'re not performing')
      return get_item?(item)
    when 'Please rephrase', 'What were you'
      return false
    end

    true
  end

  def give(character, item)
    return unless validated?(character)

    unless get_item?(item)
      fput "whisper #{character} Sorry, I failed to find #{item} in my inventory"
      return
    end

    Flags.reset('give-accepted')
    Flags.reset('give-expired')
    case bput("give #{item} to #{character}", 'You offer', 'What is it')
    when 'What is it'
      fput "whisper #{character} Sorry, I failed to give you #{item}"
      stow_hands
      return
    end

    pause 0.5 until Flags['give-accepted'] || Flags['give-expired']

    bput("stow #{item}", 'You put') if Flags['give-expired']
    refresh_inventory if Flags['give-accepted']
  end

  def inventory(character)
    return unless validated?(character)

    fput "whisper #{character} My inventory is:"
    @inventory.each { |item| fput "whisper #{character}   #{item}" }
    fput "whisper #{character} END"
  end

  def who(character)
    return if validated?(character)

    echo "Attempting to validate: #{character}"
    @lnet.unique_buffer.push("who #{character}")
  end

  def help(character)
    return unless validated?(character)

    fput "whisper #{character} Supported commands are:"
    fput "whisper #{character}   help - this list"
    fput "whisper #{character}   (inv|inventory) - view the items I have available"
    fput "whisper #{character}   (give me|giveme) [item] - take an item from me"
    fput "whisper #{character} I will also accept and stow any item you trade me"
  end

  def validate(character)
    echo "Successfully validated: #{character}"
    @validated_characters << character

    return unless @greet

    fput "whisper #{character} Hi! I'm your friendly neighborhood lichbot. Whisper me 'help' for more details. Don't worry, I've memorized your name so you won't see this message again."
  end

  private

  def refresh_inventory
    waitrt?
    fput('inv list')
    pause

    log = reget(200)
    start_index = log.rindex { |x| x =~ /You have/i } + 1
    end_index = log.rindex { |x| x =~ /Roundtime/i } - 1

    @inventory =
      log[start_index..end_index]
      .select { |item| item.lstrip.start_with?('-') }
      .map { |item| item.strip[1..-1] }
  end

  def validated?(character)
    @validated_characters.include?(character)
  end

  def chat(text)
    @lnet.unique_buffer.push("chat #{text}")
  end
end

arg_definitions = [
  [
    { name: 'start', regex: /start/i, description: 'Required: prevents accidentally starting up lichbot' },
    { name: 'announce', regex: /announce/i, optional: true, description: 'If arg is present, lichbot will announce its presence in LNet' },
    { name: 'sleep', regex: /sleep/i, optional: true, description: 'If arg is present, lichbot will sleep so as not to gain experience' },
    { name: 'greet', regex: /greet/i, optional: true, description: 'If arg is present, lichbot will greet characters after validating (but only once)' }
  ]
]

args = parse_args(arg_definitions)

lichbot = Lichbot.new(args.announce, args.sleep, args.greet)

@last_room_list = []
loop do
  line = script.gets?
  pause 0.05 unless line

  if line =~ /^(.*) offers you (.*).  Enter ACCEPT to accept the offer or DECLINE to decline it.  The offer will expire in 30 seconds.$/
    character = Regexp.last_match(1)

    lichbot.accept(character)
  elsif line =~ /^(.*) whispers, "(inv|inventory|helpme|help me|help)"$/i
    character = Regexp.last_match(1)
    command = Regexp.last_match(2)

    case command.downcase
    when 'inventory', 'inv'
      lichbot.inventory(character)
    when 'help', 'helpme', 'help me'
      lichbot.help(character)
    end
  elsif line =~ /^(.*) whispers, "(giveme|give me|give) (.*)"$/i
    character = Regexp.last_match(1)
    _command = Regexp.last_match(2)
    item = Regexp.last_match(3)

    lichbot.give(character, item)
  elsif DRRoom.pcs != @last_room_list
    new_characters = DRRoom.pcs - @last_room_list

    new_characters.each { |name| lichbot.who(name) }
    @last_room_list = DRRoom.pcs
  elsif line =~ /^\[server\]: "(.*)"$/
    result = Regexp.last_match(1)

    next unless result =~ /DR:(.*) is tuned to the following channels|DR:(.*) is connected but not tuned to any channels/

    character = Regexp.last_match(1) || Regexp.last_match(2)
    lichbot.validate(character)
  end
end

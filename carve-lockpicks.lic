=begin
	Need these settings in your yaml:
    #Header
    Lockpick_carve_settings:
      grand_container: #bag for complete grandmaster's lockpicks
      master_container: #bag for completed master's lockpicks
      trash_container: #bag for anything less than master/grandmaster
      initial_grand: #true/false as to whether to initial your grandmasters' lockpicks
=end

custom_require.call(%w[common common-items common-crafting])
@@grands_count = 0
@@masters_count = 0

class CarveLockpicks

  def initialize
    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.engineering_belt
    @lockpick_carve_settings = @settings.lockpick_carve_settings

    main_loop
	end

  def main_loop
    DRCC.get_crafting_item("carving knife", @bag, @bag_items, @belt)
    spell_list = @settings.waggle_sets['carve'].join(' ').split(' ').map(&:capitalize)
    spell_list.reject! { |spell| spell =~ /delay|khri|puncture|slice|impact|fire|cold|electric/i }
    if DRCI.exists?("keyblank pocket")
      loop do
        DRC.wait_for_script_to_complete('buff', ['carve']) unless spell_list.all? { |name| DRSpells.active_spells["Khri #{name}"] }
        DRC.bput("sit", 'You sit', 'You are already sitting', 'You rise', 'While swimming?') unless sitting?
        get_keyblank
        carve_lockpick if carve_keyblank
      end
    else
      DRCC.stow_crafting_item("carving knife", @bag, @belt)
      exit
    end
  end

  def get_keyblank
    case DRC.bput("get keyblank from my keyblank pocket", 'You get', 'What were you referring to')
    when /What were you referring to/
      case DRC.bput("count my keyblank pocket", 'nothing inside the keyblank pocket', 'It looks like there', 'I could not find what you were referring to')
      when /nothing inside the keyblank pocket/
        empty_pocket
      when /It looks like there/
        DRC.bput("open my keyblank pocket", 'You open a')
      when /I could not find what you were referring to/
        DRCC.stow_crafting_item("carving knife", @bag, @belt)
        exit
      end
	    get_keyblank
    end
  end

  def carve_keyblank
    case DRC.bput("carve my keyblank with my knife", 'proudly glance down at a grandmaster', 'begin to carefully carve', 'proudly glance down at a master', 'but feel your knife slip')
    when /proudly glance down at a grandmaster/
      DRC.bput("carve my lockpick with my knife", 'With the precision and skill') if @lockpick_carve_settings['initial_grand']
      stow_lockpick(@lockpick_carve_settings['grand_container'])
      @@grands_count += 1
      false
    when /begin to carefully carve/
      true
    when /proudly glance down at a master/
      stow_lockpick(@lockpick_carve_settings['master_container'])
      @@masters_count += 1
      false
    when /but feel your knife slip/
      false
    end
  end

  def carve_lockpick
    case DRC.bput("carve my lockpick with my knife", 'proudly glance down at a grandmaster', 'proudly glance down at a master', 'into the side of a', 'find a creature to carve', 'It would be better', 'Working with extreme caution', 'but feel your knife slip')
    when /proudly glance down at a grandmaster/
      DRC.bput("carve my lockpick with my knife", 'With the precision and skill') if @lockpick_carve_settings['initial_grand']
      @@grands_count += 1
      stow_lockpick(@lockpick_carve_settings['grand_container'])
    when /proudly glance down at a master/
      @@masters_count += 1
      stow_lockpick(@lockpick_carve_settings['master_container'])
    when /but feel your knife slip/
      return
    when /find a creature to carve/, /It would be better/
      stow_lockpick(@lockpick_carve_settings['trash_container'])
    when /Working with extreme caution/
      carve_lockpick
    when /iron lockpick in your hands/
      stow_lockpick(@lockpick_carve_settings['trash_container'])
    end
  end

  def stow_lockpick(container)
    unless DRCI.put_away_item?('lockpick', container)
      DRC.message("Bag's full, exiting")
      exit
    end
  end

  def empty_pocket
    DRC.bput("get my keyblank pocket", 'You get')
    DRC.bput("drop my pocket", 'You drop')
    return unless /referring/ =~ DRC.bput("open my keyblank pocket", 'You open', 'What were you referring')
    DRCC.stow_crafting_item("carving knife", @bag, @belt)
    exit
  end
end

before_dying do
  DRC.message("Total grandmaster's picks: #{@@grands_count}")
  DRC.message("Total master's picks: #{@@masters_count}")
  percentage = (@@grands_count.to_f / (@@grands_count + @@masters_count).to_f)*100
  DRC.message("Grandmaster's percentage:  #{percentage}%")
end

CarveLockpicks.new

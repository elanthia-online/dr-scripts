=begin
	Need these settings in your yaml:
    #Header
    Lockpick_carve_settings:
      grand_container: #bag for complete grandmaster's lockpicks
      master_container: #bag for completed master's lockpicks
      trash_container: #bag for anything less than master/grandmaster
      initial_grand: #true/false as to whether to initial your grandmasters' lockpicks
      full_rings: #bag for full rings, can't be either grand/master bag
      carve_past_ring_capacity: #true/false to continue carving after you've run out of lockpick rings
=end

custom_require.call(%w[common common-items common-crafting])
@@grands_count = 0
@@masters_count = 0

class CarveLockpicks

  def initialize
    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.engineering_belt
    @lockpick_carve_settings = @settings.lockpick_carve_settings
    arg_definitions = [
      [
        { name: 'ring', regex: /ring/i, optional: true, description: 'Put completed batches of lockpicks on rings, need rings in the same bag as the lockpicks (grands rings in grands bag)' },
        { name: 'script_summary', optional: true, description: 'Carves lockpicks with carving knife, drawing from keyblank pockets until empty.' }
      ]
    ]
    args = parse_args(arg_definitions)
    @grands_ring_ready, @masters_ring_ready = [25,25]
    @master_batch, @grand_batch = [true,true] if args.ring

    main_loop
	end

  def main_loop
    DRCC.get_crafting_item("carving knife", @bag, @bag_items, @belt)
    spell_list = @settings.waggle_sets['carve'].join(' ').split(' ').map(&:capitalize)
    spell_list.reject! { |spell| spell =~ /delay|khri|puncture|slice|impact|fire|cold|electric/i }
    if DRCI.exists?("keyblank pocket")
      loop do
        DRC.wait_for_script_to_complete('buff', ['carve']) unless spell_list.all? { |name| DRSpells.active_spells["Khri #{name}"] }
        DRC.bput("sit", 'You sit', 'You are already sitting', 'You rise', 'While swimming?') unless sitting?
        get_keyblank
        carve_lockpick if carve_keyblank
      end
    else
      DRCC.stow_crafting_item("carving knife", @bag, @belt)
      exit
    end
  end

  def get_keyblank
    case DRC.bput("get keyblank from my keyblank pocket", 'You get', 'What were you referring to', 'You need a free hand')
    when /What were you referring to/
      case DRC.bput("count my keyblank pocket", 'nothing inside the keyblank pocket', 'It looks like there', 'I could not find what you were referring to')
      when /nothing inside the keyblank pocket/
        empty_pocket
      when /It looks like there/
        DRC.bput("open my keyblank pocket", 'You open a')
      when /I could not find what you were referring to/
        DRCC.stow_crafting_item("carving knife", @bag, @belt)
        exit
      end
      get_keyblank
    when /You need a free hand/
      if /referring/ =~ DRC.bput("Put my keyblank in my keyblank pocket", 'You put a', 'What were you referring to')
        fput('stow left')
      end
      get_keyblank
    end
  end

  def carve_keyblank
    case DRC.bput("carve my keyblank with my knife", 'proudly glance down at a grandmaster', 'begin to carefully carve', 'proudly glance down at a master', 'but feel your knife slip', 'You are too injured to do any carving')
    when /proudly glance down at a grandmaster/
      DRC.bput("carve my lockpick with my knife", 'With the precision and skill') if @lockpick_carve_settings['initial_grand']
      @@grands_count += 1
      @grands_ring_ready -= 1
      stow_lockpick(@lockpick_carve_settings['grand_container'])
      false
    when /begin to carefully carve/
      true
    when /proudly glance down at a master/
      @@masters_count += 1
      @masters_ring_ready -= 1
      stow_lockpick(@lockpick_carve_settings['master_container'])
      false
    when /but feel your knife slip/
      false
    when /You are too injured to do any carving/
      DRC.message("Need to be completely wound-free, go get healed")
      DRC.bput("Put my keyblank in my keyblank pocket", 'You put a')
      DRCC.stow_crafting_item("carving knife", @bag, @belt)
      exit
    end
  end

  def carve_lockpick
    case DRC.bput("carve my lockpick with my knife", 'proudly glance down at a grandmaster', 'proudly glance down at a master', 'into the side of a', 'find a creature to carve', 'It would be better', 'Working with extreme caution', 'but feel your knife slip')
    when /proudly glance down at a grandmaster/
      DRC.bput("carve my lockpick with my knife", 'With the precision and skill') if @lockpick_carve_settings['initial_grand']
      @@grands_count += 1
      @grands_ring_ready -= 1
      stow_lockpick(@lockpick_carve_settings['grand_container'])
    when /proudly glance down at a master/
      @@masters_count += 1
      @masters_ring_ready -= 1
      stow_lockpick(@lockpick_carve_settings['master_container'])
    when /but feel your knife slip/
      return
    when /find a creature to carve/, /It would be better/
      stow_lockpick(@lockpick_carve_settings['trash_container'])
    when /Working with extreme caution/
      carve_lockpick
    when /iron lockpick in your hands/
      stow_lockpick(@lockpick_carve_settings['trash_container'])
    end
  end

  def stow_lockpick(container)
    # Ring a set of 25
    if @grands_ring_ready <= 0 && @grand_batch
      ring_batch('grand')
      return
    elsif @masters_ring_ready <= 0 && @master_batch
      ring_batch('master')
      return
    end
    # Unless we can stow it (eg full bag), we call it quits
    unless DRCI.put_away_item?('lockpick', container)
      DRC.message("Bag's full, exiting")
      DRCC.stow_crafting_item("carving knife", @bag, @belt)
      exit
    end
  end

  def empty_pocket
    DRC.bput("get my keyblank pocket", 'You get')
    DRC.bput("drop my pocket", 'You drop')
    return unless /referring/ =~ DRC.bput("open my keyblank pocket", 'You open', 'What were you referring')
    DRCC.stow_crafting_item("carving knife", @bag, @belt)
    exit
  end

  def ring_batch(type)
    DRCC.stow_crafting_item("carving knife", @bag, @belt)
    case type
    when 'grand'
      if /referring/ =~ DRC.bput("Get lockpick ring from my #{@lockpick_carve_settings['grand_container']}", /^You get/, /^What were you referring/)
        DRC.message("Out of rings for Grandmaster's Picks")
        stow_lockpick(@lockpick_carve_settings['grand_container'])
        exit unless @lockpick_carve_settings['carve_past_ring_capacity']
        DRCC.get_crafting_item("carving knife", @bag, @bag_items, @belt)
        @grand_batch = false
        return
      else
        container = @lockpick_carve_settings['grand_container']
        @grands_ring_ready = 25
      end
    when 'master'
      if /referring/ =~ DRC.bput("Get lockpick ring from my #{@lockpick_carve_settings['master_container']}", /^You get/, /^What were you referring/)
        DRC.message("Out of rings for Master's Picks")
        stow_lockpick(@lockpick_carve_settings['master_container'])
        exit unless @lockpick_carve_settings['carve_past_ring_capacity']
        DRCC.get_crafting_item("carving knife", @bag, @bag_items, @belt)
        @master_batch = false
        return
      else
        container = @lockpick_carve_settings['master_container']
        @masters_ring_ready = 25
      end
    end
    DRC.bput("Put my lockpick on my lockpick ring", /^You put .* lockpick on your lockpick ring/)
    24.times do
      DRC.bput("Get lockpick from my #{container}", /^You get a/)
      DRC.bput("Put my lockpick on my lockpick ring", /^You put .* lockpick on your lockpick ring/)
    end
    unless /You put/ =~ DRC.bput("Put my lockp ring in my #{@lockpick_carve_settings['full_rings']}", /^You put/, /^That's too heavy/, /no more room/)
      DRC.message("Out of room for rings")
      exit
    end
    
    DRCC.get_crafting_item("carving knife", @bag, @bag_items, @belt)
  end
end

before_dying do
  DRC.message("Total grandmaster's picks: #{@@grands_count}")
  DRC.message("Total master's picks: #{@@masters_count}")
  percentage = (@@grands_count.to_f / (@@grands_count + @@masters_count).to_f)*100
  DRC.message("Grandmaster's percentage:  #{percentage}%")
end

CarveLockpicks.new

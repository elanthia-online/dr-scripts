# quiet
=begin
  Documentation: https://elanthipedia.play.net/mediawiki/index.php/Lich_script_development#workorders
=end

custom_require.call(%w(common common-crafting common-items common-money common-travel drinfomon))

class WorkOrders
  include DRC
  include DRCC
  include DRCI
  include DRCM
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'discipline', options: %w(blacksmithing tailoring shaping carving), description: 'What type of workorder to do?' }
      ]
    ]

    args = parse_args(arg_definitions)
    work_order(args.discipline)
  end

  def work_order(discipline)
    settings = get_settings(['crafting'])
    @bag = settings.crafting_container('backpack')
    info = settings[discipline]

    @recipes = settings.crafting_recipes.select { |recipe| recipe['work_order'] && recipe['type'] =~ /#{discipline}/i }

    unless info
      echo("No crafting settings found for discipline: #{discipline}")
      exit
    end

    item, quantity = request_work_order(info['npc-rooms'], info['npc'], info['npc_last_name'], discipline, info['logbook'], settings.workorder_diff)

    tools = []

    case discipline
    when 'blacksmithing', 'weaponsmithing', 'armorsmithing'
      tools = settings.forging_tools([])
      @belt = settings.forging_belt(nil)
      forge_items(info, item, quantity)
    when 'tailoring'
      tools = settings.knitting_tools([])
      @belt = settings.outfitting_belt(nil)
      sew_items(info, item, quantity)
    when 'shaping'
      @engineering_room = settings.engineering_room
      tools = settings.shaping_tools([])
      @belt = settings.engineering_belt(nil)
      shape_items(info, item, quantity)
    when 'carving'
      @engineering_room = settings.engineering_room
      tools = settings.carving_tools([])
      @belt = settings.engineering_belt(nil)
      carve_items(info, item, quantity)
    else
      echo 'No discipline found?'
      return
    end

    complete_work_order(info)

    repair_items(info, tools)
  end

  def complete_work_order(info)
    stow_hands
    bput("get my #{info['logbook']} logbook", 'You get')
    loop do
      find_npc(info['npc-rooms'], info['npc_last_name'])
      break if 'You can' != bput("give log to #{info['npc']}", 'You hand', 'You can', 'Apparently the work order time limit has expired')
    end
    stow_tool('logbook')
  end

  def get_tool(name)
    get_crafting_item(name, @belt)
  end

  def stow_tool(name)
    stow_crafting_item(name, @bag, @belt)
  end

  def repair_items(info, tools)
    walk_to info['repair-room']

    need_to_repair = tools.find do |tool_name|
      get_tool(tool_name)
      result = bput("analyze my #{tool_name}", 'practically in mint', 'pristine condition', 'Roundtime')
      waitrt?
      stow_tool(tool_name)
      /roundtime/i =~ result
    end

    return unless need_to_repair

    tools.each do |tool_name|
      get_tool(tool_name)
      case bput("give #{info['repair-npc']}", "There isn't a scratch on that", 'Just give it to me again')
      when /scratch/
        stow_tool(tool_name)
      when /give/
        fput("give #{info['repair-npc']}")
        bput('stow ticket', 'You put')
      end
    end

    while 'You get' == bput('get my ticket', 'You get', 'What were')
      pause 30 until 'should be ready by now' == bput('look at my ticket', 'should be ready by now', 'Looking at the')
      fput("give #{info['repair-npc']}")
      pause 1
      stow_tool(checkright) if checkright
      stow_tool(checkleft) if checkleft
    end
  end

  def find_recipe(info, item, quantity)
    recipe = @recipes.find { |r| r['name'] == item }
    items_per_stock = info['stock-volume'] / recipe['volume']
    spare_stock = (info['stock-volume'] % recipe['volume']).nonzero?
    scrap = spare_stock || (quantity % items_per_stock).nonzero?

    [recipe, items_per_stock, spare_stock, scrap]
  end

  def go_door
    fput('open door')
    fix_standing
    fput('go door')
  end

  def carve_items(info, item, quantity)
    ensure_copper_on_hand(5000)
    recipe, items_per_stock, spare_stock, scrap = find_recipe(info, item, quantity)

    quantity.times do |count|
      if (count % items_per_stock).zero?
        dispose("#{info['stock-name']} stone") if count > 0 && spare_stock
        if count > 0
          go_door
          pause 0.5 until Room.current.id
        end

        order_item(info['stock-room'], info['stock-number'])
        stow_hands
        fput('tap my deed')
        fput("get #{info['stock-name']} rock")
        if search?(info['polish-full'])
          fput('get my surface polish')
          /(\d+)/ =~ bput('count my polish', 'The surface polish has \d+ uses remaining')
          if Regexp.last_match(1).to_i < 3
            dispose('polish')
            order_item(info['polish-room'], info['polish-number'])
            stow_hands
          end
        else
          order_item(info['polish-room'], info['polish-number'])
          stow_hands
        end
        stow_hands
        find_shaping_room(@engineering_room)
      end

      wait_for_script_to_complete('carve', [recipe['chapter'], item, info['stock-name'], recipe['noun']])

      bundle_item(recipe['noun'], info['logbook'])
    end

    dispose("#{info['stock-name']} stone") if scrap
    go_door if XMLData.room_title.include?('Workshop')
  end

  def shape_items(info, item, quantity)
    ensure_copper_on_hand(5000)
    recipe, items_per_stock, spare_stock, scrap = find_recipe(info, item, quantity)

    quantity.times do |count|
      if (count % items_per_stock).zero?
        dispose("#{info['stock-name']} lumber") if count > 0 && spare_stock
        if count > 0
          go_door
          pause 0.5 until Room.current.id
        end
        order_item(info['stock-room'], info['stock-number'])
        stow_hands
        find_shaping_room(@engineering_room)
      end

      wait_for_script_to_complete('shape', [recipe['chapter'], item, info['stock-name'], recipe['noun']])

      bundle_item(recipe['noun'], info['logbook'])
    end

    dispose("#{info['stock-name']} lumber") if scrap
    go_door if XMLData.room_title.include?('Workshop')
  end

  def order_yarn(stock_room, stock_needed, stock_number)
    stock_needed.times do
      order_item(stock_room, stock_number)
      next unless checkleft && checkright
      bput('combine yarn with yarn', 'You combine')
    end

    stow_tool('yarn')
  end

  def sew_items(info, item, quantity)
    ensure_copper_on_hand(5000)
    recipe = @recipes.find { |r| r['name'] == item }

    existing = if 'What were' == bput("get yarn from my #{@bag}", 'What were', 'You get')
                 0
               else
                 bput('count my yarn', 'You count out \d+ yards').scan(/\d+/).first.to_i
               end
    stock_needed = ((quantity * recipe['volume'] - existing) / 100.0).ceil
    order_yarn(info['stock-room'], stock_needed, info['stock-number'])

    find_sewing_room

    quantity.times do
      wait_for_script_to_complete('sew', ['log', 'knitting', recipe['chapter'], item, recipe['noun']])
    end
  end

  def forge_items(info, item, quantity)
    recipe, = find_recipe(info, item, quantity)

    remaining_volume = 0

    ensure_copper_on_hand(5000)

    quantity.times do
      if remaining_volume < recipe['volume']
        dispose(info['stock-name'], info['trash-room']) if remaining_volume > 0
        order_item(info['stock-room'], info['stock-number'])
        stow_hands
        remaining_volume = info['stock-volume']
      end

      wait_for_script_to_complete('smith', ['bronze', item])
      bundle_item(recipe['noun'], info['logbook'])

      remaining_volume -= recipe['volume']
    end
    dispose(info['stock-name'], info['trash-room']) if remaining_volume > 0
  end

  def bundle_item(noun, logbook)
    bput("get my #{logbook} logbook", 'You get')
    if /requires items of/ =~ bput("bundle my #{noun} with my logbook", 'You notate the', 'This work order has expired', 'The work order requires items of a higher quality')
      dispose(noun)
    end
    stow_hands
  end

  def request_work_order(npc_rooms, npc, npc_last_name, discipline, logbook, diff)
    stow_hands
    bput("get my #{logbook} logbook", 'You get')

    match_names = @recipes.map { |x| x['name'] }

    loop do
      find_npc(npc_rooms, npc_last_name)
      case bput("ask #{npc} for #{diff} #{discipline} work", '^To whom', 'order for .* I need \d+ of .* quality', 'You realize you have items bundled with the logbook', 'You want to ask about shadowlings')
      when 'You want to ask about shadowlings'
        pause 10
      when /order for (.*)\. I need (\d+) of .* quality/
        item = Regexp.last_match(1)
        quantity = Regexp.last_match(2).to_i
        if quantity <= 3 && match_names.include?(item)
          stow_tool('logbook')
          return [item, quantity]
        end
      when 'You realize you have items bundled with the logbook'
        bput('untie my logbook', 'You untie')
        if checkleft.include?('logbook')
          fput("drop my #{checkright}")
        else
          fput("drop my #{checkleft}")
        end
        fput('get logbook') unless checkleft.include?('logbook') || checkright.include?('logbook')
      end
    end
  end

  def find_npc(room_list, npc)
    room_list.each do |room_id|
      break if DRRoom.npcs.include?(npc)
      walk_to(room_id)
    end
  end
end

WorkOrders.new
